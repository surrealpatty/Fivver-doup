aa34eb15670fc055b258ad0ab193e86c
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.testConnection = exports.sequelize = void 0;
const dotenv_1 = __importDefault(require("dotenv"));
const sequelize_1 = require("sequelize");
// Load environment variables from .env file
dotenv_1.default.config();
// Sequelize Database Configuration for different environments
const sequelizeConfig = {
    development: {
        username: process.env.DB_USER || 'root', // Ensure 'root' is set correctly
        password: process.env.DB_PASSWORD || '', // Ensure password is fetched from environment variable
        database: process.env.DB_NAME || 'fivver_doup',
        host: process.env.DB_HOST || '127.0.0.1', // Ensure host is correctly set
        dialect: 'mysql',
        dialectOptions: {
            charset: 'utf8mb4',
            ssl: false,
        },
        logging: process.env.NODE_ENV === 'development',
    },
    production: {
        username: process.env.PROD_DB_USER || 'root', // Make sure the production credentials are correct
        password: process.env.PROD_DB_PASSWORD || '', // Ensure password is fetched from environment variable
        database: process.env.PROD_DB_NAME || 'fivver_doup',
        host: process.env.PROD_DB_HOST || '127.0.0.1',
        dialect: 'mysql',
        dialectOptions: {
            charset: 'utf8mb4',
            ssl: true,
        },
        logging: false,
    },
    test: {
        username: process.env.TEST_DB_USER || 'root', // Test environment credentials
        password: process.env.TEST_DB_PASSWORD || '', // Ensure password is fetched from environment variable
        database: process.env.TEST_DB_NAME || 'fivver_doup_test',
        host: process.env.DB_HOST || '127.0.0.1',
        dialect: 'mysql',
        dialectOptions: {
            charset: 'utf8mb4',
            ssl: false,
        },
        logging: false,
    },
};
// Select the configuration based on the current environment
const environment = process.env.NODE_ENV || 'development'; // Default to 'development' if NODE_ENV is not set
const currentConfig = sequelizeConfig[environment];
// Ensure DB_PORT is a valid integer
const dbPort = process.env.DB_PORT ? parseInt(process.env.DB_PORT, 10) : 3306; // Default to 3306 if DB_PORT is not set
if (isNaN(dbPort)) {
    throw new Error(`Invalid DB_PORT: ${process.env.DB_PORT}. Falling back to default 3306.`);
}
// Initialize Sequelize with the selected configuration
const sequelize = new sequelize_1.Sequelize(currentConfig.database, currentConfig.username, currentConfig.password, {
    host: currentConfig.host,
    dialect: currentConfig.dialect,
    dialectOptions: currentConfig.dialectOptions,
    logging: currentConfig.logging,
    port: dbPort,
});
exports.sequelize = sequelize;
// Function to test the database connection
const testConnection = async () => {
    try {
        await sequelize.authenticate();
        console.log('Database connection successful');
        return true;
    }
    catch (error) {
        console.error('Unable to connect to the database:', error instanceof Error ? error.message : error);
        return false;
    }
};
exports.testConnection = testConnection;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,