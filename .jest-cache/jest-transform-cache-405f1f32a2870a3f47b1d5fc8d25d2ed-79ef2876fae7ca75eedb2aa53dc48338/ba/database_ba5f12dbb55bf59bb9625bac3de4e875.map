{"file":"C:\\surrealsystems\\Fivver-doup\\src\\config\\database.ts","mappings":"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","names":[],"sources":["C:\\surrealsystems\\Fivver-doup\\src\\config\\database.ts"],"sourcesContent":["import dotenv from 'dotenv';\r\nimport { Sequelize } from 'sequelize';\r\n\r\n// Load environment variables from .env file\r\ndotenv.config();\r\n\r\n// Define the Sequelize configuration interface\r\ninterface SequelizeConfig {\r\n  username: string;\r\n  password: string;\r\n  database: string;\r\n  host: string;\r\n  dialect: string;\r\n  dialectOptions: {\r\n    charset: string;\r\n    ssl: boolean;\r\n  };\r\n  logging: boolean;\r\n  port?: number;  // Optional port for flexibility\r\n}\r\n\r\n// Sequelize Database Configuration for different environments\r\nconst sequelizeConfig: { [key: string]: SequelizeConfig } = {\r\n  development: {\r\n    username: process.env.DB_USER || 'root',  // Ensure 'root' is set correctly\r\n    password: process.env.DB_PASSWORD || '',  // Ensure password is fetched from environment variable\r\n    database: process.env.DB_NAME || 'fivver_doup',\r\n    host: process.env.DB_HOST || '127.0.0.1',  // Ensure host is correctly set\r\n    dialect: 'mysql',\r\n    dialectOptions: {\r\n      charset: 'utf8mb4',\r\n      ssl: false,\r\n    },\r\n    logging: process.env.NODE_ENV === 'development',\r\n  },\r\n  production: {\r\n    username: process.env.PROD_DB_USER || 'root',  // Make sure the production credentials are correct\r\n    password: process.env.PROD_DB_PASSWORD || '',  // Ensure password is fetched from environment variable\r\n    database: process.env.PROD_DB_NAME || 'fivver_doup',\r\n    host: process.env.PROD_DB_HOST || '127.0.0.1',\r\n    dialect: 'mysql',\r\n    dialectOptions: {\r\n      charset: 'utf8mb4',\r\n      ssl: true,\r\n    },\r\n    logging: false,\r\n  },\r\n  test: {\r\n    username: process.env.TEST_DB_USER || 'root',  // Test environment credentials\r\n    password: process.env.TEST_DB_PASSWORD || '',  // Ensure password is fetched from environment variable\r\n    database: process.env.TEST_DB_NAME || 'fivver_doup_test',\r\n    host: process.env.DB_HOST || '127.0.0.1',\r\n    dialect: 'mysql',\r\n    dialectOptions: {\r\n      charset: 'utf8mb4',\r\n      ssl: false,\r\n    },\r\n    logging: false,\r\n  },\r\n};\r\n\r\n// Select the configuration based on the current environment\r\nconst environment = process.env.NODE_ENV || 'development';  // Default to 'development' if NODE_ENV is not set\r\nconst currentConfig = sequelizeConfig[environment];\r\n\r\n// Ensure DB_PORT is a valid integer\r\nconst dbPort = process.env.DB_PORT ? parseInt(process.env.DB_PORT, 10) : 3306;  // Default to 3306 if DB_PORT is not set\r\nif (isNaN(dbPort)) {\r\n  throw new Error(`Invalid DB_PORT: ${process.env.DB_PORT}. Falling back to default 3306.`);\r\n}\r\n\r\n// Initialize Sequelize with the selected configuration\r\nconst sequelize = new Sequelize(\r\n  currentConfig.database,\r\n  currentConfig.username,\r\n  currentConfig.password,\r\n  {\r\n    host: currentConfig.host,\r\n    dialect: currentConfig.dialect as 'mysql',\r\n    dialectOptions: currentConfig.dialectOptions,\r\n    logging: currentConfig.logging,\r\n    port: dbPort,\r\n  }\r\n);\r\n\r\n// Function to test the database connection\r\nconst testConnection = async (): Promise<boolean> => {\r\n  try {\r\n    await sequelize.authenticate();\r\n    console.log('Database connection successful');\r\n    return true;\r\n  } catch (error) {\r\n    console.error('Unable to connect to the database:', error instanceof Error ? error.message : error);\r\n    return false;\r\n  }\r\n};\r\n\r\n// Export sequelize and testConnection for use in other parts of the application\r\nexport { sequelize, testConnection };\r\n"],"version":3}