{"file":"C:\\surrealsystems\\Fivver-doup\\src\\config\\database.ts","mappings":";;;;;;AAAA,oDAA4B;AAC5B,yCAA+C;AAE/C,gBAAM,CAAC,MAAM,EAAE,CAAC;AAgBhB,MAAM,eAAe,GAAuC;IAC1D,WAAW,EAAE;QACX,QAAQ,EAAE,OAAO,CAAC,GAAG,CAAC,OAAO,IAAI,MAAM;QACvC,QAAQ,EAAE,OAAO,CAAC,GAAG,CAAC,WAAW,IAAI,EAAE;QACvC,QAAQ,EAAE,OAAO,CAAC,GAAG,CAAC,OAAO,IAAI,aAAa;QAC9C,IAAI,EAAE,OAAO,CAAC,GAAG,CAAC,OAAO,IAAI,WAAW;QACxC,OAAO,EAAE,OAAO,EAAE,oBAAoB;QACtC,cAAc,EAAE;YACd,OAAO,EAAE,SAAS;SACnB;QACD,OAAO,EAAE,OAAO,CAAC,GAAG,CAAC,QAAQ,KAAK,aAAa;KAChD;IACD,UAAU,EAAE;QACV,QAAQ,EAAE,OAAO,CAAC,GAAG,CAAC,YAAY,IAAI,oBAAoB;QAC1D,QAAQ,EAAE,OAAO,CAAC,GAAG,CAAC,gBAAgB,IAAI,EAAE;QAC5C,QAAQ,EAAE,OAAO,CAAC,GAAG,CAAC,YAAY,IAAI,oBAAoB;QAC1D,IAAI,EAAE,OAAO,CAAC,GAAG,CAAC,YAAY,IAAI,gBAAgB;QAClD,OAAO,EAAE,OAAO,EAAE,oBAAoB;QACtC,cAAc,EAAE;YACd,OAAO,EAAE,SAAS;YAClB,GAAG,EAAE,IAAI;SACV;QACD,OAAO,EAAE,KAAK;KACf;IACD,IAAI,EAAE;QACJ,QAAQ,EAAE,OAAO,CAAC,GAAG,CAAC,YAAY,IAAI,MAAM;QAC5C,QAAQ,EAAE,OAAO,CAAC,GAAG,CAAC,gBAAgB,IAAI,EAAE;QAC5C,QAAQ,EAAE,OAAO,CAAC,GAAG,CAAC,YAAY,IAAI,kBAAkB;QACxD,IAAI,EAAE,OAAO,CAAC,GAAG,CAAC,OAAO,IAAI,WAAW;QACxC,OAAO,EAAE,OAAO,EAAE,oBAAoB;QACtC,OAAO,EAAE,KAAK;KACf;CACF,CAAC;AAEF,MAAM,WAAW,GAAG,OAAO,CAAC,GAAG,CAAC,QAAQ,IAAI,aAAa,CAAC;AAC1D,MAAM,aAAa,GAAG,eAAe,CAAC,WAAW,CAAC,CAAC;AAEnD,IAAI,CAAC,aAAa,EAAE,CAAC;IACnB,MAAM,IAAI,KAAK,CAAC,qBAAqB,WAAW,EAAE,CAAC,CAAC;AACtD,CAAC;AAED,MAAM,SAAS,GAAG,IAAI,qBAAS,CAC7B,aAAa,CAAC,QAAQ,EACtB,aAAa,CAAC,QAAQ,EACtB,aAAa,CAAC,QAAQ,EACtB;IACE,GAAG,aAAa;IAChB,OAAO,EAAE,aAAa,CAAC,OAAkB,EAAE,sBAAsB;CAClE,CACF,CAAC;AAaO,8BAAS;AAXlB,MAAM,cAAc,GAAG,KAAK,IAAsB,EAAE;IAClD,IAAI,CAAC;QACH,MAAM,SAAS,CAAC,YAAY,EAAE,CAAC;QAC/B,OAAO,CAAC,GAAG,CAAC,gCAAgC,CAAC,CAAC;QAC9C,OAAO,IAAI,CAAC;IACd,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACf,OAAO,CAAC,KAAK,CAAC,oCAAoC,EAAE,KAAK,YAAY,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC;QACpG,OAAO,KAAK,CAAC;IACf,CAAC;AACH,CAAC,CAAC;AAEkB,wCAAc","names":[],"sources":["C:\\surrealsystems\\Fivver-doup\\src\\config\\database.ts"],"sourcesContent":["import dotenv from 'dotenv';\r\nimport { Sequelize, Dialect } from 'sequelize';\r\n\r\ndotenv.config();\r\n\r\ninterface SequelizeConfig {\r\n  username: string;\r\n  password: string;\r\n  database: string;\r\n  host: string;\r\n  dialect: Dialect; // Correct type here\r\n  dialectOptions?: {\r\n    charset: string;\r\n    ssl?: boolean;\r\n  };\r\n  logging?: boolean;\r\n  port?: number;\r\n}\r\n\r\nconst sequelizeConfig: { [key: string]: SequelizeConfig } = {\r\n  development: {\r\n    username: process.env.DB_USER || 'root',\r\n    password: process.env.DB_PASSWORD || '',\r\n    database: process.env.DB_NAME || 'fivver_doup',\r\n    host: process.env.DB_HOST || '127.0.0.1',\r\n    dialect: 'mysql', // Correct type here\r\n    dialectOptions: {\r\n      charset: 'utf8mb4',\r\n    },\r\n    logging: process.env.NODE_ENV === 'development',\r\n  },\r\n  production: {\r\n    username: process.env.PROD_DB_USER || 'your_prod_username',\r\n    password: process.env.PROD_DB_PASSWORD || '',\r\n    database: process.env.PROD_DB_NAME || 'your_prod_database',\r\n    host: process.env.PROD_DB_HOST || 'your_prod_host',\r\n    dialect: 'mysql', // Correct type here\r\n    dialectOptions: {\r\n      charset: 'utf8mb4',\r\n      ssl: true,\r\n    },\r\n    logging: false,\r\n  },\r\n  test: {\r\n    username: process.env.TEST_DB_USER || 'root',\r\n    password: process.env.TEST_DB_PASSWORD || '',\r\n    database: process.env.TEST_DB_NAME || 'fivver_doup_test',\r\n    host: process.env.DB_HOST || '127.0.0.1',\r\n    dialect: 'mysql', // Correct type here\r\n    logging: false,\r\n  },\r\n};\r\n\r\nconst environment = process.env.NODE_ENV || 'development';\r\nconst currentConfig = sequelizeConfig[environment];\r\n\r\nif (!currentConfig) {\r\n  throw new Error(`Invalid NODE_ENV: ${environment}`);\r\n}\r\n\r\nconst sequelize = new Sequelize(\r\n  currentConfig.database,\r\n  currentConfig.username,\r\n  currentConfig.password,\r\n  {\r\n    ...currentConfig,\r\n    dialect: currentConfig.dialect as Dialect, // Type assertion here\r\n  }\r\n);\r\n\r\nconst testConnection = async (): Promise<boolean> => {\r\n  try {\r\n    await sequelize.authenticate();\r\n    console.log('Database connection successful');\r\n    return true;\r\n  } catch (error) {\r\n    console.error('Unable to connect to the database:', error instanceof Error ? error.message : error);\r\n    return false;\r\n  }\r\n};\r\n\r\nexport { sequelize, testConnection };"],"version":3}