f7044afdf233c0f8c48c818b1d5da224
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.testConnection = exports.sequelize = void 0;
const dotenv_1 = __importDefault(require("dotenv"));
const sequelize_1 = require("sequelize");
dotenv_1.default.config();
const sequelizeConfig = {
    development: {
        username: process.env.DB_USER || 'root',
        password: process.env.DB_PASSWORD || '',
        database: process.env.DB_NAME || 'fivver_doup',
        host: process.env.DB_HOST || '127.0.0.1',
        dialect: 'mysql', // Correct type here
        dialectOptions: {
            charset: 'utf8mb4',
        },
        logging: process.env.NODE_ENV === 'development',
    },
    production: {
        username: process.env.PROD_DB_USER || 'your_prod_username',
        password: process.env.PROD_DB_PASSWORD || '',
        database: process.env.PROD_DB_NAME || 'your_prod_database',
        host: process.env.PROD_DB_HOST || 'your_prod_host',
        dialect: 'mysql', // Correct type here
        dialectOptions: {
            charset: 'utf8mb4',
            ssl: true,
        },
        logging: false,
    },
    test: {
        username: process.env.TEST_DB_USER || 'root',
        password: process.env.TEST_DB_PASSWORD || '',
        database: process.env.TEST_DB_NAME || 'fivver_doup_test',
        host: process.env.DB_HOST || '127.0.0.1',
        dialect: 'mysql', // Correct type here
        logging: false,
    },
};
const environment = process.env.NODE_ENV || 'development';
const currentConfig = sequelizeConfig[environment];
if (!currentConfig) {
    throw new Error(`Invalid NODE_ENV: ${environment}`);
}
const sequelize = new sequelize_1.Sequelize(currentConfig.database, currentConfig.username, currentConfig.password, {
    ...currentConfig,
    dialect: currentConfig.dialect, // Type assertion here
});
exports.sequelize = sequelize;
const testConnection = async () => {
    try {
        await sequelize.authenticate();
        console.log('Database connection successful');
        return true;
    }
    catch (error) {
        console.error('Unable to connect to the database:', error instanceof Error ? error.message : error);
        return false;
    }
};
exports.testConnection = testConnection;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiQzpcXHN1cnJlYWxzeXN0ZW1zXFxGaXZ2ZXItZG91cFxcc3JjXFxjb25maWdcXGRhdGFiYXNlLnRzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLG9EQUE0QjtBQUM1Qix5Q0FBK0M7QUFFL0MsZ0JBQU0sQ0FBQyxNQUFNLEVBQUUsQ0FBQztBQWdCaEIsTUFBTSxlQUFlLEdBQXVDO0lBQzFELFdBQVcsRUFBRTtRQUNYLFFBQVEsRUFBRSxPQUFPLENBQUMsR0FBRyxDQUFDLE9BQU8sSUFBSSxNQUFNO1FBQ3ZDLFFBQVEsRUFBRSxPQUFPLENBQUMsR0FBRyxDQUFDLFdBQVcsSUFBSSxFQUFFO1FBQ3ZDLFFBQVEsRUFBRSxPQUFPLENBQUMsR0FBRyxDQUFDLE9BQU8sSUFBSSxhQUFhO1FBQzlDLElBQUksRUFBRSxPQUFPLENBQUMsR0FBRyxDQUFDLE9BQU8sSUFBSSxXQUFXO1FBQ3hDLE9BQU8sRUFBRSxPQUFPLEVBQUUsb0JBQW9CO1FBQ3RDLGNBQWMsRUFBRTtZQUNkLE9BQU8sRUFBRSxTQUFTO1NBQ25CO1FBQ0QsT0FBTyxFQUFFLE9BQU8sQ0FBQyxHQUFHLENBQUMsUUFBUSxLQUFLLGFBQWE7S0FDaEQ7SUFDRCxVQUFVLEVBQUU7UUFDVixRQUFRLEVBQUUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxZQUFZLElBQUksb0JBQW9CO1FBQzFELFFBQVEsRUFBRSxPQUFPLENBQUMsR0FBRyxDQUFDLGdCQUFnQixJQUFJLEVBQUU7UUFDNUMsUUFBUSxFQUFFLE9BQU8sQ0FBQyxHQUFHLENBQUMsWUFBWSxJQUFJLG9CQUFvQjtRQUMxRCxJQUFJLEVBQUUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxZQUFZLElBQUksZ0JBQWdCO1FBQ2xELE9BQU8sRUFBRSxPQUFPLEVBQUUsb0JBQW9CO1FBQ3RDLGNBQWMsRUFBRTtZQUNkLE9BQU8sRUFBRSxTQUFTO1lBQ2xCLEdBQUcsRUFBRSxJQUFJO1NBQ1Y7UUFDRCxPQUFPLEVBQUUsS0FBSztLQUNmO0lBQ0QsSUFBSSxFQUFFO1FBQ0osUUFBUSxFQUFFLE9BQU8sQ0FBQyxHQUFHLENBQUMsWUFBWSxJQUFJLE1BQU07UUFDNUMsUUFBUSxFQUFFLE9BQU8sQ0FBQyxHQUFHLENBQUMsZ0JBQWdCLElBQUksRUFBRTtRQUM1QyxRQUFRLEVBQUUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxZQUFZLElBQUksa0JBQWtCO1FBQ3hELElBQUksRUFBRSxPQUFPLENBQUMsR0FBRyxDQUFDLE9BQU8sSUFBSSxXQUFXO1FBQ3hDLE9BQU8sRUFBRSxPQUFPLEVBQUUsb0JBQW9CO1FBQ3RDLE9BQU8sRUFBRSxLQUFLO0tBQ2Y7Q0FDRixDQUFDO0FBRUYsTUFBTSxXQUFXLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQyxRQUFRLElBQUksYUFBYSxDQUFDO0FBQzFELE1BQU0sYUFBYSxHQUFHLGVBQWUsQ0FBQyxXQUFXLENBQUMsQ0FBQztBQUVuRCxJQUFJLENBQUMsYUFBYSxFQUFFLENBQUM7SUFDbkIsTUFBTSxJQUFJLEtBQUssQ0FBQyxxQkFBcUIsV0FBVyxFQUFFLENBQUMsQ0FBQztBQUN0RCxDQUFDO0FBRUQsTUFBTSxTQUFTLEdBQUcsSUFBSSxxQkFBUyxDQUM3QixhQUFhLENBQUMsUUFBUSxFQUN0QixhQUFhLENBQUMsUUFBUSxFQUN0QixhQUFhLENBQUMsUUFBUSxFQUN0QjtJQUNFLEdBQUcsYUFBYTtJQUNoQixPQUFPLEVBQUUsYUFBYSxDQUFDLE9BQWtCLEVBQUUsc0JBQXNCO0NBQ2xFLENBQ0YsQ0FBQztBQWFPLDhCQUFTO0FBWGxCLE1BQU0sY0FBYyxHQUFHLEtBQUssSUFBc0IsRUFBRTtJQUNsRCxJQUFJLENBQUM7UUFDSCxNQUFNLFNBQVMsQ0FBQyxZQUFZLEVBQUUsQ0FBQztRQUMvQixPQUFPLENBQUMsR0FBRyxDQUFDLGdDQUFnQyxDQUFDLENBQUM7UUFDOUMsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDO0lBQUMsT0FBTyxLQUFLLEVBQUUsQ0FBQztRQUNmLE9BQU8sQ0FBQyxLQUFLLENBQUMsb0NBQW9DLEVBQUUsS0FBSyxZQUFZLEtBQUssQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDcEcsT0FBTyxLQUFLLENBQUM7SUFDZixDQUFDO0FBQ0gsQ0FBQyxDQUFDO0FBRWtCLHdDQUFjIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIkM6XFxzdXJyZWFsc3lzdGVtc1xcRml2dmVyLWRvdXBcXHNyY1xcY29uZmlnXFxkYXRhYmFzZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgZG90ZW52IGZyb20gJ2RvdGVudic7XHJcbmltcG9ydCB7IFNlcXVlbGl6ZSwgRGlhbGVjdCB9IGZyb20gJ3NlcXVlbGl6ZSc7XHJcblxyXG5kb3RlbnYuY29uZmlnKCk7XHJcblxyXG5pbnRlcmZhY2UgU2VxdWVsaXplQ29uZmlnIHtcclxuICB1c2VybmFtZTogc3RyaW5nO1xyXG4gIHBhc3N3b3JkOiBzdHJpbmc7XHJcbiAgZGF0YWJhc2U6IHN0cmluZztcclxuICBob3N0OiBzdHJpbmc7XHJcbiAgZGlhbGVjdDogRGlhbGVjdDsgLy8gQ29ycmVjdCB0eXBlIGhlcmVcclxuICBkaWFsZWN0T3B0aW9ucz86IHtcclxuICAgIGNoYXJzZXQ6IHN0cmluZztcclxuICAgIHNzbD86IGJvb2xlYW47XHJcbiAgfTtcclxuICBsb2dnaW5nPzogYm9vbGVhbjtcclxuICBwb3J0PzogbnVtYmVyO1xyXG59XHJcblxyXG5jb25zdCBzZXF1ZWxpemVDb25maWc6IHsgW2tleTogc3RyaW5nXTogU2VxdWVsaXplQ29uZmlnIH0gPSB7XHJcbiAgZGV2ZWxvcG1lbnQ6IHtcclxuICAgIHVzZXJuYW1lOiBwcm9jZXNzLmVudi5EQl9VU0VSIHx8ICdyb290JyxcclxuICAgIHBhc3N3b3JkOiBwcm9jZXNzLmVudi5EQl9QQVNTV09SRCB8fCAnJyxcclxuICAgIGRhdGFiYXNlOiBwcm9jZXNzLmVudi5EQl9OQU1FIHx8ICdmaXZ2ZXJfZG91cCcsXHJcbiAgICBob3N0OiBwcm9jZXNzLmVudi5EQl9IT1NUIHx8ICcxMjcuMC4wLjEnLFxyXG4gICAgZGlhbGVjdDogJ215c3FsJywgLy8gQ29ycmVjdCB0eXBlIGhlcmVcclxuICAgIGRpYWxlY3RPcHRpb25zOiB7XHJcbiAgICAgIGNoYXJzZXQ6ICd1dGY4bWI0JyxcclxuICAgIH0sXHJcbiAgICBsb2dnaW5nOiBwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ2RldmVsb3BtZW50JyxcclxuICB9LFxyXG4gIHByb2R1Y3Rpb246IHtcclxuICAgIHVzZXJuYW1lOiBwcm9jZXNzLmVudi5QUk9EX0RCX1VTRVIgfHwgJ3lvdXJfcHJvZF91c2VybmFtZScsXHJcbiAgICBwYXNzd29yZDogcHJvY2Vzcy5lbnYuUFJPRF9EQl9QQVNTV09SRCB8fCAnJyxcclxuICAgIGRhdGFiYXNlOiBwcm9jZXNzLmVudi5QUk9EX0RCX05BTUUgfHwgJ3lvdXJfcHJvZF9kYXRhYmFzZScsXHJcbiAgICBob3N0OiBwcm9jZXNzLmVudi5QUk9EX0RCX0hPU1QgfHwgJ3lvdXJfcHJvZF9ob3N0JyxcclxuICAgIGRpYWxlY3Q6ICdteXNxbCcsIC8vIENvcnJlY3QgdHlwZSBoZXJlXHJcbiAgICBkaWFsZWN0T3B0aW9uczoge1xyXG4gICAgICBjaGFyc2V0OiAndXRmOG1iNCcsXHJcbiAgICAgIHNzbDogdHJ1ZSxcclxuICAgIH0sXHJcbiAgICBsb2dnaW5nOiBmYWxzZSxcclxuICB9LFxyXG4gIHRlc3Q6IHtcclxuICAgIHVzZXJuYW1lOiBwcm9jZXNzLmVudi5URVNUX0RCX1VTRVIgfHwgJ3Jvb3QnLFxyXG4gICAgcGFzc3dvcmQ6IHByb2Nlc3MuZW52LlRFU1RfREJfUEFTU1dPUkQgfHwgJycsXHJcbiAgICBkYXRhYmFzZTogcHJvY2Vzcy5lbnYuVEVTVF9EQl9OQU1FIHx8ICdmaXZ2ZXJfZG91cF90ZXN0JyxcclxuICAgIGhvc3Q6IHByb2Nlc3MuZW52LkRCX0hPU1QgfHwgJzEyNy4wLjAuMScsXHJcbiAgICBkaWFsZWN0OiAnbXlzcWwnLCAvLyBDb3JyZWN0IHR5cGUgaGVyZVxyXG4gICAgbG9nZ2luZzogZmFsc2UsXHJcbiAgfSxcclxufTtcclxuXHJcbmNvbnN0IGVudmlyb25tZW50ID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgfHwgJ2RldmVsb3BtZW50JztcclxuY29uc3QgY3VycmVudENvbmZpZyA9IHNlcXVlbGl6ZUNvbmZpZ1tlbnZpcm9ubWVudF07XHJcblxyXG5pZiAoIWN1cnJlbnRDb25maWcpIHtcclxuICB0aHJvdyBuZXcgRXJyb3IoYEludmFsaWQgTk9ERV9FTlY6ICR7ZW52aXJvbm1lbnR9YCk7XHJcbn1cclxuXHJcbmNvbnN0IHNlcXVlbGl6ZSA9IG5ldyBTZXF1ZWxpemUoXHJcbiAgY3VycmVudENvbmZpZy5kYXRhYmFzZSxcclxuICBjdXJyZW50Q29uZmlnLnVzZXJuYW1lLFxyXG4gIGN1cnJlbnRDb25maWcucGFzc3dvcmQsXHJcbiAge1xyXG4gICAgLi4uY3VycmVudENvbmZpZyxcclxuICAgIGRpYWxlY3Q6IGN1cnJlbnRDb25maWcuZGlhbGVjdCBhcyBEaWFsZWN0LCAvLyBUeXBlIGFzc2VydGlvbiBoZXJlXHJcbiAgfVxyXG4pO1xyXG5cclxuY29uc3QgdGVzdENvbm5lY3Rpb24gPSBhc3luYyAoKTogUHJvbWlzZTxib29sZWFuPiA9PiB7XHJcbiAgdHJ5IHtcclxuICAgIGF3YWl0IHNlcXVlbGl6ZS5hdXRoZW50aWNhdGUoKTtcclxuICAgIGNvbnNvbGUubG9nKCdEYXRhYmFzZSBjb25uZWN0aW9uIHN1Y2Nlc3NmdWwnKTtcclxuICAgIHJldHVybiB0cnVlO1xyXG4gIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICBjb25zb2xlLmVycm9yKCdVbmFibGUgdG8gY29ubmVjdCB0byB0aGUgZGF0YWJhc2U6JywgZXJyb3IgaW5zdGFuY2VvZiBFcnJvciA/IGVycm9yLm1lc3NhZ2UgOiBlcnJvcik7XHJcbiAgICByZXR1cm4gZmFsc2U7XHJcbiAgfVxyXG59O1xyXG5cclxuZXhwb3J0IHsgc2VxdWVsaXplLCB0ZXN0Q29ubmVjdGlvbiB9OyJdLCJ2ZXJzaW9uIjozfQ==