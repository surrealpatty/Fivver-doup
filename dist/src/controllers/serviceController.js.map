{"version":3,"sources":["../../../src/controllers/serviceController.ts"],"sourcesContent":["// src/controllers/serviceController.ts\r\nimport { Request, Response } from 'express';\r\nimport Service from '@models/services';  // Ensure correct path to Service model\r\n\r\n// Function to update an existing service\r\nexport const updateService = async (req: Request, res: Response): Promise<void> => {\r\n  const { id } = req.params;  // Extract service ID from the URL params\r\n  const { name, description, price } = req.body;  // Extract data from the request body\r\n\r\n  try {\r\n    // Attempt to find the service by primary key (ID)\r\n    const service = await Service.findByPk(id);\r\n\r\n    // If the service is not found, respond with a 404 error\r\n    if (!service) {\r\n      res.status(404).json({ message: 'Service not found' });\r\n      return;\r\n    }\r\n\r\n    // Update the service fields if new values are provided\r\n    service.name = name ?? service.name;  // Use nullish coalescing to only update if value is not null or undefined\r\n    service.description = description ?? service.description;\r\n    service.price = price ?? service.price;\r\n\r\n    // Save the updated service object to the database\r\n    await service.save();\r\n\r\n    // Respond with success message and the updated service data\r\n    res.status(200).json({ message: 'Service updated successfully', service });\r\n  } catch (error: unknown) {  // Explicitly typing the error as 'unknown'\r\n    // Check if the error is an instance of Error\r\n    if (error instanceof Error) {\r\n      res.status(500).json({ message: 'Error updating service', error: error.message });\r\n    } else {\r\n      // Fallback for unknown error types\r\n      res.status(500).json({ message: 'Unknown error occurred' });\r\n    }\r\n  }\r\n};\r\n"],"names":["updateService","req","res","id","params","name","description","price","body","service","Service","findByPk","status","json","message","save","error","Error"],"mappings":"AAAA,uCAAuC;;;;;+BAK1BA;;;eAAAA;;;iEAHO;;;;;;AAGb,MAAMA,gBAAgB,OAAOC,KAAcC;IAChD,MAAM,EAAEC,EAAE,EAAE,GAAGF,IAAIG,MAAM,EAAG,yCAAyC;IACrE,MAAM,EAAEC,IAAI,EAAEC,WAAW,EAAEC,KAAK,EAAE,GAAGN,IAAIO,IAAI,EAAG,qCAAqC;IAErF,IAAI;QACF,kDAAkD;QAClD,MAAMC,UAAU,MAAMC,iBAAO,CAACC,QAAQ,CAACR;QAEvC,wDAAwD;QACxD,IAAI,CAACM,SAAS;YACZP,IAAIU,MAAM,CAAC,KAAKC,IAAI,CAAC;gBAAEC,SAAS;YAAoB;YACpD;QACF;QAEA,uDAAuD;QACvDL,QAAQJ,IAAI,GAAGA,QAAQI,QAAQJ,IAAI,EAAG,0EAA0E;QAChHI,QAAQH,WAAW,GAAGA,eAAeG,QAAQH,WAAW;QACxDG,QAAQF,KAAK,GAAGA,SAASE,QAAQF,KAAK;QAEtC,kDAAkD;QAClD,MAAME,QAAQM,IAAI;QAElB,4DAA4D;QAC5Db,IAAIU,MAAM,CAAC,KAAKC,IAAI,CAAC;YAAEC,SAAS;YAAgCL;QAAQ;IAC1E,EAAE,OAAOO,OAAgB;QACvB,6CAA6C;QAC7C,IAAIA,iBAAiBC,OAAO;YAC1Bf,IAAIU,MAAM,CAAC,KAAKC,IAAI,CAAC;gBAAEC,SAAS;gBAA0BE,OAAOA,MAAMF,OAAO;YAAC;QACjF,OAAO;YACL,mCAAmC;YACnCZ,IAAIU,MAAM,CAAC,KAAKC,IAAI,CAAC;gBAAEC,SAAS;YAAyB;QAC3D;IACF;AACF"}