{"version":3,"sources":["../../../src/controllers/serviceController.ts"],"sourcesContent":["import { Request, Response } from 'express';\r\nimport Service from '../models/services'; // Named import of the Service model\r\nimport { User } from '../models/user'; // Named import of the User model\r\n\r\n// Controller function to handle POST /services\r\nexport const createService = async (req: Request, res: Response): Promise<Response> => {\r\n    try {\r\n        const { title, description, price } = req.body;\r\n        \r\n        // Validate request body\r\n        if (!title || !description || price === undefined) {\r\n            return res.status(400).json({ message: 'All fields (title, description, price) are required.' });\r\n        }\r\n\r\n        // Retrieve the user ID from the authenticated token (assumed to be in req.user)\r\n        const userId = parseInt(req.user?.id || '', 10);\r\n        if (isNaN(userId)) {\r\n            return res.status(400).json({ message: 'Invalid user ID.' });\r\n        }\r\n\r\n        // Create the new service using Sequelize ORM\r\n        const newService = await Service.create({\r\n            title,\r\n            description,\r\n            price,\r\n            userId\r\n        });\r\n\r\n        // Respond with the created service\r\n        return res.status(201).json({\r\n            message: 'Service created successfully.',\r\n            service: newService\r\n        });\r\n    } catch (error) {\r\n        console.error(error);\r\n        return res.status(500).json({ message: 'Error creating service', error });\r\n    }\r\n};\r\n"],"names":["createService","req","res","title","description","price","body","undefined","status","json","message","userId","parseInt","user","id","isNaN","newService","Service","create","service","error","console"],"mappings":";;;;+BAKaA;;;eAAAA;;;iEAJO;;;;;;AAIb,MAAMA,gBAAgB,OAAOC,KAAcC;IAC9C,IAAI;QACA,MAAM,EAAEC,KAAK,EAAEC,WAAW,EAAEC,KAAK,EAAE,GAAGJ,IAAIK,IAAI;QAE9C,wBAAwB;QACxB,IAAI,CAACH,SAAS,CAACC,eAAeC,UAAUE,WAAW;YAC/C,OAAOL,IAAIM,MAAM,CAAC,KAAKC,IAAI,CAAC;gBAAEC,SAAS;YAAuD;QAClG;QAEA,gFAAgF;QAChF,MAAMC,SAASC,SAASX,IAAIY,IAAI,EAAEC,MAAM,IAAI;QAC5C,IAAIC,MAAMJ,SAAS;YACf,OAAOT,IAAIM,MAAM,CAAC,KAAKC,IAAI,CAAC;gBAAEC,SAAS;YAAmB;QAC9D;QAEA,6CAA6C;QAC7C,MAAMM,aAAa,MAAMC,iBAAO,CAACC,MAAM,CAAC;YACpCf;YACAC;YACAC;YACAM;QACJ;QAEA,mCAAmC;QACnC,OAAOT,IAAIM,MAAM,CAAC,KAAKC,IAAI,CAAC;YACxBC,SAAS;YACTS,SAASH;QACb;IACJ,EAAE,OAAOI,OAAO;QACZC,QAAQD,KAAK,CAACA;QACd,OAAOlB,IAAIM,MAAM,CAAC,KAAKC,IAAI,CAAC;YAAEC,SAAS;YAA0BU;QAAM;IAC3E;AACJ"}