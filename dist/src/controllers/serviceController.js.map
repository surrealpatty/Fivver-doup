{"version":3,"sources":["../../../src/controllers/serviceController.ts"],"sourcesContent":["import { Request, Response } from 'express';\r\nimport Service, { ServiceAttributes } from '@models/services'; // Import Service and ServiceAttributes\r\n\r\nexport const updateService = async (req: Request, res: Response): Promise<void> => {\r\n  try {\r\n    const { serviceId } = req.params;\r\n    const userId = req.user?.id; // Ensure user is set after authentication middleware\r\n\r\n    // Find the service by primary key\r\n    const service = await Service.findByPk(serviceId);\r\n\r\n    if (!service) {\r\n      res.status(404).json({ message: 'Service not found' });\r\n      return;\r\n    }\r\n\r\n    // Ensure the logged-in user owns the service\r\n    // Convert userId to string for comparison\r\n    if (service.userId !== String(userId)) {\r\n      res.status(403).json({ message: 'You can only update your own services' });\r\n      return;\r\n    }\r\n\r\n    // Prepare updated data (handle image upload if available)\r\n    const updatedData: Partial<ServiceAttributes> = {  // Use ServiceAttributes for type\r\n      name: req.body.name,\r\n      description: req.body.description,\r\n      price: req.body.price,\r\n    };\r\n\r\n    // Add image path if a new image was uploaded\r\n    if (req.file) {\r\n      updatedData.image = req.file.path; // Add image path to the update\r\n    }\r\n\r\n    // Update the service with new data\r\n    const updatedService = await service.update(updatedData);\r\n\r\n    // Respond with the updated service\r\n    res.status(200).json({\r\n      message: 'Service updated successfully',\r\n      service: updatedService,\r\n    });\r\n  } catch (err) {\r\n    console.error(err);\r\n    res.status(500).json({ message: 'Error updating service' });\r\n  }\r\n};\r\n"],"names":["updateService","req","res","serviceId","params","userId","user","id","service","Service","findByPk","status","json","message","String","updatedData","name","body","description","price","file","image","path","updatedService","update","err","console","error"],"mappings":";;;;+BAGaA;;;eAAAA;;;iEAF8B;;;;;;AAEpC,MAAMA,gBAAgB,OAAOC,KAAcC;IAChD,IAAI;QACF,MAAM,EAAEC,SAAS,EAAE,GAAGF,IAAIG,MAAM;QAChC,MAAMC,SAASJ,IAAIK,IAAI,EAAEC,IAAI,qDAAqD;QAElF,kCAAkC;QAClC,MAAMC,UAAU,MAAMC,iBAAO,CAACC,QAAQ,CAACP;QAEvC,IAAI,CAACK,SAAS;YACZN,IAAIS,MAAM,CAAC,KAAKC,IAAI,CAAC;gBAAEC,SAAS;YAAoB;YACpD;QACF;QAEA,6CAA6C;QAC7C,0CAA0C;QAC1C,IAAIL,QAAQH,MAAM,KAAKS,OAAOT,SAAS;YACrCH,IAAIS,MAAM,CAAC,KAAKC,IAAI,CAAC;gBAAEC,SAAS;YAAwC;YACxE;QACF;QAEA,0DAA0D;QAC1D,MAAME,cAA0C;YAC9CC,MAAMf,IAAIgB,IAAI,CAACD,IAAI;YACnBE,aAAajB,IAAIgB,IAAI,CAACC,WAAW;YACjCC,OAAOlB,IAAIgB,IAAI,CAACE,KAAK;QACvB;QAEA,6CAA6C;QAC7C,IAAIlB,IAAImB,IAAI,EAAE;YACZL,YAAYM,KAAK,GAAGpB,IAAImB,IAAI,CAACE,IAAI,EAAE,+BAA+B;QACpE;QAEA,mCAAmC;QACnC,MAAMC,iBAAiB,MAAMf,QAAQgB,MAAM,CAACT;QAE5C,mCAAmC;QACnCb,IAAIS,MAAM,CAAC,KAAKC,IAAI,CAAC;YACnBC,SAAS;YACTL,SAASe;QACX;IACF,EAAE,OAAOE,KAAK;QACZC,QAAQC,KAAK,CAACF;QACdvB,IAAIS,MAAM,CAAC,KAAKC,IAAI,CAAC;YAAEC,SAAS;QAAyB;IAC3D;AACF"}