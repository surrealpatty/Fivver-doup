{"version":3,"sources":["../../../src/controllers/orderController.ts"],"sourcesContent":["import { Order } from '../models/order';  // Correct path for the Order model\r\nimport { Request, Response } from 'express';\r\nimport { sequelize } from '../config/database';  // Correct path for the sequelize instance\r\n\r\n// Interface to type the structure of the request body\r\ninterface CreateOrderRequest {\r\n  userId: number;\r\n  serviceId: number;\r\n  orderDetails: string;\r\n  status: string;\r\n}\r\n\r\n// Create order controller\r\nexport const createOrder = async (req: Request<{}, {}, CreateOrderRequest>, res: Response): Promise<Response> => {\r\n  try {\r\n    const { userId, serviceId, orderDetails, status } = req.body;\r\n\r\n    // Use type assertion to match the expected input for Order.create\r\n    const order = await Order.create({\r\n      userId, \r\n      serviceId, \r\n      orderDetails, \r\n      status,\r\n    } as any); // Type assertion as `any`\r\n\r\n    return res.status(201).json(order);\r\n  } catch (error) {\r\n    return res.status(500).json({ message: 'Error creating order', error });\r\n  }\r\n};\r\n\r\n// Get all orders controller\r\nexport const getAllOrders = async (req: Request, res: Response): Promise<Response> => {\r\n  try {\r\n    const orders = await Order.findAll();\r\n    return res.status(200).json(orders);\r\n  } catch (error) {\r\n    return res.status(500).json({ message: 'Error fetching orders', error });\r\n  }\r\n};\r\n\r\n// Get order by ID controller\r\nexport const getOrderById = async (req: Request, res: Response): Promise<Response> => {\r\n  try {\r\n    const order = await Order.findByPk(req.params.id);\r\n    if (!order) {\r\n      return res.status(404).json({ message: 'Order not found' });\r\n    }\r\n    return res.status(200).json(order);\r\n  } catch (error) {\r\n    return res.status(500).json({ message: 'Error fetching order', error });\r\n  }\r\n};\r\n\r\n// Update order controller\r\nexport const updateOrder = async (req: Request, res: Response): Promise<Response> => {\r\n  try {\r\n    const order = await Order.findByPk(req.params.id);\r\n    if (!order) {\r\n      return res.status(404).json({ message: 'Order not found' });\r\n    }\r\n\r\n    const { status } = req.body;\r\n    order.status = status;\r\n    await order.save();\r\n\r\n    return res.status(200).json(order);\r\n  } catch (error) {\r\n    return res.status(500).json({ message: 'Error updating order', error });\r\n  }\r\n};\r\n\r\n// Delete order controller\r\nexport const deleteOrder = async (req: Request, res: Response): Promise<Response> => {\r\n  try {\r\n    const order = await Order.findByPk(req.params.id);\r\n    if (!order) {\r\n      return res.status(404).json({ message: 'Order not found' });\r\n    }\r\n\r\n    await order.destroy();\r\n    return res.status(204).json({ message: 'Order deleted successfully' });\r\n  } catch (error) {\r\n    return res.status(500).json({ message: 'Error deleting order', error });\r\n  }\r\n};\r\n\r\n// Function to test the database connection\r\nexport const testConnection = async (): Promise<boolean> => {\r\n  try {\r\n    await sequelize.authenticate();  // Test the connection\r\n    console.log('Database connection successful');\r\n    return true;  // Return true if connection is successful\r\n  } catch (error: unknown) {\r\n    // Type assertion to ensure 'error' is of type 'Error'\r\n    if (error instanceof Error) {\r\n      console.error('Unable to connect to the database:', error.message);\r\n    } else {\r\n      console.error('Unable to connect to the database: Unknown error');\r\n    }\r\n    return false;  // Return false if there is an error\r\n  }\r\n};\r\n"],"names":["createOrder","deleteOrder","getAllOrders","getOrderById","testConnection","updateOrder","req","res","userId","serviceId","orderDetails","status","body","order","Order","create","json","error","message","orders","findAll","findByPk","params","id","save","destroy","sequelize","authenticate","console","log","Error"],"mappings":"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"}