{"version":3,"sources":["../../../src/controllers/reviewController.ts"],"sourcesContent":["// src/controllers/reviewController.ts\r\nimport { Request, Response } from 'express';\r\n\r\nexport const createReview = async (\r\n  req: Request,\r\n  res: Response\r\n): Promise<void> => {\r\n  const { reviewText, rating, serviceId } = req.body; // Access the review data and serviceId from req.body\r\n\r\n  if (!reviewText || !rating || !serviceId) {\r\n    res\r\n      .status(400)\r\n      .json({ message: 'Review text, rating, and serviceId are required' });\r\n    return;\r\n  }\r\n\r\n  // Logic for creating a review, e.g., saving to the database\r\n  // Example: Save review to the database using serviceId\r\n  // await Review.create({ reviewText, rating, serviceId });\r\n\r\n  res.status(201).json({ message: 'Review created successfully' });\r\n};\r\n\r\nexport const getReviewsForService = async (\r\n  req: Request,\r\n  res: Response\r\n): Promise<void> => {\r\n  const { serviceId } = req.params; // Accessing serviceId from route parameters\r\n\r\n  if (!serviceId) {\r\n    res.status(400).json({ message: 'Service ID is required' });\r\n    return;\r\n  }\r\n\r\n  // Logic for getting reviews for the service\r\n  // Example: Fetch reviews for the specific service\r\n  // const reviews = await Review.findAll({ where: { serviceId } });\r\n\r\n  res.status(200).json({ reviews: [] }); // Replace with actual reviews\r\n};\r\n\r\nexport const updateReview = async (\r\n  req: Request,\r\n  res: Response\r\n): Promise<void> => {\r\n  const { reviewId } = req.params; // Access reviewId from route parameters\r\n  const { reviewText, rating } = req.body; // Access review details from request body\r\n\r\n  if (!reviewId || !reviewText || !rating) {\r\n    res\r\n      .status(400)\r\n      .json({ message: 'Review ID, review text, and rating are required' });\r\n    return;\r\n  }\r\n\r\n  // Logic for updating the review\r\n  // Example: Find the review by reviewId and update it\r\n  // const review = await Review.findByPk(reviewId);\r\n  // if (review) {\r\n  //   review.reviewText = reviewText;\r\n  //   review.rating = rating;\r\n  //   await review.save();\r\n  // }\r\n\r\n  res.status(200).json({ message: 'Review updated successfully' });\r\n};\r\n\r\nexport const deleteReview = async (\r\n  req: Request,\r\n  res: Response\r\n): Promise<void> => {\r\n  const { reviewId } = req.params; // Access reviewId from route parameters\r\n\r\n  if (!reviewId) {\r\n    res.status(400).json({ message: 'Review ID is required' });\r\n    return;\r\n  }\r\n\r\n  // Logic for deleting the review\r\n  // Example: Find the review by reviewId and delete it\r\n  // const review = await Review.findByPk(reviewId);\r\n  // if (review) {\r\n  //   await review.destroy();\r\n  // }\r\n\r\n  res.status(200).json({ message: 'Review deleted successfully' });\r\n};\r\n"],"names":["createReview","deleteReview","getReviewsForService","updateReview","req","res","reviewText","rating","serviceId","body","status","json","message","params","reviews","reviewId"],"mappings":"AAAA,sCAAsC;;;;;;;;;;;;IAGzBA,YAAY;eAAZA;;IAgEAC,YAAY;eAAZA;;IA5CAC,oBAAoB;eAApBA;;IAkBAC,YAAY;eAAZA;;;AAtCN,MAAMH,eAAe,OAC1BI,KACAC;IAEA,MAAM,EAAEC,UAAU,EAAEC,MAAM,EAAEC,SAAS,EAAE,GAAGJ,IAAIK,IAAI,EAAE,qDAAqD;IAEzG,IAAI,CAACH,cAAc,CAACC,UAAU,CAACC,WAAW;QACxCH,IACGK,MAAM,CAAC,KACPC,IAAI,CAAC;YAAEC,SAAS;QAAkD;QACrE;IACF;IAEA,4DAA4D;IAC5D,uDAAuD;IACvD,0DAA0D;IAE1DP,IAAIK,MAAM,CAAC,KAAKC,IAAI,CAAC;QAAEC,SAAS;IAA8B;AAChE;AAEO,MAAMV,uBAAuB,OAClCE,KACAC;IAEA,MAAM,EAAEG,SAAS,EAAE,GAAGJ,IAAIS,MAAM,EAAE,4CAA4C;IAE9E,IAAI,CAACL,WAAW;QACdH,IAAIK,MAAM,CAAC,KAAKC,IAAI,CAAC;YAAEC,SAAS;QAAyB;QACzD;IACF;IAEA,4CAA4C;IAC5C,kDAAkD;IAClD,kEAAkE;IAElEP,IAAIK,MAAM,CAAC,KAAKC,IAAI,CAAC;QAAEG,SAAS,EAAE;IAAC,IAAI,8BAA8B;AACvE;AAEO,MAAMX,eAAe,OAC1BC,KACAC;IAEA,MAAM,EAAEU,QAAQ,EAAE,GAAGX,IAAIS,MAAM,EAAE,wCAAwC;IACzE,MAAM,EAAEP,UAAU,EAAEC,MAAM,EAAE,GAAGH,IAAIK,IAAI,EAAE,0CAA0C;IAEnF,IAAI,CAACM,YAAY,CAACT,cAAc,CAACC,QAAQ;QACvCF,IACGK,MAAM,CAAC,KACPC,IAAI,CAAC;YAAEC,SAAS;QAAkD;QACrE;IACF;IAEA,gCAAgC;IAChC,qDAAqD;IACrD,kDAAkD;IAClD,gBAAgB;IAChB,oCAAoC;IACpC,4BAA4B;IAC5B,yBAAyB;IACzB,IAAI;IAEJP,IAAIK,MAAM,CAAC,KAAKC,IAAI,CAAC;QAAEC,SAAS;IAA8B;AAChE;AAEO,MAAMX,eAAe,OAC1BG,KACAC;IAEA,MAAM,EAAEU,QAAQ,EAAE,GAAGX,IAAIS,MAAM,EAAE,wCAAwC;IAEzE,IAAI,CAACE,UAAU;QACbV,IAAIK,MAAM,CAAC,KAAKC,IAAI,CAAC;YAAEC,SAAS;QAAwB;QACxD;IACF;IAEA,gCAAgC;IAChC,qDAAqD;IACrD,kDAAkD;IAClD,gBAAgB;IAChB,4BAA4B;IAC5B,IAAI;IAEJP,IAAIK,MAAM,CAAC,KAAKC,IAAI,CAAC;QAAEC,SAAS;IAA8B;AAChE"}