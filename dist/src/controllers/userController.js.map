{"version":3,"sources":["../../../src/controllers/userController.ts"],"sourcesContent":["import { Request, Response } from 'express';\r\nimport bcrypt from 'bcryptjs';  // Import bcrypt for password hashing\r\nimport jwt from 'jsonwebtoken';  // Import jwt for generating tokens\r\nimport { User } from '../models/user'; // Ensure correct import path for your User model\r\nimport nodemailer from 'nodemailer'; // Import nodemailer for sending emails\r\nimport dotenv from 'dotenv'; // Import dotenv to load environment variables\r\n\r\n// Load environment variables\r\ndotenv.config();\r\n\r\n// Set up the transporter with Gmail or another mail service\r\nconst transporter = nodemailer.createTransport({\r\n  service: 'gmail',\r\n  auth: {\r\n    user: process.env.GMAIL_USER,  // Ensure GMAIL_USER is set in your environment variables\r\n    pass: process.env.GMAIL_PASS,  // Ensure GMAIL_PASS is set in your environment variables\r\n  },\r\n});\r\n\r\n// Controller function to handle user registration\r\nexport const registerUser = async (req: Request, res: Response): Promise<Response> => {\r\n  const { email, password, username } = req.body;\r\n\r\n  try {\r\n    // Validate required fields\r\n    if (!email || !password || !username) {\r\n      return res.status(400).json({ message: 'All fields are required' });\r\n    }\r\n\r\n    // Check if email already exists\r\n    const existingUser = await User.findOne({ where: { email } });\r\n    if (existingUser) {\r\n      return res.status(400).json({ message: 'Email already in use' });\r\n    }\r\n\r\n    // Hash the password using bcrypt\r\n    const hashedPassword = await bcrypt.hash(password, 10); // 10 is the salt rounds\r\n\r\n    // Create a new user with hashed password and isVerified set to false\r\n    const newUser = await User.create({\r\n      username,\r\n      email,\r\n      password: hashedPassword,\r\n      isVerified: false, // Set to false until the user verifies their email\r\n    });\r\n\r\n    // Generate a verification token using JWT\r\n    const verificationToken = jwt.sign(\r\n      { id: newUser.id },\r\n      process.env.JWT_SECRET as string,  // Ensure JWT_SECRET is set in your environment variables\r\n      { expiresIn: '1d' }  // Token expires in 1 day\r\n    );\r\n\r\n    // Create the verification link\r\n    const verificationLink = `${process.env.BASE_URL}/verify?token=${verificationToken}`;\r\n\r\n    // Prepare email options\r\n    const mailOptions = {\r\n      from: process.env.GMAIL_USER,  // Use the email from your environment variables\r\n      to: email,\r\n      subject: 'Please verify your email address',\r\n      html: `<p>Click <a href=\"${verificationLink}\">here</a> to verify your email address.</p>`,\r\n    };\r\n\r\n    // Send the verification email asynchronously\r\n    await transporter.sendMail(mailOptions);\r\n\r\n    // Return response indicating success\r\n    return res.status(201).json({ message: 'Registration successful, please check your email for verification.' });\r\n  } catch (error) {\r\n    console.error(error);\r\n    return res.status(500).json({ message: 'Server error during registration.' });\r\n  }\r\n};\r\n\r\n// Controller function to handle user login\r\nexport const login = async (req: Request, res: Response): Promise<Response> => {\r\n  try {\r\n    const { email, password } = req.body;\r\n\r\n    // Validate required fields\r\n    if (!email || !password) {\r\n      return res.status(400).json({ message: 'Email and password are required' });\r\n    }\r\n\r\n    // Find user by email\r\n    const user = await User.findOne({ where: { email } });  // Ensure this method is available\r\n    if (!user) {\r\n      return res.status(404).json({ message: 'User not found' });\r\n    }\r\n\r\n    // Check if password is valid (Ensure validatePassword method is defined on the User model)\r\n    const isPasswordValid = await bcrypt.compare(password, user.password);  // Use bcrypt.compare for password validation\r\n    if (!isPasswordValid) {\r\n      return res.status(401).json({ message: 'Invalid credentials' });\r\n    }\r\n\r\n    // Return login success response\r\n    return res.status(200).json({ message: 'Login successful', userId: user.id });\r\n  } catch (error) {\r\n    console.error(error);\r\n    return res.status(500).json({ message: 'Internal server error' });\r\n  }\r\n};\r\n"],"names":["login","registerUser","dotenv","config","transporter","nodemailer","createTransport","service","auth","user","process","env","GMAIL_USER","pass","GMAIL_PASS","req","res","email","password","username","body","status","json","message","existingUser","User","findOne","where","hashedPassword","bcrypt","hash","newUser","create","isVerified","verificationToken","jwt","sign","id","JWT_SECRET","expiresIn","verificationLink","BASE_URL","mailOptions","from","to","subject","html","sendMail","error","console","isPasswordValid","compare","userId"],"mappings":"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"}