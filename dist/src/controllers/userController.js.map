{"version":3,"sources":["../../../src/controllers/userController.ts"],"sourcesContent":["import { Request, Response } from 'express';\r\nimport bcrypt from 'bcryptjs';\r\nimport jwt from 'jsonwebtoken';\r\nimport { User } from '../models/user';\r\nimport nodemailer from 'nodemailer';\r\nimport dotenv from 'dotenv';\r\n\r\ndotenv.config();\r\n\r\n// Nodemailer setup for email verification\r\nconst transporter = nodemailer.createTransport({\r\n  service: 'gmail',\r\n  auth: {\r\n    user: process.env.GMAIL_USER,\r\n    pass: process.env.GMAIL_PASS,\r\n  },\r\n});\r\n\r\nexport const registerUser = async (req: Request, res: Response): Promise<Response> => {\r\n  const { email, password, username } = req.body;\r\n\r\n  try {\r\n    if (!email || !password || !username) {\r\n      return res.status(400).json({ message: 'All fields are required' });\r\n    }\r\n\r\n    // Check if the user already exists\r\n    const existingUser = await User.findOne({ where: { email } });\r\n    if (existingUser) {\r\n      return res.status(400).json({ message: 'Email already in use' });\r\n    }\r\n\r\n    // Hash the password\r\n    const hashedPassword = await bcrypt.hash(password, 10);\r\n\r\n    // Create the new user object with default values\r\n    const newUser = await User.create({\r\n      username,\r\n      email,\r\n      password: hashedPassword,\r\n      role: 'free',  // Default role\r\n      tier: 'free',  // Default tier\r\n      isVerified: false,  // Default to not verified\r\n    });\r\n\r\n    // Generate a JWT verification token\r\n    const verificationToken = jwt.sign(\r\n      { id: newUser.id },\r\n      process.env.JWT_SECRET as string,\r\n      { expiresIn: '1d' } // Token expires in 1 day\r\n    );\r\n\r\n    // Create the verification URL\r\n    const verificationLink = `${process.env.BASE_URL}/verify?token=${verificationToken}`;\r\n\r\n    // Email options for sending verification email\r\n    const mailOptions = {\r\n      from: process.env.GMAIL_USER,\r\n      to: email,\r\n      subject: 'Please verify your email address',\r\n      html: `<p>Click <a href=\"${verificationLink}\">here</a> to verify your email address.</p>`,\r\n    };\r\n\r\n    // Send the email\r\n    await transporter.sendMail(mailOptions);\r\n\r\n    return res.status(201).json({ message: 'Registration successful, please check your email for verification.' });\r\n  } catch (error) {\r\n    console.error('Error during registration:', error);\r\n    return res.status(500).json({ message: 'Server error during registration.' });\r\n  }\r\n};\r\n"],"names":["registerUser","dotenv","config","transporter","nodemailer","createTransport","service","auth","user","process","env","GMAIL_USER","pass","GMAIL_PASS","req","res","email","password","username","body","status","json","message","existingUser","User","findOne","where","hashedPassword","bcrypt","hash","newUser","create","role","tier","isVerified","verificationToken","jwt","sign","id","JWT_SECRET","expiresIn","verificationLink","BASE_URL","mailOptions","from","to","subject","html","sendMail","error","console"],"mappings":";;;;+BAkBaA;;;eAAAA;;;iEAjBM;qEACH;sBACK;mEACE;+DACJ;;;;;;AAEnBC,eAAM,CAACC,MAAM;AAEb,0CAA0C;AAC1C,MAAMC,cAAcC,mBAAU,CAACC,eAAe,CAAC;IAC7CC,SAAS;IACTC,MAAM;QACJC,MAAMC,QAAQC,GAAG,CAACC,UAAU;QAC5BC,MAAMH,QAAQC,GAAG,CAACG,UAAU;IAC9B;AACF;AAEO,MAAMb,eAAe,OAAOc,KAAcC;IAC/C,MAAM,EAAEC,KAAK,EAAEC,QAAQ,EAAEC,QAAQ,EAAE,GAAGJ,IAAIK,IAAI;IAE9C,IAAI;QACF,IAAI,CAACH,SAAS,CAACC,YAAY,CAACC,UAAU;YACpC,OAAOH,IAAIK,MAAM,CAAC,KAAKC,IAAI,CAAC;gBAAEC,SAAS;YAA0B;QACnE;QAEA,mCAAmC;QACnC,MAAMC,eAAe,MAAMC,UAAI,CAACC,OAAO,CAAC;YAAEC,OAAO;gBAAEV;YAAM;QAAE;QAC3D,IAAIO,cAAc;YAChB,OAAOR,IAAIK,MAAM,CAAC,KAAKC,IAAI,CAAC;gBAAEC,SAAS;YAAuB;QAChE;QAEA,oBAAoB;QACpB,MAAMK,iBAAiB,MAAMC,iBAAM,CAACC,IAAI,CAACZ,UAAU;QAEnD,iDAAiD;QACjD,MAAMa,UAAU,MAAMN,UAAI,CAACO,MAAM,CAAC;YAChCb;YACAF;YACAC,UAAUU;YACVK,MAAM;YACNC,MAAM;YACNC,YAAY;QACd;QAEA,oCAAoC;QACpC,MAAMC,oBAAoBC,qBAAG,CAACC,IAAI,CAChC;YAAEC,IAAIR,QAAQQ,EAAE;QAAC,GACjB7B,QAAQC,GAAG,CAAC6B,UAAU,EACtB;YAAEC,WAAW;QAAK,EAAE,yBAAyB;;QAG/C,8BAA8B;QAC9B,MAAMC,mBAAmB,GAAGhC,QAAQC,GAAG,CAACgC,QAAQ,CAAC,cAAc,EAAEP,mBAAmB;QAEpF,+CAA+C;QAC/C,MAAMQ,cAAc;YAClBC,MAAMnC,QAAQC,GAAG,CAACC,UAAU;YAC5BkC,IAAI7B;YACJ8B,SAAS;YACTC,MAAM,CAAC,kBAAkB,EAAEN,iBAAiB,4CAA4C,CAAC;QAC3F;QAEA,iBAAiB;QACjB,MAAMtC,YAAY6C,QAAQ,CAACL;QAE3B,OAAO5B,IAAIK,MAAM,CAAC,KAAKC,IAAI,CAAC;YAAEC,SAAS;QAAqE;IAC9G,EAAE,OAAO2B,OAAO;QACdC,QAAQD,KAAK,CAAC,8BAA8BA;QAC5C,OAAOlC,IAAIK,MAAM,CAAC,KAAKC,IAAI,CAAC;YAAEC,SAAS;QAAoC;IAC7E;AACF"}