{"version":3,"sources":["../../../src/controllers/authController.ts"],"sourcesContent":["// src/controllers/authController.ts\r\nimport { Request, Response } from 'express';\r\nimport bcrypt from 'bcryptjs';\r\nimport jwt from 'jsonwebtoken';\r\nimport { User } from '../models/user';\r\n\r\nexport const registerUser = async (req: Request, res: Response): Promise<Response> => {\r\n  const { email, username, password } = req.body;\r\n\r\n  try {\r\n    if (!email || !username || !password) {\r\n      return res.status(400).json({ message: 'Please provide all fields' });\r\n    }\r\n\r\n    // Check if user already exists\r\n    const existingUser = await User.findOne({ where: { email } });\r\n    if (existingUser) {\r\n      return res.status(400).json({ message: 'User already exists' });\r\n    }\r\n\r\n    // Hash the password before saving it\r\n    const hashedPassword = await bcrypt.hash(password, 10);\r\n\r\n    // Create a new user with default 'isVerified' set to false\r\n    const user = await User.create({\r\n      email,\r\n      username,\r\n      password: hashedPassword,\r\n      role: 'free', // Default role\r\n      tier: 'free', // Default tier\r\n      isVerified: false, // Default value for isVerified\r\n    });\r\n\r\n    return res.status(201).json({\r\n      message: 'User created successfully',\r\n      user: { id: user.id, email: user.email, username: user.username },\r\n    });\r\n  } catch (error) {\r\n    console.error('Error during user registration:', error);\r\n    return res.status(500).json({ message: 'Server error during user registration' });\r\n  }\r\n};\r\n\r\nexport const loginUser = async (req: Request, res: Response): Promise<Response> => {\r\n  const { email, password } = req.body;\r\n\r\n  try {\r\n    if (!email || !password) {\r\n      return res.status(400).json({ message: 'Please provide email and password' });\r\n    }\r\n\r\n    // Check if user exists\r\n    const user = await User.findOne({ where: { email } });\r\n    if (!user) {\r\n      return res.status(400).json({ message: 'Invalid email or password' });\r\n    }\r\n\r\n    // Compare the password with the hashed password\r\n    const isMatch = await bcrypt.compare(password, user.password);\r\n    if (!isMatch) {\r\n      return res.status(400).json({ message: 'Invalid email or password' });\r\n    }\r\n\r\n    // Generate JWT token\r\n    const token = jwt.sign(\r\n      { id: user.id, email: user.email, username: user.username },\r\n      process.env.JWT_SECRET || 'your-default-secret', // Default secret if not set\r\n      { expiresIn: '1h' }\r\n    );\r\n\r\n    return res.status(200).json({\r\n      message: 'Login successful',\r\n      token,\r\n    });\r\n  } catch (error) {\r\n    console.error('Error during login:', error);\r\n    return res.status(500).json({ message: 'Server error during login' });\r\n  }\r\n};\r\n"],"names":["loginUser","registerUser","req","res","email","username","password","body","status","json","message","existingUser","User","findOne","where","hashedPassword","bcrypt","hash","user","create","role","tier","isVerified","id","error","console","isMatch","compare","token","jwt","sign","process","env","JWT_SECRET","expiresIn"],"mappings":"AAAA,oCAAoC;;;;;;;;;;;;IA2CvBA,SAAS;eAATA;;IArCAC,YAAY;eAAZA;;;iEAJM;qEACH;sBACK;;;;;;AAEd,MAAMA,eAAe,OAAOC,KAAcC;IAC/C,MAAM,EAAEC,KAAK,EAAEC,QAAQ,EAAEC,QAAQ,EAAE,GAAGJ,IAAIK,IAAI;IAE9C,IAAI;QACF,IAAI,CAACH,SAAS,CAACC,YAAY,CAACC,UAAU;YACpC,OAAOH,IAAIK,MAAM,CAAC,KAAKC,IAAI,CAAC;gBAAEC,SAAS;YAA4B;QACrE;QAEA,+BAA+B;QAC/B,MAAMC,eAAe,MAAMC,UAAI,CAACC,OAAO,CAAC;YAAEC,OAAO;gBAAEV;YAAM;QAAE;QAC3D,IAAIO,cAAc;YAChB,OAAOR,IAAIK,MAAM,CAAC,KAAKC,IAAI,CAAC;gBAAEC,SAAS;YAAsB;QAC/D;QAEA,qCAAqC;QACrC,MAAMK,iBAAiB,MAAMC,iBAAM,CAACC,IAAI,CAACX,UAAU;QAEnD,2DAA2D;QAC3D,MAAMY,OAAO,MAAMN,UAAI,CAACO,MAAM,CAAC;YAC7Bf;YACAC;YACAC,UAAUS;YACVK,MAAM;YACNC,MAAM;YACNC,YAAY;QACd;QAEA,OAAOnB,IAAIK,MAAM,CAAC,KAAKC,IAAI,CAAC;YAC1BC,SAAS;YACTQ,MAAM;gBAAEK,IAAIL,KAAKK,EAAE;gBAAEnB,OAAOc,KAAKd,KAAK;gBAAEC,UAAUa,KAAKb,QAAQ;YAAC;QAClE;IACF,EAAE,OAAOmB,OAAO;QACdC,QAAQD,KAAK,CAAC,mCAAmCA;QACjD,OAAOrB,IAAIK,MAAM,CAAC,KAAKC,IAAI,CAAC;YAAEC,SAAS;QAAwC;IACjF;AACF;AAEO,MAAMV,YAAY,OAAOE,KAAcC;IAC5C,MAAM,EAAEC,KAAK,EAAEE,QAAQ,EAAE,GAAGJ,IAAIK,IAAI;IAEpC,IAAI;QACF,IAAI,CAACH,SAAS,CAACE,UAAU;YACvB,OAAOH,IAAIK,MAAM,CAAC,KAAKC,IAAI,CAAC;gBAAEC,SAAS;YAAoC;QAC7E;QAEA,uBAAuB;QACvB,MAAMQ,OAAO,MAAMN,UAAI,CAACC,OAAO,CAAC;YAAEC,OAAO;gBAAEV;YAAM;QAAE;QACnD,IAAI,CAACc,MAAM;YACT,OAAOf,IAAIK,MAAM,CAAC,KAAKC,IAAI,CAAC;gBAAEC,SAAS;YAA4B;QACrE;QAEA,gDAAgD;QAChD,MAAMgB,UAAU,MAAMV,iBAAM,CAACW,OAAO,CAACrB,UAAUY,KAAKZ,QAAQ;QAC5D,IAAI,CAACoB,SAAS;YACZ,OAAOvB,IAAIK,MAAM,CAAC,KAAKC,IAAI,CAAC;gBAAEC,SAAS;YAA4B;QACrE;QAEA,qBAAqB;QACrB,MAAMkB,QAAQC,qBAAG,CAACC,IAAI,CACpB;YAAEP,IAAIL,KAAKK,EAAE;YAAEnB,OAAOc,KAAKd,KAAK;YAAEC,UAAUa,KAAKb,QAAQ;QAAC,GAC1D0B,QAAQC,GAAG,CAACC,UAAU,IAAI,uBAC1B;YAAEC,WAAW;QAAK;QAGpB,OAAO/B,IAAIK,MAAM,CAAC,KAAKC,IAAI,CAAC;YAC1BC,SAAS;YACTkB;QACF;IACF,EAAE,OAAOJ,OAAO;QACdC,QAAQD,KAAK,CAAC,uBAAuBA;QACrC,OAAOrB,IAAIK,MAAM,CAAC,KAAKC,IAAI,CAAC;YAAEC,SAAS;QAA4B;IACrE;AACF"}