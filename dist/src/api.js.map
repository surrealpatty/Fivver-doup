{"version":3,"sources":["../../src/api.ts"],"sourcesContent":["import { Request, Response, NextFunction } from 'express';\r\nimport jwt, { JwtPayload } from 'jsonwebtoken';\r\n\r\n// Define the expected structure of the decoded JWT payload\r\ninterface UserPayload extends JwtPayload {\r\n  id: string;\r\n  email: string;\r\n  username: string;\r\n}\r\n\r\n// Augment the Request interface to include the `user` property\r\ndeclare module 'express-serve-static-core' {\r\n  interface Request {\r\n    user?: UserPayload;\r\n  }\r\n}\r\n\r\n// Middleware to authenticate the token\r\nexport const authenticateToken = (\r\n  req: Request,\r\n  res: Response,\r\n  next: NextFunction\r\n): Response<any, Record<string, any>> | void => {\r\n  // Updated return type here\r\n  try {\r\n    // Extract the token from the Authorization header\r\n    const authorizationHeader = req.headers['authorization'];\r\n\r\n    // Check if the header exists and starts with \"Bearer\"\r\n    if (!authorizationHeader || !authorizationHeader.startsWith('Bearer ')) {\r\n      return res\r\n        .status(401)\r\n        .json({ message: 'Authorization token is missing or invalid' });\r\n    }\r\n\r\n    // Extract the token after \"Bearer\"\r\n    const token = authorizationHeader.split(' ')[1];\r\n\r\n    // Check if the token is present\r\n    if (!token) {\r\n      return res\r\n        .status(401)\r\n        .json({ message: 'Authorization token is missing' });\r\n    }\r\n\r\n    // Ensure the JWT_SECRET is configured in the environment variables\r\n    const jwtSecret = process.env.JWT_SECRET;\r\n    if (!jwtSecret) {\r\n      console.error(\r\n        'JWT_SECRET is not configured in the environment variables'\r\n      );\r\n      return res.status(500).json({ message: 'Internal server error' });\r\n    }\r\n\r\n    // Verify the token and decode the payload\r\n    const decoded = jwt.verify(token, jwtSecret) as UserPayload;\r\n\r\n    // Attach the user data from the decoded token to the request object\r\n    req.user = decoded;\r\n\r\n    // Proceed to the next middleware or route handler\r\n    next();\r\n  } catch (error) {\r\n    console.error('Token authentication failed:', error);\r\n\r\n    // Handle token verification errors (e.g., expired or invalid token)\r\n    return res.status(403).json({ message: 'Invalid or expired token' });\r\n  }\r\n};\r\n"],"names":["authenticateToken","req","res","next","authorizationHeader","headers","startsWith","status","json","message","token","split","jwtSecret","process","env","JWT_SECRET","console","error","decoded","jwt","verify","user"],"mappings":";;;;+BAkBaA;;;eAAAA;;;qEAjBmB;;;;;;AAiBzB,MAAMA,oBAAoB,CAC/BC,KACAC,KACAC;IAEA,2BAA2B;IAC3B,IAAI;QACF,kDAAkD;QAClD,MAAMC,sBAAsBH,IAAII,OAAO,CAAC,gBAAgB;QAExD,sDAAsD;QACtD,IAAI,CAACD,uBAAuB,CAACA,oBAAoBE,UAAU,CAAC,YAAY;YACtE,OAAOJ,IACJK,MAAM,CAAC,KACPC,IAAI,CAAC;gBAAEC,SAAS;YAA4C;QACjE;QAEA,mCAAmC;QACnC,MAAMC,QAAQN,oBAAoBO,KAAK,CAAC,IAAI,CAAC,EAAE;QAE/C,gCAAgC;QAChC,IAAI,CAACD,OAAO;YACV,OAAOR,IACJK,MAAM,CAAC,KACPC,IAAI,CAAC;gBAAEC,SAAS;YAAiC;QACtD;QAEA,mEAAmE;QACnE,MAAMG,YAAYC,QAAQC,GAAG,CAACC,UAAU;QACxC,IAAI,CAACH,WAAW;YACdI,QAAQC,KAAK,CACX;YAEF,OAAOf,IAAIK,MAAM,CAAC,KAAKC,IAAI,CAAC;gBAAEC,SAAS;YAAwB;QACjE;QAEA,0CAA0C;QAC1C,MAAMS,UAAUC,qBAAG,CAACC,MAAM,CAACV,OAAOE;QAElC,oEAAoE;QACpEX,IAAIoB,IAAI,GAAGH;QAEX,kDAAkD;QAClDf;IACF,EAAE,OAAOc,OAAO;QACdD,QAAQC,KAAK,CAAC,gCAAgCA;QAE9C,oEAAoE;QACpE,OAAOf,IAAIK,MAAM,CAAC,KAAKC,IAAI,CAAC;YAAEC,SAAS;QAA2B;IACpE;AACF"}