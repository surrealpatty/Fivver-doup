{"version":3,"sources":["../../../src/config/database.ts"],"sourcesContent":["import { Sequelize } from 'sequelize-typescript';  // Import Sequelize from sequelize-typescript\r\nimport dotenv from 'dotenv';  // Import dotenv to load environment variables\r\n\r\n// Load environment variables from .env file\r\ndotenv.config();\r\n\r\n// TypeScript type guard to ensure environment variables are set\r\nconst checkEnvVars = (): boolean => {\r\n  const requiredVars = ['DB_NAME', 'DB_USER', 'DB_PASSWORD', 'DB_HOST'];\r\n  const missingVars = requiredVars.filter(varName => !process.env[varName]);\r\n\r\n  if (missingVars.length > 0) {\r\n    console.error(`Missing required environment variables: ${missingVars.join(', ')}`);\r\n    return false;\r\n  }\r\n  return true;\r\n};\r\n\r\n// Ensure environment variables are available\r\nif (!checkEnvVars()) {\r\n  process.exit(1);  // Exit if environment variables are missing\r\n}\r\n\r\n// Import the models after verifying environment variables\r\nimport { User } from '@models/user';\r\nimport  Service from '@models/services';\r\n\r\nconst sequelize = new Sequelize({\r\n  dialect: 'mysql',  // Using MySQL dialect\r\n  host: process.env.DB_HOST,  // Database host from .env\r\n  username: process.env.DB_USER as string,  // Database user from .env (type assertion)\r\n  password: process.env.DB_PASSWORD as string,  // Database password from .env (type assertion)\r\n  database: process.env.DB_NAME as string,  // Database name from .env (type assertion)\r\n  models: [User, Service],  // Register models explicitly here\r\n  dialectOptions: {\r\n    authPlugins: {\r\n      mysql_native_password: () => {},  // Disable default auth plugin for MySQL 8\r\n    },\r\n  },\r\n  logging: false,  // Disable Sequelize logging (optional)\r\n});\r\n\r\n// Test database connection\r\nconst testConnection = async (): Promise<boolean> => {\r\n  try {\r\n    await sequelize.authenticate();\r\n    console.log('Database connection successful');\r\n    return true;\r\n  } catch (error) {\r\n    console.error('Unable to connect to the database:', error instanceof Error ? error.message : error);\r\n    return false;\r\n  }\r\n};\r\n\r\n// Export sequelize instance and testConnection function\r\nexport { sequelize, testConnection };\r\n"],"names":["sequelize","testConnection","dotenv","config","checkEnvVars","requiredVars","missingVars","filter","varName","process","env","length","console","error","join","exit","Sequelize","dialect","host","DB_HOST","username","DB_USER","password","DB_PASSWORD","database","DB_NAME","models","User","Service","dialectOptions","authPlugins","mysql_native_password","logging","authenticate","log","Error","message"],"mappings":";;;;;;;;;;;IAuDSA,SAAS;eAATA;;IAAWC,cAAc;eAAdA;;;qCAvDM;+DACP;sBAuBE;iEACA;;;;;;AAtBrB,4CAA4C;AAC5CC,eAAM,CAACC,MAAM;AAEb,gEAAgE;AAChE,MAAMC,eAAe;IACnB,MAAMC,eAAe;QAAC;QAAW;QAAW;QAAe;KAAU;IACrE,MAAMC,cAAcD,aAAaE,MAAM,CAACC,CAAAA,UAAW,CAACC,QAAQC,GAAG,CAACF,QAAQ;IAExE,IAAIF,YAAYK,MAAM,GAAG,GAAG;QAC1BC,QAAQC,KAAK,CAAC,CAAC,wCAAwC,EAAEP,YAAYQ,IAAI,CAAC,OAAO;QACjF,OAAO;IACT;IACA,OAAO;AACT;AAEA,6CAA6C;AAC7C,IAAI,CAACV,gBAAgB;IACnBK,QAAQM,IAAI,CAAC,IAAK,4CAA4C;AAChE;AAMA,MAAMf,YAAY,IAAIgB,8BAAS,CAAC;IAC9BC,SAAS;IACTC,MAAMT,QAAQC,GAAG,CAACS,OAAO;IACzBC,UAAUX,QAAQC,GAAG,CAACW,OAAO;IAC7BC,UAAUb,QAAQC,GAAG,CAACa,WAAW;IACjCC,UAAUf,QAAQC,GAAG,CAACe,OAAO;IAC7BC,QAAQ;QAACC,UAAI;QAAEC,iBAAO;KAAC;IACvBC,gBAAgB;QACdC,aAAa;YACXC,uBAAuB,KAAO;QAChC;IACF;IACAC,SAAS;AACX;AAEA,2BAA2B;AAC3B,MAAM/B,iBAAiB;IACrB,IAAI;QACF,MAAMD,UAAUiC,YAAY;QAC5BrB,QAAQsB,GAAG,CAAC;QACZ,OAAO;IACT,EAAE,OAAOrB,OAAO;QACdD,QAAQC,KAAK,CAAC,sCAAsCA,iBAAiBsB,QAAQtB,MAAMuB,OAAO,GAAGvB;QAC7F,OAAO;IACT;AACF"}