{"version":3,"sources":["../../../src/models/user.ts"],"sourcesContent":["import { Table, Column, Model, DataType, PrimaryKey, AutoIncrement, Unique, IsEmail, Length, Default } from 'sequelize-typescript';\r\nimport bcrypt from 'bcryptjs';\r\n\r\n// Define the attributes required to create a user\r\nexport interface UserCreationAttributes {\r\n  email: string;\r\n  username: string;\r\n  password: string;\r\n  role?: string; // Optional role field\r\n  tier?: string; // Optional tier field\r\n  isVerified?: boolean; // Optional verified field\r\n}\r\n\r\n@Table({ tableName: 'users', timestamps: true }) // Only use table-specific options here\r\nexport class User extends Model<User, UserCreationAttributes> {\r\n  // Primary key for the user\r\n  @PrimaryKey\r\n  @AutoIncrement\r\n  @Column(DataType.INTEGER)\r\n  declare id: number;\r\n\r\n  // Email with uniqueness and validation\r\n  @Unique\r\n  @IsEmail\r\n  @Column(DataType.STRING)\r\n  email!: string;\r\n\r\n  // Username with uniqueness and length restriction\r\n  @Unique\r\n  @Length({ min: 3, max: 20 })\r\n  @Column(DataType.STRING)\r\n  username!: string;\r\n\r\n  // Password storage\r\n  @Column(DataType.STRING)\r\n  password!: string;\r\n\r\n  // Role of the user (e.g., admin, user)\r\n  @Default('user')\r\n  @Column(DataType.STRING)\r\n  role!: string;\r\n\r\n  // Subscription tier of the user (free or paid)\r\n  @Default('free')\r\n  @Column(DataType.STRING)\r\n  tier!: string;\r\n\r\n  // Verified status of the user (default is false)\r\n  @Default(false)\r\n  @Column(DataType.BOOLEAN)\r\n  isVerified!: boolean;\r\n\r\n  /**\r\n   * Hashes the user's password.\r\n   * @param password - The plain text password to hash.\r\n   * @returns - The hashed password.\r\n   */\r\n  static async hashPassword(password: string): Promise<string> {\r\n    const salt = await bcrypt.genSalt(10);\r\n    return bcrypt.hash(password, salt);\r\n  }\r\n\r\n  /**\r\n   * Validates a user's input password against the stored hashed password.\r\n   * @param storedPassword - The stored hashed password.\r\n   * @param inputPassword - The plain text password provided by the user.\r\n   * @returns - True if the passwords match; false otherwise.\r\n   */\r\n  static async validatePassword(storedPassword: string, inputPassword: string): Promise<boolean> {\r\n    return bcrypt.compare(inputPassword, storedPassword);\r\n  }\r\n}\r\n\r\nexport default User;\r\n"],"names":["User","Model","email","username","password","role","tier","isVerified","hashPassword","salt","bcrypt","genSalt","hash","validatePassword","storedPassword","inputPassword","compare","INTEGER","STRING","min","max","BOOLEAN","tableName","timestamps"],"mappings":";;;;;;;;;;;IAcaA,IAAI;eAAJA;;IA2Db,OAAoB;eAApB;;;qCAzE4G;iEACzF;;;;;;;;;;;;;;;AAaZ,MAAMA,aAAaC,0BAAK;IAO7B,uCAAuC;IAIvCC,MAAe;IAEf,kDAAkD;IAIlDC,SAAkB;IAElB,mBAAmB;IAEnBC,SAAkB;IAElB,uCAAuC;IAGvCC,KAAc;IAEd,+CAA+C;IAG/CC,KAAc;IAEd,iDAAiD;IAGjDC,WAAqB;IAErB;;;;GAIC,GACD,aAAaC,aAAaJ,QAAgB,EAAmB;QAC3D,MAAMK,OAAO,MAAMC,iBAAM,CAACC,OAAO,CAAC;QAClC,OAAOD,iBAAM,CAACE,IAAI,CAACR,UAAUK;IAC/B;IAEA;;;;;GAKC,GACD,aAAaI,iBAAiBC,cAAsB,EAAEC,aAAqB,EAAoB;QAC7F,OAAOL,iBAAM,CAACM,OAAO,CAACD,eAAeD;IACvC;AACF;;;;mEArDmBG;;;;;;mEAMAC;;;;;;QAKPC,KAAK;QAAGC,KAAK;;mEACNF;;;;mEAIAA;;;;;mEAKAA;;;;;mEAKAA;;;;;mEAKAG;;;;;QApCVC,WAAW;QAASC,YAAY;;;MA4DzC,WAAevB"}