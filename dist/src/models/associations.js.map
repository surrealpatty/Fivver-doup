{"version":3,"sources":["../../../src/models/associations.ts"],"sourcesContent":["import { User } from './user';         // Import the User model\r\nimport Service from './services';     // Import the Service model (ensure this matches the export in services.ts)\r\nimport { Order } from './order';      // Import the Order model\r\nimport { Review } from './review';    // Import the Review model\r\nimport { sequelize } from '@config/database';  // Use the correct alias\r\n\r\n// Define associations\r\n\r\n// User can have many services (a user can post many services)\r\nUser.hasMany(Service, { foreignKey: 'userId' });  // Foreign key will be userId in Service\r\nService.belongsTo(User, { foreignKey: 'userId' }); // A service belongs to one user\r\n\r\n// User can have many reviews (a user can leave many reviews)\r\nUser.hasMany(Review, { foreignKey: 'userId' });  // Foreign key will be userId in Review\r\nReview.belongsTo(User, { foreignKey: 'userId' }); // A review belongs to one user\r\n\r\n// Service can have many reviews (a service can have many reviews)\r\nService.hasMany(Review, { foreignKey: 'serviceId' });  // Foreign key will be serviceId in Review\r\nReview.belongsTo(Service, { foreignKey: 'serviceId' }); // A review belongs to one service\r\n\r\n// Order belongs to a user and a service (an order is linked to one user and one service)\r\nOrder.belongsTo(User, { foreignKey: 'userId' }); // An order belongs to one user\r\nOrder.belongsTo(Service, { foreignKey: 'serviceId' }); // An order belongs to one service\r\n\r\n// Sync models with the database\r\n(async () => {\r\n  try {\r\n    await sequelize.sync({ force: false }); // Use { force: false } to avoid overwriting existing data\r\n    console.log('Model associations are successfully set up.');\r\n  } catch (error) {\r\n    console.error('Error setting up model associations:', error);\r\n  }\r\n})();\r\n\r\n// Export the models with their associations\r\nexport { User, Service, Order, Review };\r\n"],"names":["Order","Review","Service","User","hasMany","foreignKey","belongsTo","sequelize","sync","force","console","log","error"],"mappings":";;;;;;;;;;;IAmCwBA,KAAK;eAALA,YAAK;;IAAEC,MAAM;eAANA,cAAM;;IAAtBC,OAAO;eAAPA,iBAAO;;IAAbC,IAAI;eAAJA,UAAI;;;sBAnCQ;iEACD;uBACE;wBACC;0BACG;;;;;;AAE1B,sBAAsB;AAEtB,8DAA8D;AAC9DA,UAAI,CAACC,OAAO,CAACF,iBAAO,EAAE;IAAEG,YAAY;AAAS,IAAK,wCAAwC;AAC1FH,iBAAO,CAACI,SAAS,CAACH,UAAI,EAAE;IAAEE,YAAY;AAAS,IAAI,gCAAgC;AAEnF,6DAA6D;AAC7DF,UAAI,CAACC,OAAO,CAACH,cAAM,EAAE;IAAEI,YAAY;AAAS,IAAK,uCAAuC;AACxFJ,cAAM,CAACK,SAAS,CAACH,UAAI,EAAE;IAAEE,YAAY;AAAS,IAAI,+BAA+B;AAEjF,kEAAkE;AAClEH,iBAAO,CAACE,OAAO,CAACH,cAAM,EAAE;IAAEI,YAAY;AAAY,IAAK,0CAA0C;AACjGJ,cAAM,CAACK,SAAS,CAACJ,iBAAO,EAAE;IAAEG,YAAY;AAAY,IAAI,kCAAkC;AAE1F,yFAAyF;AACzFL,YAAK,CAACM,SAAS,CAACH,UAAI,EAAE;IAAEE,YAAY;AAAS,IAAI,+BAA+B;AAChFL,YAAK,CAACM,SAAS,CAACJ,iBAAO,EAAE;IAAEG,YAAY;AAAY,IAAI,kCAAkC;AAEzF,gCAAgC;AAC/B,CAAA;IACC,IAAI;QACF,MAAME,mBAAS,CAACC,IAAI,CAAC;YAAEC,OAAO;QAAM,IAAI,0DAA0D;QAClGC,QAAQC,GAAG,CAAC;IACd,EAAE,OAAOC,OAAO;QACdF,QAAQE,KAAK,CAAC,wCAAwCA;IACxD;AACF,CAAA"}