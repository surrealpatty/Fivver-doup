{"version":3,"sources":["../../../src/routes/api.ts"],"sourcesContent":["import { Request, Response, NextFunction } from 'express';\r\nimport jwt from 'jsonwebtoken';  // JWT for verifying tokens\r\nimport { AuthRequest } from '../types/index'; // Import the correct path for AuthRequest\r\nimport { UserPayload } from '../types/index'; // Import the correct path for UserPayload\r\n\r\n// Secret key for JWT verification, you should store it in an environment variable for security\r\nconst SECRET_KEY = process.env.JWT_SECRET_KEY || 'your-secret-key'; // Replace with your actual secret key\r\n\r\n// Middleware to check if the user is authenticated\r\nexport const checkAuth = (\r\n  req: AuthRequest,  // Use AuthRequest instead of Request\r\n  res: Response,\r\n  next: NextFunction\r\n): void => {\r\n  // Use req.get() to safely access the authorization header\r\n  const token = req.get('authorization')?.split(' ')[1]; // Assuming token is passed as \"Bearer token\"\r\n\r\n  if (!token) {\r\n    res.status(401).json({ message: 'Authorization token is missing' });\r\n    return; // Ensure function returns when response is sent\r\n  }\r\n\r\n  try {\r\n    // Verify the token\r\n    const decoded = jwt.verify(token, SECRET_KEY) as UserPayload;\r\n\r\n    // Handle the case where email is optional and may be undefined\r\n    if (decoded.email === undefined) {\r\n      console.warn('User payload is missing email');\r\n    }\r\n\r\n    // Attach user information to the request object for further use in the route\r\n    req.user = decoded;  // TypeScript will now know req.user is of type AuthRequest\r\n\r\n    // Proceed to the next middleware or route handler\r\n    next();\r\n  } catch (error) {\r\n    res.status(401).json({ message: 'Invalid or expired token' });\r\n    return; // Ensure function returns when response is sent\r\n  }\r\n};\r\n"],"names":["checkAuth","SECRET_KEY","process","env","JWT_SECRET_KEY","req","res","next","token","get","split","status","json","message","decoded","jwt","verify","email","undefined","console","warn","user","error"],"mappings":";;;;+BASaA;;;eAAAA;;;qEARG;;;;;;AAIhB,+FAA+F;AAC/F,MAAMC,aAAaC,QAAQC,GAAG,CAACC,cAAc,IAAI,mBAAmB,sCAAsC;AAGnG,MAAMJ,YAAY,CACvBK,KACAC,KACAC;IAEA,0DAA0D;IAC1D,MAAMC,QAAQH,IAAII,GAAG,CAAC,kBAAkBC,MAAM,IAAI,CAAC,EAAE,EAAE,6CAA6C;IAEpG,IAAI,CAACF,OAAO;QACVF,IAAIK,MAAM,CAAC,KAAKC,IAAI,CAAC;YAAEC,SAAS;QAAiC;QACjE,QAAQ,gDAAgD;IAC1D;IAEA,IAAI;QACF,mBAAmB;QACnB,MAAMC,UAAUC,qBAAG,CAACC,MAAM,CAACR,OAAOP;QAElC,+DAA+D;QAC/D,IAAIa,QAAQG,KAAK,KAAKC,WAAW;YAC/BC,QAAQC,IAAI,CAAC;QACf;QAEA,6EAA6E;QAC7Ef,IAAIgB,IAAI,GAAGP,SAAU,2DAA2D;QAEhF,kDAAkD;QAClDP;IACF,EAAE,OAAOe,OAAO;QACdhB,IAAIK,MAAM,CAAC,KAAKC,IAAI,CAAC;YAAEC,SAAS;QAA2B;QAC3D,QAAQ,gDAAgD;IAC1D;AACF"}