{"version":3,"sources":["../../../src/routes/api.ts"],"sourcesContent":["import { Router, Request, Response, NextFunction } from 'express';\r\nimport { AuthRequest } from '../types'; // Correct import for AuthRequest\r\nimport { authenticateJWT } from '../middlewares/authMiddleware'; // Correct import for authenticateJWT\r\n\r\nconst router = Router();\r\n\r\n// POST route for creating a service\r\nrouter.post('/services', authenticateJWT, async (req: AuthRequest, res: Response, next: NextFunction): Promise<void> => {\r\n  try {\r\n    // Ensure the user is authenticated\r\n    if (!req.user) {\r\n      res.status(403).json({ message: 'User not authenticated' });\r\n      return; // Ensure flow terminates after returning the response\r\n    }\r\n\r\n    // Ensure user has a tier assigned\r\n    if (!req.user.tier) {\r\n      res.status(400).json({ message: 'User tier is missing' });\r\n      return; // Ensure flow terminates after returning the response\r\n    }\r\n\r\n    // Proceed with creating or updating the service logic here\r\n    // Replace with actual logic to create the service\r\n    res.status(201).json({ message: 'Service created successfully' });\r\n\r\n  } catch (error) {\r\n    next(error); // Pass errors to the error handler\r\n  }\r\n});\r\n\r\n// GET route for fetching profile data\r\nrouter.get('/profile', authenticateJWT, async (req: AuthRequest, res: Response, next: NextFunction): Promise<void> => {\r\n  try {\r\n    // Ensure the user is authenticated\r\n    if (!req.user) {\r\n      res.status(403).json({ message: 'User not authenticated' });\r\n      return; // Ensure flow terminates after returning the response\r\n    }\r\n\r\n    // Fetch the profile data logic (replace with actual logic)\r\n    res.status(200).json({ message: 'Profile data', user: req.user });\r\n\r\n  } catch (error) {\r\n    next(error); // Pass errors to the error handler\r\n  }\r\n});\r\n\r\nexport default router;\r\n"],"names":["router","Router","post","authenticateJWT","req","res","next","user","status","json","message","tier","error","get"],"mappings":";;;;+BA+CA;;;eAAA;;;yBA/CwD;gCAExB;AAEhC,MAAMA,SAASC,IAAAA,eAAM;AAErB,oCAAoC;AACpCD,OAAOE,IAAI,CAAC,aAAaC,+BAAe,EAAE,OAAOC,KAAkBC,KAAeC;IAChF,IAAI;QACF,mCAAmC;QACnC,IAAI,CAACF,IAAIG,IAAI,EAAE;YACbF,IAAIG,MAAM,CAAC,KAAKC,IAAI,CAAC;gBAAEC,SAAS;YAAyB;YACzD,QAAQ,sDAAsD;QAChE;QAEA,kCAAkC;QAClC,IAAI,CAACN,IAAIG,IAAI,CAACI,IAAI,EAAE;YAClBN,IAAIG,MAAM,CAAC,KAAKC,IAAI,CAAC;gBAAEC,SAAS;YAAuB;YACvD,QAAQ,sDAAsD;QAChE;QAEA,2DAA2D;QAC3D,kDAAkD;QAClDL,IAAIG,MAAM,CAAC,KAAKC,IAAI,CAAC;YAAEC,SAAS;QAA+B;IAEjE,EAAE,OAAOE,OAAO;QACdN,KAAKM,QAAQ,mCAAmC;IAClD;AACF;AAEA,sCAAsC;AACtCZ,OAAOa,GAAG,CAAC,YAAYV,+BAAe,EAAE,OAAOC,KAAkBC,KAAeC;IAC9E,IAAI;QACF,mCAAmC;QACnC,IAAI,CAACF,IAAIG,IAAI,EAAE;YACbF,IAAIG,MAAM,CAAC,KAAKC,IAAI,CAAC;gBAAEC,SAAS;YAAyB;YACzD,QAAQ,sDAAsD;QAChE;QAEA,2DAA2D;QAC3DL,IAAIG,MAAM,CAAC,KAAKC,IAAI,CAAC;YAAEC,SAAS;YAAgBH,MAAMH,IAAIG,IAAI;QAAC;IAEjE,EAAE,OAAOK,OAAO;QACdN,KAAKM,QAAQ,mCAAmC;IAClD;AACF;MAEA,WAAeZ"}