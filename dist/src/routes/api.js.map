{"version":3,"sources":["../../../src/routes/api.ts"],"sourcesContent":["import { Router, Request, Response } from 'express';\r\nimport { authenticateToken, checkAuth } from '../middlewares/authMiddleware';  // Adjust path as needed\r\nimport { ServiceCreationAttributes } from '@models/services';  // Import the model attributes type\r\nimport { User } from '@models/user';  // Correct alias for User model\r\nimport Service from '@models/services';  // Correct alias for Service model\r\n\r\nconst router = Router();\r\n\r\n// POST route to create a service\r\nrouter.post(\r\n  '/services',  // Define the endpoint\r\n  checkAuth,  // Apply the authentication middleware (if required)\r\n  async (req: Request, res: Response): Promise<void> => {\r\n    try {\r\n      // Destructure and type the request body using ServiceCreationAttributes\r\n      const { userId, title, description, price }: ServiceCreationAttributes = req.body;\r\n\r\n      // Validate required fields\r\n      if (!userId || !title || !description || price === undefined) {\r\n        res.status(400).json({\r\n          message: 'Missing required fields: userId, title, description, and price are mandatory.',\r\n          error: 'ValidationError',\r\n        });\r\n        return;\r\n      }\r\n\r\n      // Validate price\r\n      if (typeof price !== 'number' || price <= 0 || isNaN(price)) {\r\n        res.status(400).json({\r\n          message: 'Invalid price: must be a positive number.',\r\n          error: 'ValidationError',\r\n        });\r\n        return;\r\n      }\r\n\r\n      // Check if the user exists\r\n      const user = await User.findByPk(userId);\r\n      if (!user) {\r\n        res.status(404).json({\r\n          message: `User with ID ${userId} not found.`,\r\n          error: 'NotFoundError',\r\n        });\r\n        return;\r\n      }\r\n\r\n      // Create a new service for the user\r\n      const service = await Service.create({\r\n        userId,\r\n        title,\r\n        description,\r\n        price,\r\n      });\r\n\r\n      // Send success response\r\n      res.status(201).json({\r\n        message: 'Service created successfully.',\r\n        serviceId: service.id,\r\n        title: service.title,\r\n      });\r\n    } catch (error) {\r\n      console.error('Error creating service:', error);\r\n      res.status(500).json({\r\n        message: 'Internal server error while creating the service.',\r\n        error: error instanceof Error ? error.message : 'UnknownError',\r\n      });\r\n    }\r\n  }\r\n);\r\n\r\nexport default router;\r\n"],"names":["router","Router","post","checkAuth","req","res","userId","title","description","price","body","undefined","status","json","message","error","isNaN","user","User","findByPk","service","Service","create","serviceId","id","console","Error"],"mappings":";;;;+BAqEA;;;eAAA;;;yBArE0C;gCACG;sBAExB;iEACD;;;;;;AAEpB,MAAMA,SAASC,IAAAA,eAAM;AAErB,iCAAiC;AACjCD,OAAOE,IAAI,CACT,aACAC,yBAAS,EACT,OAAOC,KAAcC;IACnB,IAAI;QACF,wEAAwE;QACxE,MAAM,EAAEC,MAAM,EAAEC,KAAK,EAAEC,WAAW,EAAEC,KAAK,EAAE,GAA8BL,IAAIM,IAAI;QAEjF,2BAA2B;QAC3B,IAAI,CAACJ,UAAU,CAACC,SAAS,CAACC,eAAeC,UAAUE,WAAW;YAC5DN,IAAIO,MAAM,CAAC,KAAKC,IAAI,CAAC;gBACnBC,SAAS;gBACTC,OAAO;YACT;YACA;QACF;QAEA,iBAAiB;QACjB,IAAI,OAAON,UAAU,YAAYA,SAAS,KAAKO,MAAMP,QAAQ;YAC3DJ,IAAIO,MAAM,CAAC,KAAKC,IAAI,CAAC;gBACnBC,SAAS;gBACTC,OAAO;YACT;YACA;QACF;QAEA,2BAA2B;QAC3B,MAAME,OAAO,MAAMC,UAAI,CAACC,QAAQ,CAACb;QACjC,IAAI,CAACW,MAAM;YACTZ,IAAIO,MAAM,CAAC,KAAKC,IAAI,CAAC;gBACnBC,SAAS,CAAC,aAAa,EAAER,OAAO,WAAW,CAAC;gBAC5CS,OAAO;YACT;YACA;QACF;QAEA,oCAAoC;QACpC,MAAMK,UAAU,MAAMC,iBAAO,CAACC,MAAM,CAAC;YACnChB;YACAC;YACAC;YACAC;QACF;QAEA,wBAAwB;QACxBJ,IAAIO,MAAM,CAAC,KAAKC,IAAI,CAAC;YACnBC,SAAS;YACTS,WAAWH,QAAQI,EAAE;YACrBjB,OAAOa,QAAQb,KAAK;QACtB;IACF,EAAE,OAAOQ,OAAO;QACdU,QAAQV,KAAK,CAAC,2BAA2BA;QACzCV,IAAIO,MAAM,CAAC,KAAKC,IAAI,CAAC;YACnBC,SAAS;YACTC,OAAOA,iBAAiBW,QAAQX,MAAMD,OAAO,GAAG;QAClD;IACF;AACF;MAGF,WAAed"}