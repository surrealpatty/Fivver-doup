{"version":3,"sources":["../../../src/routes/review.ts"],"sourcesContent":["// src/routes/review.ts\r\n\r\nimport express, { Request, Response, NextFunction } from 'express';\r\nimport { authenticateJWT } from '../middlewares/authMiddleware';  // Correct import\r\nimport { AuthRequest } from '../types/authMiddleware';  // Import AuthRequest for typing\r\n\r\nconst router = express.Router();\r\n\r\n// Example route to create a new review\r\nrouter.post('/', authenticateJWT, (req: AuthRequest, res: Response, next: NextFunction): void => {\r\n  // Ensure req.user is defined and has a tier\r\n  if (req.user && req.user.tier) {\r\n    res.status(201).json({ message: 'Review created successfully.' });\r\n  } else {\r\n    res.status(400).json({ message: 'User tier is missing.' });\r\n  }\r\n});\r\n\r\n// Example route to get reviews for a service\r\nrouter.get('/:serviceId', authenticateJWT, (req: AuthRequest, res: Response, next: NextFunction): void => {\r\n  // Ensure req.user is defined\r\n  if (req.user) {\r\n    res.status(200).json({ message: 'Reviews fetched successfully.' });\r\n  } else {\r\n    res.status(400).json({ message: 'User not authenticated.' });\r\n  }\r\n});\r\n\r\nexport default router;\r\n"],"names":["router","express","Router","post","authenticateJWT","req","res","next","user","tier","status","json","message","get"],"mappings":"AAAA,uBAAuB;;;;;+BA4BvB;;;eAAA;;;gEA1ByD;gCACzB;;;;;;AAGhC,MAAMA,SAASC,gBAAO,CAACC,MAAM;AAE7B,uCAAuC;AACvCF,OAAOG,IAAI,CAAC,KAAKC,+BAAe,EAAE,CAACC,KAAkBC,KAAeC;IAClE,4CAA4C;IAC5C,IAAIF,IAAIG,IAAI,IAAIH,IAAIG,IAAI,CAACC,IAAI,EAAE;QAC7BH,IAAII,MAAM,CAAC,KAAKC,IAAI,CAAC;YAAEC,SAAS;QAA+B;IACjE,OAAO;QACLN,IAAII,MAAM,CAAC,KAAKC,IAAI,CAAC;YAAEC,SAAS;QAAwB;IAC1D;AACF;AAEA,6CAA6C;AAC7CZ,OAAOa,GAAG,CAAC,eAAeT,+BAAe,EAAE,CAACC,KAAkBC,KAAeC;IAC3E,6BAA6B;IAC7B,IAAIF,IAAIG,IAAI,EAAE;QACZF,IAAII,MAAM,CAAC,KAAKC,IAAI,CAAC;YAAEC,SAAS;QAAgC;IAClE,OAAO;QACLN,IAAII,MAAM,CAAC,KAAKC,IAAI,CAAC;YAAEC,SAAS;QAA0B;IAC5D;AACF;MAEA,WAAeZ"}