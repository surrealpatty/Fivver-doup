{"version":3,"sources":["../../../src/routes/review.ts"],"sourcesContent":["import { Router, Request, Response, NextFunction } from 'express';\r\nimport { AuthRequest } from '../types'; // Correct import path for AuthRequest\r\nimport { authenticateJWT } from '../middlewares/authMiddleware'; // Correct import for authenticateJWT\r\n\r\nconst router = Router();\r\n\r\n// POST route to create a new review\r\nrouter.post('/', authenticateJWT, async (req: AuthRequest, res: Response, next: NextFunction): Promise<void> => {\r\n  try {\r\n    // Ensure req.user is authenticated and has a tier\r\n    if (req.user && req.user.tier) {\r\n      // Logic to create a review (e.g., saving it in the database)\r\n      // Example: Save review to DB\r\n      // const review = await Review.create({ userId: req.user.id, content: req.body.content, serviceId: req.body.serviceId });\r\n      res.status(201).json({ message: 'Review created successfully.' });\r\n    } else {\r\n      res.status(400).json({ message: 'User tier is missing.' });\r\n    }\r\n  } catch (err) {\r\n    next(err); // Pass errors to the error handler\r\n  }\r\n});\r\n\r\n// GET route to fetch reviews for a specific service\r\nrouter.get('/:serviceId', authenticateJWT, async (req: AuthRequest, res: Response, next: NextFunction): Promise<void> => {\r\n  try {\r\n    // Ensure req.user is authenticated\r\n    if (req.user) {\r\n      const serviceId = req.params.serviceId;\r\n      \r\n      // Logic to fetch reviews for the given serviceId (e.g., querying the database)\r\n      // Example: Fetch reviews for the service\r\n      // const reviews = await Review.findAll({ where: { serviceId: serviceId } });\r\n      \r\n      res.status(200).json({ message: 'Reviews fetched successfully.' });\r\n    } else {\r\n      res.status(400).json({ message: 'User not authenticated.' });\r\n    }\r\n  } catch (err) {\r\n    next(err); // Pass errors to the error handler\r\n  }\r\n});\r\n\r\nexport default router;\r\n"],"names":["router","Router","post","authenticateJWT","req","res","next","user","tier","status","json","message","err","get","serviceId","params"],"mappings":";;;;+BA2CA;;;eAAA;;;yBA3CwD;gCAExB;AAEhC,MAAMA,SAASC,IAAAA,eAAM;AAErB,oCAAoC;AACpCD,OAAOE,IAAI,CAAC,KAAKC,+BAAe,EAAE,OAAOC,KAAkBC,KAAeC;IACxE,IAAI;QACF,kDAAkD;QAClD,IAAIF,IAAIG,IAAI,IAAIH,IAAIG,IAAI,CAACC,IAAI,EAAE;YAC7B,6DAA6D;YAC7D,6BAA6B;YAC7B,yHAAyH;YACzHH,IAAII,MAAM,CAAC,KAAKC,IAAI,CAAC;gBAAEC,SAAS;YAA+B;QACjE,OAAO;YACLN,IAAII,MAAM,CAAC,KAAKC,IAAI,CAAC;gBAAEC,SAAS;YAAwB;QAC1D;IACF,EAAE,OAAOC,KAAK;QACZN,KAAKM,MAAM,mCAAmC;IAChD;AACF;AAEA,oDAAoD;AACpDZ,OAAOa,GAAG,CAAC,eAAeV,+BAAe,EAAE,OAAOC,KAAkBC,KAAeC;IACjF,IAAI;QACF,mCAAmC;QACnC,IAAIF,IAAIG,IAAI,EAAE;YACZ,MAAMO,YAAYV,IAAIW,MAAM,CAACD,SAAS;YAEtC,+EAA+E;YAC/E,yCAAyC;YACzC,6EAA6E;YAE7ET,IAAII,MAAM,CAAC,KAAKC,IAAI,CAAC;gBAAEC,SAAS;YAAgC;QAClE,OAAO;YACLN,IAAII,MAAM,CAAC,KAAKC,IAAI,CAAC;gBAAEC,SAAS;YAA0B;QAC5D;IACF,EAAE,OAAOC,KAAK;QACZN,KAAKM,MAAM,mCAAmC;IAChD;AACF;MAEA,WAAeZ"}