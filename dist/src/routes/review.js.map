{"version":3,"sources":["../../../src/routes/review.ts"],"sourcesContent":["import { Router, Request, Response, NextFunction } from 'express';\r\nimport { authenticateToken } from '../middlewares/authMiddleware';\r\nimport { AuthRequest } from '../types/authMiddleware'; // Correctly typed AuthRequest\r\nimport { UserPayload } from '../types/index'; // Correct path for your types\r\n\r\nconst router = Router();\r\n\r\n// POST route to create a new review\r\nrouter.post('/', authenticateToken, async (req: AuthRequest, res: Response, next: NextFunction): Promise<void> => {\r\n  try {\r\n    if (req.user && req.user.tier) { // req.user is guaranteed to be of type 'UserPayload' here\r\n      // Logic to create a review (e.g., saving it in the database)\r\n      res.status(201).json({ message: 'Review created successfully.' });\r\n    } else {\r\n      res.status(400).json({ message: 'User tier is missing.' });\r\n    }\r\n  } catch (err) {\r\n    next(err); // Pass errors to the error handler\r\n  }\r\n});\r\n\r\n// GET route to fetch reviews for a specific service\r\nrouter.get('/:serviceId', authenticateToken, async (req: AuthRequest, res: Response, next: NextFunction): Promise<void> => {\r\n  try {\r\n    if (req.user) { // req.user is guaranteed to be of type 'UserPayload' here\r\n      const serviceId = req.params.serviceId;\r\n      // Logic to fetch reviews for the service\r\n      res.status(200).json({ message: 'Reviews fetched successfully.' });\r\n    } else {\r\n      res.status(400).json({ message: 'User not authenticated.' });\r\n    }\r\n  } catch (err) {\r\n    next(err); // Pass errors to the error handler\r\n  }\r\n});\r\n\r\nexport default router;\r\n"],"names":["router","Router","post","authenticateToken","req","res","next","user","tier","status","json","message","err","get","serviceId","params"],"mappings":";;;;+BAoCA;;;eAAA;;;yBApCwD;gCACtB;AAIlC,MAAMA,SAASC,IAAAA,eAAM;AAErB,oCAAoC;AACpCD,OAAOE,IAAI,CAAC,KAAKC,iCAAiB,EAAE,OAAOC,KAAkBC,KAAeC;IAC1E,IAAI;QACF,IAAIF,IAAIG,IAAI,IAAIH,IAAIG,IAAI,CAACC,IAAI,EAAE;YAC7B,6DAA6D;YAC7DH,IAAII,MAAM,CAAC,KAAKC,IAAI,CAAC;gBAAEC,SAAS;YAA+B;QACjE,OAAO;YACLN,IAAII,MAAM,CAAC,KAAKC,IAAI,CAAC;gBAAEC,SAAS;YAAwB;QAC1D;IACF,EAAE,OAAOC,KAAK;QACZN,KAAKM,MAAM,mCAAmC;IAChD;AACF;AAEA,oDAAoD;AACpDZ,OAAOa,GAAG,CAAC,eAAeV,iCAAiB,EAAE,OAAOC,KAAkBC,KAAeC;IACnF,IAAI;QACF,IAAIF,IAAIG,IAAI,EAAE;YACZ,MAAMO,YAAYV,IAAIW,MAAM,CAACD,SAAS;YACtC,yCAAyC;YACzCT,IAAII,MAAM,CAAC,KAAKC,IAAI,CAAC;gBAAEC,SAAS;YAAgC;QAClE,OAAO;YACLN,IAAII,MAAM,CAAC,KAAKC,IAAI,CAAC;gBAAEC,SAAS;YAA0B;QAC5D;IACF,EAAE,OAAOC,KAAK;QACZN,KAAKM,MAAM,mCAAmC;IAChD;AACF;MAEA,WAAeZ"}