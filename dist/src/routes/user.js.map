{"version":3,"sources":["../../../src/routes/user.ts"],"sourcesContent":["import { Router, Request, Response } from 'express';\r\nimport { check, validationResult } from 'express-validator';\r\nimport bcrypt from 'bcryptjs';\r\nimport { User } from '../models';  // Assuming you have a Sequelize User model\r\nimport { sendEmail } from '../services/emailService';  // Import email service\r\n\r\nconst router = Router();\r\n\r\n// User Registration Route\r\nrouter.post(\r\n  '/register',\r\n  // Validate user inputs\r\n  [\r\n    check('email').isEmail().withMessage('Please enter a valid email address'),\r\n    check('username').notEmpty().withMessage('Username is required'),\r\n    check('password')\r\n      .isLength({ min: 6 })\r\n      .withMessage('Password must be at least 6 characters long')\r\n  ],\r\n  async (req: Request, res: Response): Promise<void> => {\r\n    // Check for validation errors\r\n    const errors = validationResult(req);\r\n    if (!errors.isEmpty()) {\r\n      res.status(400).json({ errors: errors.array() });\r\n      return; // Explicit return to satisfy the TypeScript `void` requirement\r\n    }\r\n\r\n    try {\r\n      const { email, username, password } = req.body;\r\n\r\n      // Check if user already exists\r\n      const existingUser = await User.findOne({ where: { email } });\r\n      if (existingUser) {\r\n        res.status(400).json({ message: 'User already exists' });\r\n        return; // Explicit return after error response\r\n      }\r\n\r\n      // Hash the password before saving it\r\n      const hashedPassword = await bcrypt.hash(password, 10);\r\n\r\n      // Create new user\r\n      const user = await User.create({\r\n        email,\r\n        username,\r\n        password: hashedPassword\r\n      });\r\n\r\n      // Optionally send a welcome email\r\n      const emailDetails = {\r\n        to: user.email,\r\n        subject: 'Welcome to Our Platform!',\r\n        text: `Hello ${user.username}, welcome to our platform. We're glad to have you!`\r\n      };\r\n      await sendEmail(emailDetails);\r\n\r\n      // Send success response\r\n      res.status(201).json({ message: 'User created successfully' });\r\n    } catch (error) {\r\n      console.error(error);\r\n      res.status(500).json({ message: 'Server error' });\r\n    }\r\n  }\r\n);\r\n\r\n// Test email route (useful for testing your email service)\r\nrouter.get('/test-email', async (req: Request, res: Response): Promise<void> => {\r\n  try {\r\n    const emailDetails = {\r\n      to: 'test@example.com',\r\n      subject: 'Test Email',\r\n      text: 'This is a test email sent from the email service.'\r\n    };\r\n\r\n    // Send test email\r\n    await sendEmail(emailDetails);\r\n\r\n    res.status(200).json({ message: 'Test email sent successfully!' });\r\n  } catch (error) {\r\n    console.error('Error sending email:', error);\r\n    res.status(500).json({ message: 'Error sending test email.' });\r\n  }\r\n});\r\n\r\n// Other user-related routes (e.g., login, profile update) would go here\r\n\r\nexport default router;\r\n"],"names":["router","Router","post","check","isEmail","withMessage","notEmpty","isLength","min","req","res","errors","validationResult","isEmpty","status","json","array","email","username","password","body","existingUser","User","findOne","where","message","hashedPassword","bcrypt","hash","user","create","emailDetails","to","subject","text","sendEmail","error","console","get"],"mappings":";;;;+BAmFA,wEAAwE;AAExE;;;eAAA;;;yBArF0C;kCACF;iEACrB;wBACE;8BACK;;;;;;AAE1B,MAAMA,SAASC,IAAAA,eAAM;AAErB,0BAA0B;AAC1BD,OAAOE,IAAI,CACT,aACA,uBAAuB;AACvB;IACEC,IAAAA,uBAAK,EAAC,SAASC,OAAO,GAAGC,WAAW,CAAC;IACrCF,IAAAA,uBAAK,EAAC,YAAYG,QAAQ,GAAGD,WAAW,CAAC;IACzCF,IAAAA,uBAAK,EAAC,YACHI,QAAQ,CAAC;QAAEC,KAAK;IAAE,GAClBH,WAAW,CAAC;CAChB,EACD,OAAOI,KAAcC;IACnB,8BAA8B;IAC9B,MAAMC,SAASC,IAAAA,kCAAgB,EAACH;IAChC,IAAI,CAACE,OAAOE,OAAO,IAAI;QACrBH,IAAII,MAAM,CAAC,KAAKC,IAAI,CAAC;YAAEJ,QAAQA,OAAOK,KAAK;QAAG;QAC9C,QAAQ,+DAA+D;IACzE;IAEA,IAAI;QACF,MAAM,EAAEC,KAAK,EAAEC,QAAQ,EAAEC,QAAQ,EAAE,GAAGV,IAAIW,IAAI;QAE9C,+BAA+B;QAC/B,MAAMC,eAAe,MAAMC,YAAI,CAACC,OAAO,CAAC;YAAEC,OAAO;gBAAEP;YAAM;QAAE;QAC3D,IAAII,cAAc;YAChBX,IAAII,MAAM,CAAC,KAAKC,IAAI,CAAC;gBAAEU,SAAS;YAAsB;YACtD,QAAQ,uCAAuC;QACjD;QAEA,qCAAqC;QACrC,MAAMC,iBAAiB,MAAMC,iBAAM,CAACC,IAAI,CAACT,UAAU;QAEnD,kBAAkB;QAClB,MAAMU,OAAO,MAAMP,YAAI,CAACQ,MAAM,CAAC;YAC7Bb;YACAC;YACAC,UAAUO;QACZ;QAEA,kCAAkC;QAClC,MAAMK,eAAe;YACnBC,IAAIH,KAAKZ,KAAK;YACdgB,SAAS;YACTC,MAAM,CAAC,MAAM,EAAEL,KAAKX,QAAQ,CAAC,kDAAkD,CAAC;QAClF;QACA,MAAMiB,IAAAA,uBAAS,EAACJ;QAEhB,wBAAwB;QACxBrB,IAAII,MAAM,CAAC,KAAKC,IAAI,CAAC;YAAEU,SAAS;QAA4B;IAC9D,EAAE,OAAOW,OAAO;QACdC,QAAQD,KAAK,CAACA;QACd1B,IAAII,MAAM,CAAC,KAAKC,IAAI,CAAC;YAAEU,SAAS;QAAe;IACjD;AACF;AAGF,2DAA2D;AAC3DzB,OAAOsC,GAAG,CAAC,eAAe,OAAO7B,KAAcC;IAC7C,IAAI;QACF,MAAMqB,eAAe;YACnBC,IAAI;YACJC,SAAS;YACTC,MAAM;QACR;QAEA,kBAAkB;QAClB,MAAMC,IAAAA,uBAAS,EAACJ;QAEhBrB,IAAII,MAAM,CAAC,KAAKC,IAAI,CAAC;YAAEU,SAAS;QAAgC;IAClE,EAAE,OAAOW,OAAO;QACdC,QAAQD,KAAK,CAAC,wBAAwBA;QACtC1B,IAAII,MAAM,CAAC,KAAKC,IAAI,CAAC;YAAEU,SAAS;QAA4B;IAC9D;AACF;MAIA,WAAezB"}