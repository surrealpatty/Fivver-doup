{"version":3,"sources":["../../../src/routes/user.ts"],"sourcesContent":["import { Router, Request, Response } from 'express';\r\nimport { check, validationResult } from 'express-validator';\r\nimport bcrypt from 'bcryptjs';\r\nimport { User } from '../models';  // Ensure correct path to your User model\r\n\r\nconst router = Router();\r\n\r\n// User Registration Route\r\nrouter.post(\r\n  '/register',\r\n  // Validate user inputs\r\n  [\r\n    check('email')\r\n      .isEmail()\r\n      .withMessage('Please enter a valid email address'),\r\n    check('username')\r\n      .notEmpty()\r\n      .withMessage('Username is required'),\r\n    check('password')\r\n      .isLength({ min: 6 })\r\n      .withMessage('Password must be at least 6 characters long')\r\n  ],\r\n  async (req: Request, res: Response): Promise<void> => {  // Ensure return type is void\r\n    // Check for validation errors\r\n    const errors = validationResult(req);\r\n    if (!errors.isEmpty()) {\r\n      res.status(400).json({ errors: errors.array() });  // Return response directly\r\n      return;  // Ensure we stop here if validation fails\r\n    }\r\n\r\n    try {\r\n      const { email, username, password } = req.body;\r\n\r\n      // Check if user already exists by email\r\n      const existingUser = await User.findOne({ where: { email } });\r\n      if (existingUser) {\r\n        res.status(400).json({ message: 'User already exists' });\r\n        return;\r\n      }\r\n\r\n      // Check if username already exists\r\n      const existingUsername = await User.findOne({ where: { username } });\r\n      if (existingUsername) {\r\n        res.status(400).json({ message: 'Username already taken' });\r\n        return;\r\n      }\r\n\r\n      // Hash the password before saving it\r\n      const hashedPassword = await bcrypt.hash(password, 10);\r\n\r\n      // Create new user\r\n      const user = await User.create({\r\n        email,\r\n        username,\r\n        password: hashedPassword\r\n      });\r\n\r\n      // Send success response with user data\r\n      res.status(201).json({\r\n        message: 'User created successfully',\r\n        user: { id: user.id, username: user.username, email: user.email }\r\n      });\r\n    } catch (error) {\r\n      console.error('Error creating user:', error);\r\n      res.status(500).json({ message: 'Server error' });\r\n    }\r\n  }\r\n);\r\n\r\n// Export router to use in the main app\r\nexport default router;\r\n"],"names":["router","Router","post","check","isEmail","withMessage","notEmpty","isLength","min","req","res","errors","validationResult","isEmpty","status","json","array","email","username","password","body","existingUser","User","findOne","where","message","existingUsername","hashedPassword","bcrypt","hash","user","create","id","error","console"],"mappings":";;;;+BAqEA,uCAAuC;AACvC;;;eAAA;;;yBAtE0C;kCACF;iEACrB;wBACE;;;;;;AAErB,MAAMA,SAASC,IAAAA,eAAM;AAErB,0BAA0B;AAC1BD,OAAOE,IAAI,CACT,aACA,uBAAuB;AACvB;IACEC,IAAAA,uBAAK,EAAC,SACHC,OAAO,GACPC,WAAW,CAAC;IACfF,IAAAA,uBAAK,EAAC,YACHG,QAAQ,GACRD,WAAW,CAAC;IACfF,IAAAA,uBAAK,EAAC,YACHI,QAAQ,CAAC;QAAEC,KAAK;IAAE,GAClBH,WAAW,CAAC;CAChB,EACD,OAAOI,KAAcC;IACnB,8BAA8B;IAC9B,MAAMC,SAASC,IAAAA,kCAAgB,EAACH;IAChC,IAAI,CAACE,OAAOE,OAAO,IAAI;QACrBH,IAAII,MAAM,CAAC,KAAKC,IAAI,CAAC;YAAEJ,QAAQA,OAAOK,KAAK;QAAG,IAAK,2BAA2B;QAC9E,QAAS,0CAA0C;IACrD;IAEA,IAAI;QACF,MAAM,EAAEC,KAAK,EAAEC,QAAQ,EAAEC,QAAQ,EAAE,GAAGV,IAAIW,IAAI;QAE9C,wCAAwC;QACxC,MAAMC,eAAe,MAAMC,YAAI,CAACC,OAAO,CAAC;YAAEC,OAAO;gBAAEP;YAAM;QAAE;QAC3D,IAAII,cAAc;YAChBX,IAAII,MAAM,CAAC,KAAKC,IAAI,CAAC;gBAAEU,SAAS;YAAsB;YACtD;QACF;QAEA,mCAAmC;QACnC,MAAMC,mBAAmB,MAAMJ,YAAI,CAACC,OAAO,CAAC;YAAEC,OAAO;gBAAEN;YAAS;QAAE;QAClE,IAAIQ,kBAAkB;YACpBhB,IAAII,MAAM,CAAC,KAAKC,IAAI,CAAC;gBAAEU,SAAS;YAAyB;YACzD;QACF;QAEA,qCAAqC;QACrC,MAAME,iBAAiB,MAAMC,iBAAM,CAACC,IAAI,CAACV,UAAU;QAEnD,kBAAkB;QAClB,MAAMW,OAAO,MAAMR,YAAI,CAACS,MAAM,CAAC;YAC7Bd;YACAC;YACAC,UAAUQ;QACZ;QAEA,uCAAuC;QACvCjB,IAAII,MAAM,CAAC,KAAKC,IAAI,CAAC;YACnBU,SAAS;YACTK,MAAM;gBAAEE,IAAIF,KAAKE,EAAE;gBAAEd,UAAUY,KAAKZ,QAAQ;gBAAED,OAAOa,KAAKb,KAAK;YAAC;QAClE;IACF,EAAE,OAAOgB,OAAO;QACdC,QAAQD,KAAK,CAAC,wBAAwBA;QACtCvB,IAAII,MAAM,CAAC,KAAKC,IAAI,CAAC;YAAEU,SAAS;QAAe;IACjD;AACF;MAIF,WAAezB"}