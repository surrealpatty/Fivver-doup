{"version":3,"sources":["../../../src/routes/service.ts"],"sourcesContent":["import express, { Request, Response } from 'express';\r\nimport { authenticateToken } from '../middlewares/authMiddleware'; // JWT authentication middleware\r\nimport { checkTier } from '../middlewares/tierMiddleware'; // Tier-based access control middleware\r\nimport Service from '../models/services'; // Service model\r\n\r\nconst router = express.Router();\r\n\r\n// Create a service (only for paid users)\r\nrouter.post(\r\n  '/post-service',\r\n  authenticateToken, // Authenticate the user\r\n  checkTier('paid'), // Restrict route access to users with 'paid' tier\r\n  async (req: Request, res: Response): Promise<void> => {\r\n    try {\r\n      const { title, description, price } = req.body;\r\n\r\n      // Validate request body\r\n      if (!title || !description || price === undefined) {\r\n        res.status(400).json({ message: 'All fields are required.' });\r\n        return;\r\n      }\r\n\r\n      // Retrieve the user ID from the authenticated token\r\n      const userId = parseInt(req.user?.id || '', 10);\r\n      if (isNaN(userId)) {\r\n        res.status(400).json({ message: 'Invalid user ID.' });\r\n        return;\r\n      }\r\n\r\n      // Create a new service entry\r\n      const service = await Service.create({\r\n        userId,\r\n        title,\r\n        description,\r\n        price,\r\n      });\r\n\r\n      // Respond with the created service\r\n      res.status(201).json({ message: 'Service created successfully.', service });\r\n    } catch (error) {\r\n      console.error(error);\r\n      res.status(500).json({ message: 'Internal server error.', error });\r\n    }\r\n  }\r\n);\r\n\r\nexport default router;\r\n"],"names":["router","express","Router","post","authenticateToken","checkTier","req","res","title","description","price","body","undefined","status","json","message","userId","parseInt","user","id","isNaN","service","Service","create","error","console"],"mappings":";;;;+BA8CA;;;eAAA;;;gEA9C2C;gCACT;gCACR;iEACN;;;;;;AAEpB,MAAMA,SAASC,gBAAO,CAACC,MAAM;AAE7B,yCAAyC;AACzCF,OAAOG,IAAI,CACT,iBACAC,iCAAiB,EACjBC,IAAAA,yBAAS,EAAC,SACV,OAAOC,KAAcC;IACnB,IAAI;QACF,MAAM,EAAEC,KAAK,EAAEC,WAAW,EAAEC,KAAK,EAAE,GAAGJ,IAAIK,IAAI;QAE9C,wBAAwB;QACxB,IAAI,CAACH,SAAS,CAACC,eAAeC,UAAUE,WAAW;YACjDL,IAAIM,MAAM,CAAC,KAAKC,IAAI,CAAC;gBAAEC,SAAS;YAA2B;YAC3D;QACF;QAEA,oDAAoD;QACpD,MAAMC,SAASC,SAASX,IAAIY,IAAI,EAAEC,MAAM,IAAI;QAC5C,IAAIC,MAAMJ,SAAS;YACjBT,IAAIM,MAAM,CAAC,KAAKC,IAAI,CAAC;gBAAEC,SAAS;YAAmB;YACnD;QACF;QAEA,6BAA6B;QAC7B,MAAMM,UAAU,MAAMC,iBAAO,CAACC,MAAM,CAAC;YACnCP;YACAR;YACAC;YACAC;QACF;QAEA,mCAAmC;QACnCH,IAAIM,MAAM,CAAC,KAAKC,IAAI,CAAC;YAAEC,SAAS;YAAiCM;QAAQ;IAC3E,EAAE,OAAOG,OAAO;QACdC,QAAQD,KAAK,CAACA;QACdjB,IAAIM,MAAM,CAAC,KAAKC,IAAI,CAAC;YAAEC,SAAS;YAA0BS;QAAM;IAClE;AACF;MAGF,WAAexB"}