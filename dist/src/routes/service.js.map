{"version":3,"sources":["../../../src/routes/service.ts"],"sourcesContent":["import { Router, Request, Response } from 'express';\r\nimport { authenticateJWT } from '../middlewares/authMiddleware'; // Correct import\r\nimport Service from 'models/services'; // Correct alias for Service model\r\nimport { AuthRequest } from '../types/authMiddleware'; // Correct type for request\r\n\r\nconst router = Router();\r\n\r\n// PUT route to update a service\r\nrouter.put('/services/:id', authenticateJWT, async (req: AuthRequest, res: Response): Promise<void> => {  \r\n  try {\r\n    const serviceId = req.params.id;\r\n    const { title, description, price } = req.body;\r\n    const service = await Service.findByPk(serviceId);\r\n    \r\n    // Check if the service exists\r\n    if (!service) {\r\n      res.status(404).json({ message: 'Service not found' });\r\n      return; // Make sure to return after sending the response\r\n    }\r\n    \r\n    // Check if the authenticated user is the owner of the service\r\n    if (!req.user || service.userId.toString() !== req.user.id) {\r\n      res.status(403).json({ message: 'You can only edit your own services' });\r\n      return; // Return after sending the response\r\n    }\r\n    \r\n    // Update the service\r\n    service.title = title;\r\n    service.description = description;\r\n    service.price = price;\r\n    await service.save();\r\n    \r\n    // Return success response with updated service data\r\n    res.status(200).json({ message: 'Service updated successfully', service });\r\n  } catch (error: unknown) {  \r\n    // Fix for the error type\r\n    if (error instanceof Error) {  \r\n      res.status(500).json({ message: 'Error updating service', error: error.message });\r\n    } else {\r\n      res.status(500).json({ message: 'Error updating service', error: 'Unknown error' });\r\n    }\r\n  }\r\n});\r\n\r\nexport default router;\r\n"],"names":["router","Router","put","authenticateJWT","req","res","serviceId","params","id","title","description","price","body","service","Service","findByPk","status","json","message","user","userId","toString","save","error","Error"],"mappings":";;;;+BA4CA;;;eAAA;;;yBA5C0C;gCACV;iEACZ;;;;;;AAGpB,MAAMA,SAASC,IAAAA,eAAM;AAErB,gCAAgC;AAChCD,OAAOE,GAAG,CAAC,iBAAiBC,+BAAe,EAAE,OAAOC,KAAkBC;IACpE,IAAI;QACF,MAAMC,YAAYF,IAAIG,MAAM,CAACC,EAAE;QAC/B,MAAM,EAAEC,KAAK,EAAEC,WAAW,EAAEC,KAAK,EAAE,GAAGP,IAAIQ,IAAI;QAC9C,MAAMC,UAAU,MAAMC,iBAAO,CAACC,QAAQ,CAACT;QAEvC,8BAA8B;QAC9B,IAAI,CAACO,SAAS;YACZR,IAAIW,MAAM,CAAC,KAAKC,IAAI,CAAC;gBAAEC,SAAS;YAAoB;YACpD,QAAQ,iDAAiD;QAC3D;QAEA,8DAA8D;QAC9D,IAAI,CAACd,IAAIe,IAAI,IAAIN,QAAQO,MAAM,CAACC,QAAQ,OAAOjB,IAAIe,IAAI,CAACX,EAAE,EAAE;YAC1DH,IAAIW,MAAM,CAAC,KAAKC,IAAI,CAAC;gBAAEC,SAAS;YAAsC;YACtE,QAAQ,oCAAoC;QAC9C;QAEA,qBAAqB;QACrBL,QAAQJ,KAAK,GAAGA;QAChBI,QAAQH,WAAW,GAAGA;QACtBG,QAAQF,KAAK,GAAGA;QAChB,MAAME,QAAQS,IAAI;QAElB,oDAAoD;QACpDjB,IAAIW,MAAM,CAAC,KAAKC,IAAI,CAAC;YAAEC,SAAS;YAAgCL;QAAQ;IAC1E,EAAE,OAAOU,OAAgB;QACvB,yBAAyB;QACzB,IAAIA,iBAAiBC,OAAO;YAC1BnB,IAAIW,MAAM,CAAC,KAAKC,IAAI,CAAC;gBAAEC,SAAS;gBAA0BK,OAAOA,MAAML,OAAO;YAAC;QACjF,OAAO;YACLb,IAAIW,MAAM,CAAC,KAAKC,IAAI,CAAC;gBAAEC,SAAS;gBAA0BK,OAAO;YAAgB;QACnF;IACF;AACF;MAEA,WAAevB"}