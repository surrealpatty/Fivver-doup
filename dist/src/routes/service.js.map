{"version":3,"sources":["../../../src/routes/service.ts"],"sourcesContent":["import express, { Request, Response, NextFunction } from 'express';\r\nimport multer, { FileFilterCallback } from 'multer';\r\nimport Service from '@models/services';  // Ensure this import is correct\r\nimport { body, validationResult } from 'express-validator';\r\nimport { authenticateToken } from '../middlewares/authenticateToken';  // Correct import for authenticateToken\r\nimport { AuthRequest } from '../types/authMiddleware';  // Correctly typed AuthRequest\r\nimport { UserPayload } from 'src/types/index'; // Correct path for your types\r\n\r\nconst router = express.Router();\r\n\r\n// Multer setup for image uploads\r\nconst storage = multer.diskStorage({\r\n  destination: (req, file, cb) => {\r\n    cb(null, 'uploads/'); // Set upload directory\r\n  },\r\n  filename: (req, file, cb) => {\r\n    cb(null, Date.now() + '-' + file.originalname); // Set unique file name\r\n  },\r\n});\r\n\r\n// Define file type and size validation\r\nconst fileFilter = (req: Request, file: Express.Multer.File, cb: FileFilterCallback) => {\r\n  if (file.mimetype.startsWith('image/')) {\r\n    cb(null, true); // Accept image files\r\n  } else {\r\n    // Reject non-image files\r\n    cb(new Error('Invalid file type. Only images are allowed.') as any, false);\r\n  }\r\n};\r\n\r\nconst upload = multer({\r\n  storage,\r\n  fileFilter,\r\n  limits: { fileSize: 5 * 1024 * 1024 }, // Set file size limit (e.g., 5MB)\r\n});\r\n\r\n// Update service route (with image upload)\r\nrouter.put(\r\n  '/update/:serviceId',\r\n  authenticateToken,  // Protect route\r\n  upload.single('image'),  // Handle image upload\r\n  [\r\n    body('name').isLength({ min: 3 }).withMessage('Service name is required'),\r\n    body('description').isLength({ min: 5 }).withMessage('Description is required'),\r\n    body('price').isNumeric().withMessage('Price must be a valid number'),\r\n  ],\r\n  async (req: AuthRequest, res: Response, next: NextFunction): Promise<void> => {  // Use AuthRequest for req typing\r\n    const errors = validationResult(req);\r\n    if (!errors.isEmpty()) {\r\n      res.status(400).json({ errors: errors.array() });  // Return validation errors\r\n      return;\r\n    }\r\n\r\n    const { name, description, price } = req.body;\r\n    const { serviceId } = req.params;\r\n    const userId = req.user?.id;  // Extract user id from the token\r\n\r\n    try {\r\n      // Find the service by ID and check if it belongs to the user\r\n      const service = await Service.findOne({ where: { id: serviceId } });\r\n      if (!service) {\r\n        res.status(404).json({ message: 'Service not found' });\r\n        return;\r\n      }\r\n\r\n      // Ensure the logged-in user owns the service (convert userId to string for comparison)\r\n      if (service.userId !== String(userId)) {  // Convert userId to string for comparison\r\n        res.status(403).json({ message: 'You are not authorized to update this service' });\r\n        return;\r\n      }\r\n\r\n      // Update the service details\r\n      service.name = name;\r\n      service.description = description;\r\n      service.price = price;\r\n\r\n      // Check if an image was uploaded and update the service image path\r\n      if (req.file) {\r\n        service.image = req.file.path; // Assuming you want to store the image path in the database\r\n      }\r\n\r\n      await service.save();\r\n\r\n      res.status(200).json({ message: 'Service updated successfully', service });\r\n    } catch (err) {\r\n      console.error(err);\r\n      res.status(500).json({ message: 'Internal server error' });\r\n    }\r\n  }\r\n);\r\n\r\n// Delete service route\r\nrouter.delete(\r\n  '/delete/:serviceId',\r\n  authenticateToken,  // Protect route\r\n  async (req: AuthRequest, res: Response, next: NextFunction): Promise<void> => {  // Use AuthRequest for req typing\r\n    const { serviceId } = req.params;\r\n    const userId = req.user?.id;  // Extract user id from the token\r\n\r\n    try {\r\n      // Find the service by ID and check if it belongs to the user\r\n      const service = await Service.findOne({ where: { id: serviceId } });\r\n      if (!service) {\r\n        res.status(404).json({ message: 'Service not found' });\r\n        return;\r\n      }\r\n\r\n      // Ensure the logged-in user owns the service (convert userId to string for comparison)\r\n      if (service.userId !== String(userId)) {  // Convert userId to string for comparison\r\n        res.status(403).json({ message: 'You are not authorized to delete this service' });\r\n        return;\r\n      }\r\n\r\n      // Delete the service\r\n      await service.destroy();\r\n\r\n      res.status(200).json({ message: 'Service deleted successfully' });\r\n    } catch (err) {\r\n      console.error(err);\r\n      res.status(500).json({ message: 'Internal server error' });\r\n    }\r\n  }\r\n);\r\n\r\nexport default router;\r\n"],"names":["router","express","Router","storage","multer","diskStorage","destination","req","file","cb","filename","Date","now","originalname","fileFilter","mimetype","startsWith","Error","upload","limits","fileSize","put","authenticateToken","single","body","isLength","min","withMessage","isNumeric","res","next","errors","validationResult","isEmpty","status","json","array","name","description","price","serviceId","params","userId","user","id","service","Service","findOne","where","message","String","image","path","save","err","console","error","delete","destroy"],"mappings":";;;;+BA4HA;;;eAAA;;;gEA5HyD;+DACd;iEACvB;kCACmB;mCACL;;;;;;AAIlC,MAAMA,SAASC,gBAAO,CAACC,MAAM;AAE7B,iCAAiC;AACjC,MAAMC,UAAUC,eAAM,CAACC,WAAW,CAAC;IACjCC,aAAa,CAACC,KAAKC,MAAMC;QACvBA,GAAG,MAAM,aAAa,uBAAuB;IAC/C;IACAC,UAAU,CAACH,KAAKC,MAAMC;QACpBA,GAAG,MAAME,KAAKC,GAAG,KAAK,MAAMJ,KAAKK,YAAY,GAAG,uBAAuB;IACzE;AACF;AAEA,uCAAuC;AACvC,MAAMC,aAAa,CAACP,KAAcC,MAA2BC;IAC3D,IAAID,KAAKO,QAAQ,CAACC,UAAU,CAAC,WAAW;QACtCP,GAAG,MAAM,OAAO,qBAAqB;IACvC,OAAO;QACL,yBAAyB;QACzBA,GAAG,IAAIQ,MAAM,gDAAuD;IACtE;AACF;AAEA,MAAMC,SAASd,IAAAA,eAAM,EAAC;IACpBD;IACAW;IACAK,QAAQ;QAAEC,UAAU,IAAI,OAAO;IAAK;AACtC;AAEA,2CAA2C;AAC3CpB,OAAOqB,GAAG,CACR,sBACAC,oCAAiB,EACjBJ,OAAOK,MAAM,CAAC,UACd;IACEC,IAAAA,sBAAI,EAAC,QAAQC,QAAQ,CAAC;QAAEC,KAAK;IAAE,GAAGC,WAAW,CAAC;IAC9CH,IAAAA,sBAAI,EAAC,eAAeC,QAAQ,CAAC;QAAEC,KAAK;IAAE,GAAGC,WAAW,CAAC;IACrDH,IAAAA,sBAAI,EAAC,SAASI,SAAS,GAAGD,WAAW,CAAC;CACvC,EACD,OAAOpB,KAAkBsB,KAAeC;IACtC,MAAMC,SAASC,IAAAA,kCAAgB,EAACzB;IAChC,IAAI,CAACwB,OAAOE,OAAO,IAAI;QACrBJ,IAAIK,MAAM,CAAC,KAAKC,IAAI,CAAC;YAAEJ,QAAQA,OAAOK,KAAK;QAAG,IAAK,2BAA2B;QAC9E;IACF;IAEA,MAAM,EAAEC,IAAI,EAAEC,WAAW,EAAEC,KAAK,EAAE,GAAGhC,IAAIiB,IAAI;IAC7C,MAAM,EAAEgB,SAAS,EAAE,GAAGjC,IAAIkC,MAAM;IAChC,MAAMC,SAASnC,IAAIoC,IAAI,EAAEC,IAAK,iCAAiC;IAE/D,IAAI;QACF,6DAA6D;QAC7D,MAAMC,UAAU,MAAMC,iBAAO,CAACC,OAAO,CAAC;YAAEC,OAAO;gBAAEJ,IAAIJ;YAAU;QAAE;QACjE,IAAI,CAACK,SAAS;YACZhB,IAAIK,MAAM,CAAC,KAAKC,IAAI,CAAC;gBAAEc,SAAS;YAAoB;YACpD;QACF;QAEA,uFAAuF;QACvF,IAAIJ,QAAQH,MAAM,KAAKQ,OAAOR,SAAS;YACrCb,IAAIK,MAAM,CAAC,KAAKC,IAAI,CAAC;gBAAEc,SAAS;YAAgD;YAChF;QACF;QAEA,6BAA6B;QAC7BJ,QAAQR,IAAI,GAAGA;QACfQ,QAAQP,WAAW,GAAGA;QACtBO,QAAQN,KAAK,GAAGA;QAEhB,mEAAmE;QACnE,IAAIhC,IAAIC,IAAI,EAAE;YACZqC,QAAQM,KAAK,GAAG5C,IAAIC,IAAI,CAAC4C,IAAI,EAAE,4DAA4D;QAC7F;QAEA,MAAMP,QAAQQ,IAAI;QAElBxB,IAAIK,MAAM,CAAC,KAAKC,IAAI,CAAC;YAAEc,SAAS;YAAgCJ;QAAQ;IAC1E,EAAE,OAAOS,KAAK;QACZC,QAAQC,KAAK,CAACF;QACdzB,IAAIK,MAAM,CAAC,KAAKC,IAAI,CAAC;YAAEc,SAAS;QAAwB;IAC1D;AACF;AAGF,uBAAuB;AACvBjD,OAAOyD,MAAM,CACX,sBACAnC,oCAAiB,EACjB,OAAOf,KAAkBsB,KAAeC;IACtC,MAAM,EAAEU,SAAS,EAAE,GAAGjC,IAAIkC,MAAM;IAChC,MAAMC,SAASnC,IAAIoC,IAAI,EAAEC,IAAK,iCAAiC;IAE/D,IAAI;QACF,6DAA6D;QAC7D,MAAMC,UAAU,MAAMC,iBAAO,CAACC,OAAO,CAAC;YAAEC,OAAO;gBAAEJ,IAAIJ;YAAU;QAAE;QACjE,IAAI,CAACK,SAAS;YACZhB,IAAIK,MAAM,CAAC,KAAKC,IAAI,CAAC;gBAAEc,SAAS;YAAoB;YACpD;QACF;QAEA,uFAAuF;QACvF,IAAIJ,QAAQH,MAAM,KAAKQ,OAAOR,SAAS;YACrCb,IAAIK,MAAM,CAAC,KAAKC,IAAI,CAAC;gBAAEc,SAAS;YAAgD;YAChF;QACF;QAEA,qBAAqB;QACrB,MAAMJ,QAAQa,OAAO;QAErB7B,IAAIK,MAAM,CAAC,KAAKC,IAAI,CAAC;YAAEc,SAAS;QAA+B;IACjE,EAAE,OAAOK,KAAK;QACZC,QAAQC,KAAK,CAACF;QACdzB,IAAIK,MAAM,CAAC,KAAKC,IAAI,CAAC;YAAEc,SAAS;QAAwB;IAC1D;AACF;MAGF,WAAejD"}