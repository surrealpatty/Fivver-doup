{"version":3,"sources":["../../../src/routes/dashboard.ts"],"sourcesContent":["// src/routes/dashboard.ts\r\nimport { Router, Request, Response, NextFunction } from 'express';\r\nimport { authenticateToken } from '../middlewares/authMiddleware';  // Correct path\r\n\r\nconst router = Router();\r\n\r\n// GET route for the dashboard\r\nrouter.get('/dashboard', authenticateToken, async (req: Request, res: Response, next: NextFunction): Promise<void> => {\r\n  try {\r\n    if (req.user) {\r\n      // Logic to fetch dashboard data (e.g., user services, ratings, etc.)\r\n      res.status(200).json({ message: 'Dashboard data fetched successfully.' });\r\n    } else {\r\n      res.status(400).json({ message: 'User not authenticated.' });\r\n    }\r\n  } catch (err) {\r\n    next(err); // Pass errors to the error handler\r\n  }\r\n});\r\n\r\nexport default router;\r\n"],"names":["router","Router","get","authenticateToken","req","res","next","user","status","json","message","err"],"mappings":"AAAA,0BAA0B;;;;;+BAoB1B;;;eAAA;;;yBAnBwD;gCACtB;AAElC,MAAMA,SAASC,IAAAA,eAAM;AAErB,8BAA8B;AAC9BD,OAAOE,GAAG,CAAC,cAAcC,iCAAiB,EAAE,OAAOC,KAAcC,KAAeC;IAC9E,IAAI;QACF,IAAIF,IAAIG,IAAI,EAAE;YACZ,qEAAqE;YACrEF,IAAIG,MAAM,CAAC,KAAKC,IAAI,CAAC;gBAAEC,SAAS;YAAuC;QACzE,OAAO;YACLL,IAAIG,MAAM,CAAC,KAAKC,IAAI,CAAC;gBAAEC,SAAS;YAA0B;QAC5D;IACF,EAAE,OAAOC,KAAK;QACZL,KAAKK,MAAM,mCAAmC;IAChD;AACF;MAEA,WAAeX"}