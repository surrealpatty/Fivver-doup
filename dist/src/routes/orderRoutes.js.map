{"version":3,"sources":["../../../src/routes/orderRoutes.ts"],"sourcesContent":["import express, { Request, Response } from 'express';\r\nimport {\r\n  createOrder,\r\n  getAllOrders,\r\n  getOrderById,\r\n  updateOrder,\r\n  deleteOrder,\r\n} from '../controllers/orderController';  // Ensure the correct path to controller\r\n\r\nconst router = express.Router();\r\n\r\n// Define the request body type for createOrder\r\ninterface CreateOrderRequest {\r\n  userId: number;\r\n  serviceId: number;\r\n  orderDetails: string;\r\n  status: string;\r\n}\r\n\r\n// Route to create an order\r\nrouter.post(\r\n  '/',\r\n  async (req: Request<{}, {}, CreateOrderRequest>, res: Response) => {\r\n    try {\r\n      await createOrder(req, res);\r\n    } catch (err) {\r\n      res.status(500).json({ error: 'Internal server error' });\r\n    }\r\n  }\r\n);\r\n\r\n// Route to get all orders\r\nrouter.get(\r\n  '/',\r\n  async (req: Request, res: Response) => {\r\n    try {\r\n      await getAllOrders(req, res);\r\n    } catch (err) {\r\n      res.status(500).json({ error: 'Internal server error' });\r\n    }\r\n  }\r\n);\r\n\r\n// Route to get an order by its ID\r\nrouter.get('/:id', async (req: Request, res: Response) => {\r\n  try {\r\n    await getOrderById(req, res);\r\n  } catch (err) {\r\n    res.status(500).json({ error: 'Internal server error' });\r\n  }\r\n});\r\n\r\n// Route to update an order by its ID\r\nrouter.put('/:id', async (req: Request, res: Response) => {\r\n  try {\r\n    await updateOrder(req, res);\r\n  } catch (err) {\r\n    res.status(500).json({ error: 'Internal server error' });\r\n  }\r\n});\r\n\r\n// Route to delete an order by its ID\r\nrouter.delete('/:id', async (req: Request, res: Response) => {\r\n  try {\r\n    await deleteOrder(req, res);\r\n  } catch (err) {\r\n    res.status(500).json({ error: 'Internal server error' });\r\n  }\r\n});\r\n\r\nexport default router;\r\n"],"names":["router","express","Router","post","req","res","createOrder","err","status","json","error","get","getAllOrders","getOrderById","put","updateOrder","delete","deleteOrder"],"mappings":";;;;+BAsEA;;;eAAA;;;gEAtE2C;iCAOpC;;;;;;AAEP,MAAMA,SAASC,gBAAO,CAACC,MAAM;AAU7B,2BAA2B;AAC3BF,OAAOG,IAAI,CACT,KACA,OAAOC,KAA0CC;IAC/C,IAAI;QACF,MAAMC,IAAAA,4BAAW,EAACF,KAAKC;IACzB,EAAE,OAAOE,KAAK;QACZF,IAAIG,MAAM,CAAC,KAAKC,IAAI,CAAC;YAAEC,OAAO;QAAwB;IACxD;AACF;AAGF,0BAA0B;AAC1BV,OAAOW,GAAG,CACR,KACA,OAAOP,KAAcC;IACnB,IAAI;QACF,MAAMO,IAAAA,6BAAY,EAACR,KAAKC;IAC1B,EAAE,OAAOE,KAAK;QACZF,IAAIG,MAAM,CAAC,KAAKC,IAAI,CAAC;YAAEC,OAAO;QAAwB;IACxD;AACF;AAGF,kCAAkC;AAClCV,OAAOW,GAAG,CAAC,QAAQ,OAAOP,KAAcC;IACtC,IAAI;QACF,MAAMQ,IAAAA,6BAAY,EAACT,KAAKC;IAC1B,EAAE,OAAOE,KAAK;QACZF,IAAIG,MAAM,CAAC,KAAKC,IAAI,CAAC;YAAEC,OAAO;QAAwB;IACxD;AACF;AAEA,qCAAqC;AACrCV,OAAOc,GAAG,CAAC,QAAQ,OAAOV,KAAcC;IACtC,IAAI;QACF,MAAMU,IAAAA,4BAAW,EAACX,KAAKC;IACzB,EAAE,OAAOE,KAAK;QACZF,IAAIG,MAAM,CAAC,KAAKC,IAAI,CAAC;YAAEC,OAAO;QAAwB;IACxD;AACF;AAEA,qCAAqC;AACrCV,OAAOgB,MAAM,CAAC,QAAQ,OAAOZ,KAAcC;IACzC,IAAI;QACF,MAAMY,IAAAA,4BAAW,EAACb,KAAKC;IACzB,EAAE,OAAOE,KAAK;QACZF,IAAIG,MAAM,CAAC,KAAKC,IAAI,CAAC;YAAEC,OAAO;QAAwB;IACxD;AACF;MAEA,WAAeV"}