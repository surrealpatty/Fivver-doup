{"version":3,"sources":["../../../src/routes/orderRoutes.ts"],"sourcesContent":["// src/routes/orderRoutes.ts\r\n\r\nimport express, { Request, Response, RequestHandler } from 'express';\r\nimport { createOrder, getAllOrders, getOrderById, updateOrder, deleteOrder } from '../controllers/orderController';\r\n// Correct the import path to point to the correct `types` directory\r\nimport { UserPayload } from '../types';  // Import from the correct relative path\r\n\r\nconst router = express.Router();\r\n\r\n// Define the request body type for createOrder\r\ninterface CreateOrderRequest {\r\n  userId: number;\r\n  serviceId: number;\r\n  orderDetails: string;\r\n  status: string;\r\n}\r\n\r\n// Extend the Request interface to include the user property of type UserPayload\r\ninterface OrderRequest extends Request {\r\n  user?: UserPayload;  // Make sure the `user` property is available and optional\r\n}\r\n\r\n// Define the handler types\r\nconst createOrderHandler: RequestHandler<{}, {}, CreateOrderRequest> = async (req: OrderRequest, res: Response) => {\r\n  try {\r\n    await createOrder(req, res);\r\n  } catch (err) {\r\n    res.status(500).json({ error: 'Internal server error' });\r\n  }\r\n};\r\n\r\n// Route to create an order\r\nrouter.post('/', createOrderHandler);\r\n\r\n// Other routes follow the same pattern...\r\n\r\nexport default router;\r\n"],"names":["router","express","Router","createOrderHandler","req","res","createOrder","err","status","json","error","post"],"mappings":"AAAA,4BAA4B;;;;;+BAkC5B,0CAA0C;AAE1C;;;eAAA;;;gEAlC2D;iCACuB;;;;;;AAIlF,MAAMA,SAASC,gBAAO,CAACC,MAAM;AAe7B,2BAA2B;AAC3B,MAAMC,qBAAiE,OAAOC,KAAmBC;IAC/F,IAAI;QACF,MAAMC,IAAAA,4BAAW,EAACF,KAAKC;IACzB,EAAE,OAAOE,KAAK;QACZF,IAAIG,MAAM,CAAC,KAAKC,IAAI,CAAC;YAAEC,OAAO;QAAwB;IACxD;AACF;AAEA,2BAA2B;AAC3BV,OAAOW,IAAI,CAAC,KAAKR;MAIjB,WAAeH"}