{"version":3,"sources":["../../../src/routes/profile.ts"],"sourcesContent":["import express, { Request, Response, NextFunction } from 'express';  // Import necessary types\r\nimport Service from '@models/services';  // Ensure correct import for Service model\r\nimport { User } from '@models/user';  // Assuming there is a User model for user details\r\nimport { authenticateToken } from '../middlewares/authenticateToken';  // Correct import\r\nimport { AuthRequest } from '../types/authMiddleware';  // Correctly typed AuthRequest if needed\r\n\r\nconst router = express.Router();\r\n\r\n// Profile route to get the user's info and their services\r\nrouter.get('/profile', authenticateToken, async (req: AuthRequest, res: Response, next: NextFunction): Promise<void> => {\r\n  const userId = req.user?.id;  // Get user ID from the authenticated token\r\n\r\n  if (!userId) {\r\n    res.status(400).json({ message: 'User ID not found in token' });\r\n    return;\r\n  }\r\n\r\n  try {\r\n    // Fetch the user information and their services\r\n    const user = await User.findOne({ where: { id: userId } });\r\n    if (!user) {\r\n      res.status(404).json({ message: 'User not found' });\r\n      return;\r\n    }\r\n\r\n    const services = await Service.findAll({ where: { userId } });\r\n\r\n    res.status(200).json({\r\n      message: 'User profile retrieved successfully',\r\n      user: {\r\n        id: user.id,\r\n        username: user.username,\r\n        email: user.email,  // Include relevant user details\r\n      },\r\n      services,  // Include user's services\r\n    });\r\n  } catch (err) {\r\n    console.error(err);\r\n    next(err);  // Pass error to the next middleware (error handler)\r\n  }\r\n});\r\n\r\n// Profile update route to allow users to update their profile information\r\nrouter.put('/profile', authenticateToken, async (req: AuthRequest, res: Response, next: NextFunction): Promise<void> => {  // Changed to authenticateToken\r\n  const userId = req.user?.id; // Get user ID from the authenticated token\r\n\r\n  if (!userId) {\r\n    res.status(400).json({ message: 'User ID not found in token' });\r\n    return;\r\n  }\r\n\r\n  const { username, email } = req.body;  // You can add other fields as needed\r\n\r\n  try {\r\n    // Find the user by ID and update their details\r\n    const user = await User.findOne({ where: { id: userId } });\r\n    if (!user) {\r\n      res.status(404).json({ message: 'User not found' });\r\n      return;\r\n    }\r\n\r\n    // Update user details\r\n    if (username) user.username = username;\r\n    if (email) user.email = email;\r\n\r\n    await user.save();\r\n\r\n    res.status(200).json({\r\n      message: 'User profile updated successfully',\r\n      user: {\r\n        id: user.id,\r\n        username: user.username,\r\n        email: user.email,  // Return updated user info\r\n      },\r\n    });\r\n  } catch (err) {\r\n    console.error(err);\r\n    next(err);  // Pass error to the next middleware (error handler)\r\n  }\r\n});\r\n\r\nexport default router;\r\n"],"names":["router","express","Router","get","authenticateToken","req","res","next","userId","user","id","status","json","message","User","findOne","where","services","Service","findAll","username","email","err","console","error","put","body","save"],"mappings":";;;;+BAiFA;;;eAAA;;;gEAjFyD;iEACrC;sBACC;mCACa;;;;;;AAGlC,MAAMA,SAASC,gBAAO,CAACC,MAAM;AAE7B,0DAA0D;AAC1DF,OAAOG,GAAG,CAAC,YAAYC,oCAAiB,EAAE,OAAOC,KAAkBC,KAAeC;IAChF,MAAMC,SAASH,IAAII,IAAI,EAAEC,IAAK,2CAA2C;IAEzE,IAAI,CAACF,QAAQ;QACXF,IAAIK,MAAM,CAAC,KAAKC,IAAI,CAAC;YAAEC,SAAS;QAA6B;QAC7D;IACF;IAEA,IAAI;QACF,gDAAgD;QAChD,MAAMJ,OAAO,MAAMK,UAAI,CAACC,OAAO,CAAC;YAAEC,OAAO;gBAAEN,IAAIF;YAAO;QAAE;QACxD,IAAI,CAACC,MAAM;YACTH,IAAIK,MAAM,CAAC,KAAKC,IAAI,CAAC;gBAAEC,SAAS;YAAiB;YACjD;QACF;QAEA,MAAMI,WAAW,MAAMC,iBAAO,CAACC,OAAO,CAAC;YAAEH,OAAO;gBAAER;YAAO;QAAE;QAE3DF,IAAIK,MAAM,CAAC,KAAKC,IAAI,CAAC;YACnBC,SAAS;YACTJ,MAAM;gBACJC,IAAID,KAAKC,EAAE;gBACXU,UAAUX,KAAKW,QAAQ;gBACvBC,OAAOZ,KAAKY,KAAK;YACnB;YACAJ;QACF;IACF,EAAE,OAAOK,KAAK;QACZC,QAAQC,KAAK,CAACF;QACdf,KAAKe,MAAO,oDAAoD;IAClE;AACF;AAEA,0EAA0E;AAC1EtB,OAAOyB,GAAG,CAAC,YAAYrB,oCAAiB,EAAE,OAAOC,KAAkBC,KAAeC;IAChF,MAAMC,SAASH,IAAII,IAAI,EAAEC,IAAI,2CAA2C;IAExE,IAAI,CAACF,QAAQ;QACXF,IAAIK,MAAM,CAAC,KAAKC,IAAI,CAAC;YAAEC,SAAS;QAA6B;QAC7D;IACF;IAEA,MAAM,EAAEO,QAAQ,EAAEC,KAAK,EAAE,GAAGhB,IAAIqB,IAAI,EAAG,qCAAqC;IAE5E,IAAI;QACF,+CAA+C;QAC/C,MAAMjB,OAAO,MAAMK,UAAI,CAACC,OAAO,CAAC;YAAEC,OAAO;gBAAEN,IAAIF;YAAO;QAAE;QACxD,IAAI,CAACC,MAAM;YACTH,IAAIK,MAAM,CAAC,KAAKC,IAAI,CAAC;gBAAEC,SAAS;YAAiB;YACjD;QACF;QAEA,sBAAsB;QACtB,IAAIO,UAAUX,KAAKW,QAAQ,GAAGA;QAC9B,IAAIC,OAAOZ,KAAKY,KAAK,GAAGA;QAExB,MAAMZ,KAAKkB,IAAI;QAEfrB,IAAIK,MAAM,CAAC,KAAKC,IAAI,CAAC;YACnBC,SAAS;YACTJ,MAAM;gBACJC,IAAID,KAAKC,EAAE;gBACXU,UAAUX,KAAKW,QAAQ;gBACvBC,OAAOZ,KAAKY,KAAK;YACnB;QACF;IACF,EAAE,OAAOC,KAAK;QACZC,QAAQC,KAAK,CAACF;QACdf,KAAKe,MAAO,oDAAoD;IAClE;AACF;MAEA,WAAetB"}