{"version":3,"sources":["../../../src/routes/auth.ts"],"sourcesContent":["// src/routes/auth.ts\r\nimport { Router, Request, Response } from 'express';\r\nimport bcrypt from 'bcryptjs'; // Assuming bcrypt is used for password hashing\r\nimport jwt from 'jsonwebtoken';\r\nimport { User } from '../models/user';  // Correct path to the User model\r\nimport { AuthRequest } from '../types';  // Importing AuthRequest for type safety\r\nimport dotenv from 'dotenv';\r\n\r\ndotenv.config(); // Load environment variables from .env\r\n\r\nconst router = Router();\r\n\r\n// Login Route (for generating JWT)\r\nrouter.post('/login', async (req: Request, res: Response) => {\r\n  const { email, password } = req.body;\r\n\r\n  try {\r\n    // Find the user by email\r\n    const user = await User.findOne({ where: { email } });\r\n    if (!user) {\r\n      return res.status(404).json({ message: 'User not found.' });\r\n    }\r\n\r\n    // Compare password with hashed password stored in the database\r\n    const isMatch = await bcrypt.compare(password, user.password);\r\n    if (!isMatch) {\r\n      return res.status(400).json({ message: 'Invalid credentials.' });\r\n    }\r\n\r\n    // Generate JWT token if credentials are valid\r\n    const payload = {\r\n      id: user.id,\r\n      email: user.email,\r\n      username: user.username,\r\n      role: user.role,\r\n      tier: user.tier,\r\n    };\r\n\r\n    const token = jwt.sign(payload, process.env.JWT_SECRET!, { expiresIn: '1h' }); // 1 hour expiration\r\n\r\n    // Send the token to the client\r\n    res.json({ message: 'Login successful', token });\r\n  } catch (error) {\r\n    console.error(error);\r\n    res.status(500).json({ message: 'Server error' });\r\n  }\r\n});\r\n\r\n// Protected Route Example: Access profile with JWT\r\nrouter.get('/profile', authenticateJWT, (req: AuthRequest, res: Response) => {\r\n  // Access user info from the request\r\n  const user = req.user;\r\n  if (!user) {\r\n    return res.status(403).json({ message: 'Access denied. No user found.' });\r\n  }\r\n  res.json({ message: 'Welcome to your profile', user });\r\n});\r\n\r\n// Export router to use in the main app\r\nexport default router;\r\n"],"names":["dotenv","config","router","Router","post","req","res","email","password","body","user","User","findOne","where","status","json","message","isMatch","bcrypt","compare","payload","id","username","role","tier","token","jwt","sign","process","env","JWT_SECRET","expiresIn","error","console","get","authenticateJWT"],"mappings":"AAAA,qBAAqB;;;;;+BA0DrB,uCAAuC;AACvC;;;eAAA;;;yBA1D0C;iEACvB;qEACH;sBACK;+DAEF;;;;;;AAEnBA,eAAM,CAACC,MAAM,IAAI,uCAAuC;AAExD,MAAMC,SAASC,IAAAA,eAAM;AAErB,mCAAmC;AACnCD,OAAOE,IAAI,CAAC,UAAU,OAAOC,KAAcC;IACzC,MAAM,EAAEC,KAAK,EAAEC,QAAQ,EAAE,GAAGH,IAAII,IAAI;IAEpC,IAAI;QACF,yBAAyB;QACzB,MAAMC,OAAO,MAAMC,UAAI,CAACC,OAAO,CAAC;YAAEC,OAAO;gBAAEN;YAAM;QAAE;QACnD,IAAI,CAACG,MAAM;YACT,OAAOJ,IAAIQ,MAAM,CAAC,KAAKC,IAAI,CAAC;gBAAEC,SAAS;YAAkB;QAC3D;QAEA,+DAA+D;QAC/D,MAAMC,UAAU,MAAMC,iBAAM,CAACC,OAAO,CAACX,UAAUE,KAAKF,QAAQ;QAC5D,IAAI,CAACS,SAAS;YACZ,OAAOX,IAAIQ,MAAM,CAAC,KAAKC,IAAI,CAAC;gBAAEC,SAAS;YAAuB;QAChE;QAEA,8CAA8C;QAC9C,MAAMI,UAAU;YACdC,IAAIX,KAAKW,EAAE;YACXd,OAAOG,KAAKH,KAAK;YACjBe,UAAUZ,KAAKY,QAAQ;YACvBC,MAAMb,KAAKa,IAAI;YACfC,MAAMd,KAAKc,IAAI;QACjB;QAEA,MAAMC,QAAQC,qBAAG,CAACC,IAAI,CAACP,SAASQ,QAAQC,GAAG,CAACC,UAAU,EAAG;YAAEC,WAAW;QAAK,IAAI,oBAAoB;QAEnG,+BAA+B;QAC/BzB,IAAIS,IAAI,CAAC;YAAEC,SAAS;YAAoBS;QAAM;IAChD,EAAE,OAAOO,OAAO;QACdC,QAAQD,KAAK,CAACA;QACd1B,IAAIQ,MAAM,CAAC,KAAKC,IAAI,CAAC;YAAEC,SAAS;QAAe;IACjD;AACF;AAEA,mDAAmD;AACnDd,OAAOgC,GAAG,CAAC,YAAYC,iBAAiB,CAAC9B,KAAkBC;IACzD,oCAAoC;IACpC,MAAMI,OAAOL,IAAIK,IAAI;IACrB,IAAI,CAACA,MAAM;QACT,OAAOJ,IAAIQ,MAAM,CAAC,KAAKC,IAAI,CAAC;YAAEC,SAAS;QAAgC;IACzE;IACAV,IAAIS,IAAI,CAAC;QAAEC,SAAS;QAA2BN;IAAK;AACtD;MAGA,WAAeR"}