{"version":3,"sources":["../../../src/test/orderController.ts"],"sourcesContent":["// src/test/orderController.ts\r\nimport { Request, Response, NextFunction } from 'express';\r\nimport { authenticateToken } from '../middlewares/authMiddleware'; // Correct import for authenticateToken\r\nimport { UserPayload } from '../types'; // Correct import for UserPayload\r\n\r\n// Mock request and response functions\r\nconst mockRequest = (userPayload: UserPayload) => ({\r\n  headers: { authorization: 'Bearer valid-token' }, // Mock authorization header\r\n  user: userPayload, // Attach mock user payload to the request\r\n} as Request);\r\n\r\nconst mockResponse = () => {\r\n  const res: any = {};  // Create a mock response object\r\n  res.status = jest.fn().mockReturnValue(res); // Mock status method\r\n  res.json = jest.fn().mockReturnValue(res);   // Mock json method\r\n  return res;\r\n};\r\n\r\ndescribe('Order Controller Tests', () => {\r\n  it('should authenticate the user correctly', () => {\r\n    // Create a userPayload that satisfies the UserPayload interface\r\n    const userPayload: UserPayload = {\r\n      id: 'userId',\r\n      email: 'user@example.com',\r\n      username: 'user123', // Ensure the username is included\r\n      tier: 'free',\r\n    };\r\n\r\n    // Mock request, response, and next function\r\n    const req = mockRequest(userPayload); // Create a mock request\r\n    const res = mockResponse();           // Create a mock response\r\n    const next = jest.fn();               // Create a mock next function\r\n\r\n    authenticateToken(req, res, next); // Call the middleware\r\n\r\n    // Check that user data is attached to req.user\r\n    expect(req.user).toEqual(userPayload);\r\n    expect(next).toHaveBeenCalled(); // Ensure next is called\r\n  });\r\n\r\n  it('should return 401 if no token is provided', () => {\r\n    const req = mockRequest({} as UserPayload); // No user payload\r\n    const res = mockResponse();\r\n    const next = jest.fn();\r\n\r\n    req.headers['authorization'] = ''; // Empty token\r\n\r\n    authenticateToken(req, res, next); // Call the middleware\r\n\r\n    expect(res.status).toHaveBeenCalledWith(401); // Expect 401 response\r\n    expect(res.json).toHaveBeenCalledWith({ message: 'Access denied, no token provided.' });\r\n    expect(next).not.toHaveBeenCalled(); // Ensure next is not called\r\n  });\r\n});\r\n"],"names":["mockRequest","userPayload","headers","authorization","user","mockResponse","res","status","jest","fn","mockReturnValue","json","describe","it","id","email","username","tier","req","next","authenticateToken","expect","toEqual","toHaveBeenCalled","toHaveBeenCalledWith","message","not"],"mappings":"AAAA,8BAA8B;;;;;gCAEI;AAGlC,sCAAsC;AACtC,MAAMA,cAAc,CAACC,cAA8B,CAAA;QACjDC,SAAS;YAAEC,eAAe;QAAqB;QAC/CC,MAAMH;IACR,CAAA;AAEA,MAAMI,eAAe;IACnB,MAAMC,MAAW,CAAC,GAAI,gCAAgC;IACtDA,IAAIC,MAAM,GAAGC,KAAKC,EAAE,GAAGC,eAAe,CAACJ,MAAM,qBAAqB;IAClEA,IAAIK,IAAI,GAAGH,KAAKC,EAAE,GAAGC,eAAe,CAACJ,MAAQ,mBAAmB;IAChE,OAAOA;AACT;AAEAM,SAAS,0BAA0B;IACjCC,GAAG,0CAA0C;QAC3C,gEAAgE;QAChE,MAAMZ,cAA2B;YAC/Ba,IAAI;YACJC,OAAO;YACPC,UAAU;YACVC,MAAM;QACR;QAEA,4CAA4C;QAC5C,MAAMC,MAAMlB,YAAYC,cAAc,wBAAwB;QAC9D,MAAMK,MAAMD,gBAA0B,yBAAyB;QAC/D,MAAMc,OAAOX,KAAKC,EAAE,IAAkB,8BAA8B;QAEpEW,IAAAA,iCAAiB,EAACF,KAAKZ,KAAKa,OAAO,sBAAsB;QAEzD,+CAA+C;QAC/CE,OAAOH,IAAId,IAAI,EAAEkB,OAAO,CAACrB;QACzBoB,OAAOF,MAAMI,gBAAgB,IAAI,wBAAwB;IAC3D;IAEAV,GAAG,6CAA6C;QAC9C,MAAMK,MAAMlB,YAAY,CAAC,IAAmB,kBAAkB;QAC9D,MAAMM,MAAMD;QACZ,MAAMc,OAAOX,KAAKC,EAAE;QAEpBS,IAAIhB,OAAO,CAAC,gBAAgB,GAAG,IAAI,cAAc;QAEjDkB,IAAAA,iCAAiB,EAACF,KAAKZ,KAAKa,OAAO,sBAAsB;QAEzDE,OAAOf,IAAIC,MAAM,EAAEiB,oBAAoB,CAAC,MAAM,sBAAsB;QACpEH,OAAOf,IAAIK,IAAI,EAAEa,oBAAoB,CAAC;YAAEC,SAAS;QAAoC;QACrFJ,OAAOF,MAAMO,GAAG,CAACH,gBAAgB,IAAI,4BAA4B;IACnE;AACF"}