{"version":3,"sources":["../../../src/test/math.test.ts"],"sourcesContent":["// src/test/math.test.ts\r\n\r\ndescribe('Math Functions', () => {\r\n\r\n  const mockUsers = [\r\n    {\r\n      id: '1',\r\n      username: 'user1',\r\n      email: 'user1@example.com',\r\n    },\r\n    {\r\n      id: '2',\r\n      username: 'user2',\r\n      email: 'user2@example.com',\r\n    },\r\n    // Add more mock users as needed\r\n  ];\r\n\r\n  it('should perform basic arithmetic correctly', () => {\r\n    const result = 2 + 2;\r\n    expect(result).toBe(4);  // Basic addition test\r\n  });\r\n\r\n  it('should fetch the user correctly from mock data', async () => {\r\n    const user = mockUsers[0]; // Fetch the first user from the mock data\r\n    expect(user).toEqual(mockUsers[0]); // Ensure it matches the mock data\r\n  });\r\n\r\n  it('should handle invalid user id gracefully', async () => {\r\n    // Simulate an invalid user (ID not found)\r\n    const user = mockUsers.find((u) => u.id === '999'); // Assume `id` is a property of the mock user\r\n    expect(user).toBeUndefined();  // Expect that no user is found\r\n  });\r\n\r\n});\r\n"],"names":["describe","mockUsers","id","username","email","it","result","expect","toBe","user","toEqual","find","u","toBeUndefined"],"mappings":"AAAA,wBAAwB;;AAExBA,SAAS,kBAAkB;IAEzB,MAAMC,YAAY;QAChB;YACEC,IAAI;YACJC,UAAU;YACVC,OAAO;QACT;QACA;YACEF,IAAI;YACJC,UAAU;YACVC,OAAO;QACT;KAED;IAEDC,GAAG,6CAA6C;QAC9C,MAAMC,SAAS,IAAI;QACnBC,OAAOD,QAAQE,IAAI,CAAC,IAAK,sBAAsB;IACjD;IAEAH,GAAG,kDAAkD;QACnD,MAAMI,OAAOR,SAAS,CAAC,EAAE,EAAE,0CAA0C;QACrEM,OAAOE,MAAMC,OAAO,CAACT,SAAS,CAAC,EAAE,GAAG,kCAAkC;IACxE;IAEAI,GAAG,4CAA4C;QAC7C,0CAA0C;QAC1C,MAAMI,OAAOR,UAAUU,IAAI,CAAC,CAACC,IAAMA,EAAEV,EAAE,KAAK,QAAQ,6CAA6C;QACjGK,OAAOE,MAAMI,aAAa,IAAK,+BAA+B;IAChE;AAEF"}