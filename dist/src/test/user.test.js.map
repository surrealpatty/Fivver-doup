{"version":3,"sources":["../../../src/test/user.test.ts"],"sourcesContent":["import request from 'supertest';\r\nimport { app } from '../index';  // Ensure you're importing your Express app\r\n\r\n// Mocking the User model to mock the create function for testing\r\nimport { User } from '../models/user'; \r\njest.mock('../models/user', () => ({\r\n  User: {\r\n    create: jest.fn(),\r\n  },\r\n}));\r\n\r\ndescribe('POST /register', () => {\r\n  beforeEach(() => {\r\n    jest.clearAllMocks(); // Clear mocks before each test to avoid conflicts\r\n  });\r\n\r\n  it('should register a new user successfully', async () => {\r\n    // Mock the User.create method\r\n    (User.create as jest.Mock).mockResolvedValueOnce({\r\n      id: '1',\r\n      email: 'newuser@example.com',\r\n      username: 'newuser',\r\n      password: 'password123',\r\n    });\r\n\r\n    // Send request to the /register route\r\n    const res = await request(app)\r\n      .post('/register')\r\n      .send({\r\n        email: 'newuser@example.com',\r\n        username: 'newuser',\r\n        password: 'password123',\r\n      });\r\n\r\n    // Assertions\r\n    expect(res.status).toBe(201);  // Expect HTTP 201 (Created)\r\n    expect(res.body.message).toBe('User registered successfully');  // Response message\r\n    expect(res.body.user).toEqual({\r\n      id: '1',\r\n      email: 'newuser@example.com',\r\n      username: 'newuser',\r\n      password: 'password123',  // Ensure the mocked password is correct\r\n    });\r\n  });\r\n\r\n  it('should return an error if email or username is already in use', async () => {\r\n    // Mock the User.create method to simulate an existing user\r\n    (User.create as jest.Mock).mockRejectedValueOnce(new Error('User already exists'));\r\n\r\n    const res = await request(app)\r\n      .post('/register')\r\n      .send({\r\n        email: 'existinguser@example.com',\r\n        username: 'existinguser',\r\n        password: 'password123',\r\n      });\r\n\r\n    // Assertions\r\n    expect(res.status).toBe(400);  // Expect HTTP 400 (Bad Request)\r\n    expect(res.body.message).toBe('Email or Username already in use');\r\n  });\r\n\r\n  it('should return a validation error for invalid email', async () => {\r\n    const res = await request(app)\r\n      .post('/register')\r\n      .send({\r\n        email: 'invalid-email',\r\n        username: 'newuser',\r\n        password: 'password123',\r\n      });\r\n\r\n    // Assertions\r\n    expect(res.status).toBe(400);  // Expect HTTP 400 (Bad Request)\r\n    expect(res.body.errors[0].msg).toBe('Invalid email address');  // Validation error message\r\n  });\r\n\r\n  it('should return a validation error for missing username', async () => {\r\n    const res = await request(app)\r\n      .post('/register')\r\n      .send({\r\n        email: 'newuser@example.com',\r\n        password: 'password123',\r\n      });\r\n\r\n    // Assertions\r\n    expect(res.status).toBe(400);  // Expect HTTP 400 (Bad Request)\r\n    expect(res.body.errors[0].msg).toBe('Username must be between 3 and 20 characters');  // Username error\r\n  });\r\n});\r\n"],"names":["jest","mock","User","create","fn","describe","beforeEach","clearAllMocks","it","mockResolvedValueOnce","id","email","username","password","res","request","app","post","send","expect","status","toBe","body","message","user","toEqual","mockRejectedValueOnce","Error","errors","msg"],"mappings":";;;;kEAAoB;uBACA;sBAGC;;;;;;AACrBA,KAAKC,IAAI,CAAC,kBAAkB,IAAO,CAAA;QACjCC,MAAM;YACJC,QAAQH,KAAKI,EAAE;QACjB;IACF,CAAA;AAEAC,SAAS,kBAAkB;IACzBC,WAAW;QACTN,KAAKO,aAAa,IAAI,kDAAkD;IAC1E;IAEAC,GAAG,2CAA2C;QAC5C,8BAA8B;QAC7BN,UAAI,CAACC,MAAM,CAAeM,qBAAqB,CAAC;YAC/CC,IAAI;YACJC,OAAO;YACPC,UAAU;YACVC,UAAU;QACZ;QAEA,sCAAsC;QACtC,MAAMC,MAAM,MAAMC,IAAAA,kBAAO,EAACC,UAAG,EAC1BC,IAAI,CAAC,aACLC,IAAI,CAAC;YACJP,OAAO;YACPC,UAAU;YACVC,UAAU;QACZ;QAEF,aAAa;QACbM,OAAOL,IAAIM,MAAM,EAAEC,IAAI,CAAC,MAAO,4BAA4B;QAC3DF,OAAOL,IAAIQ,IAAI,CAACC,OAAO,EAAEF,IAAI,CAAC,iCAAkC,mBAAmB;QACnFF,OAAOL,IAAIQ,IAAI,CAACE,IAAI,EAAEC,OAAO,CAAC;YAC5Bf,IAAI;YACJC,OAAO;YACPC,UAAU;YACVC,UAAU;QACZ;IACF;IAEAL,GAAG,iEAAiE;QAClE,2DAA2D;QAC1DN,UAAI,CAACC,MAAM,CAAeuB,qBAAqB,CAAC,IAAIC,MAAM;QAE3D,MAAMb,MAAM,MAAMC,IAAAA,kBAAO,EAACC,UAAG,EAC1BC,IAAI,CAAC,aACLC,IAAI,CAAC;YACJP,OAAO;YACPC,UAAU;YACVC,UAAU;QACZ;QAEF,aAAa;QACbM,OAAOL,IAAIM,MAAM,EAAEC,IAAI,CAAC,MAAO,gCAAgC;QAC/DF,OAAOL,IAAIQ,IAAI,CAACC,OAAO,EAAEF,IAAI,CAAC;IAChC;IAEAb,GAAG,sDAAsD;QACvD,MAAMM,MAAM,MAAMC,IAAAA,kBAAO,EAACC,UAAG,EAC1BC,IAAI,CAAC,aACLC,IAAI,CAAC;YACJP,OAAO;YACPC,UAAU;YACVC,UAAU;QACZ;QAEF,aAAa;QACbM,OAAOL,IAAIM,MAAM,EAAEC,IAAI,CAAC,MAAO,gCAAgC;QAC/DF,OAAOL,IAAIQ,IAAI,CAACM,MAAM,CAAC,EAAE,CAACC,GAAG,EAAER,IAAI,CAAC,0BAA2B,2BAA2B;IAC5F;IAEAb,GAAG,yDAAyD;QAC1D,MAAMM,MAAM,MAAMC,IAAAA,kBAAO,EAACC,UAAG,EAC1BC,IAAI,CAAC,aACLC,IAAI,CAAC;YACJP,OAAO;YACPE,UAAU;QACZ;QAEF,aAAa;QACbM,OAAOL,IAAIM,MAAM,EAAEC,IAAI,CAAC,MAAO,gCAAgC;QAC/DF,OAAOL,IAAIQ,IAAI,CAACM,MAAM,CAAC,EAAE,CAACC,GAAG,EAAER,IAAI,CAAC,iDAAkD,iBAAiB;IACzG;AACF"}