{"version":3,"sources":["../../../src/test/auth.test.ts"],"sourcesContent":["// In src/test/auth.test.ts\r\nimport path from 'path';\r\nimport request from 'supertest';\r\nimport { Express } from 'express';\r\nimport jwt from 'jsonwebtoken';\r\n\r\n// Mocking jsonwebtoken methods for testing\r\njest.mock('jsonwebtoken', () => ({\r\n  sign: jest.fn(() => 'mocked_token'),\r\n  verify: jest.fn(() => ({ id: 'test_user_id' })),\r\n}));\r\n\r\n// Define the path to the compiled `index.js` file in `dist/`\r\nconst appPath = path.resolve(__dirname, '../dist/index.js');\r\n\r\n// Initialize app variable with explicit typing as Express.Application\r\nlet app: Express | undefined;\r\n\r\nbeforeAll(async () => {\r\n  try {\r\n    // Dynamically import the app from the compiled dist/index.js\r\n    const module = await import(appPath);\r\n    app = module.default || module.app; // Adjust depending on how your app is exported\r\n  } catch (error) {\r\n    console.error('Error loading app from dist:', error);\r\n  }\r\n});\r\n\r\n// Define tests only if the app was successfully loaded\r\ndescribe('Authentication Tests', () => {\r\n  it('should respond with a message from the root endpoint', async () => {\r\n    if (!app) {\r\n      console.warn('Skipping tests as app could not be loaded');\r\n      return; // Skip the test if app could not be loaded\r\n    }\r\n\r\n    // Send a GET request to the root endpoint\r\n    const response = await request(app).get('/');\r\n\r\n    // Check the response\r\n    expect(response.statusCode).toBe(200);\r\n    expect(response.text).toBe('Fiverr backend is running');\r\n  });\r\n\r\n  it('should mock the JWT sign and verify methods correctly', () => {\r\n    // Test mock for sign method\r\n    const token = jwt.sign({ id: 'test_user_id' }, 'secret_key');\r\n    expect(token).toBe('mocked_token');\r\n    expect(jwt.sign).toHaveBeenCalledWith({ id: 'test_user_id' }, 'secret_key'); // Ensure the sign method was called with the correct params\r\n\r\n    // Test mock for verify method\r\n    const decoded = jwt.verify('mocked_token', 'secret_key');\r\n    expect(decoded).toEqual({ id: 'test_user_id' });\r\n    expect(jwt.verify).toHaveBeenCalledWith('mocked_token', 'secret_key'); // Ensure verify was called with correct token and secret\r\n  });\r\n});\r\n"],"names":["jest","mock","sign","fn","verify","id","appPath","path","resolve","__dirname","app","beforeAll","module","default","error","console","describe","it","warn","response","request","get","expect","statusCode","toBe","text","token","jwt","toHaveBeenCalledWith","decoded","toEqual"],"mappings":"AAAA,2BAA2B;;;;;6DACV;kEACG;qEAEJ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEhB,2CAA2C;AAC3CA,KAAKC,IAAI,CAAC,gBAAgB,IAAO,CAAA;QAC/BC,MAAMF,KAAKG,EAAE,CAAC,IAAM;QACpBC,QAAQJ,KAAKG,EAAE,CAAC,IAAO,CAAA;gBAAEE,IAAI;YAAe,CAAA;IAC9C,CAAA;AAEA,6DAA6D;AAC7D,MAAMC,UAAUC,aAAI,CAACC,OAAO,CAACC,WAAW;AAExC,sEAAsE;AACtE,IAAIC;AAEJC,UAAU;IACR,IAAI;QACF,6DAA6D;QAC7D,MAAMC,SAAS,MAAM,gBAAON,2DAAP;QACrBI,MAAME,OAAOC,OAAO,IAAID,OAAOF,GAAG,EAAE,+CAA+C;IACrF,EAAE,OAAOI,OAAO;QACdC,QAAQD,KAAK,CAAC,gCAAgCA;IAChD;AACF;AAEA,uDAAuD;AACvDE,SAAS,wBAAwB;IAC/BC,GAAG,wDAAwD;QACzD,IAAI,CAACP,KAAK;YACRK,QAAQG,IAAI,CAAC;YACb,QAAQ,2CAA2C;QACrD;QAEA,0CAA0C;QAC1C,MAAMC,WAAW,MAAMC,IAAAA,kBAAO,EAACV,KAAKW,GAAG,CAAC;QAExC,qBAAqB;QACrBC,OAAOH,SAASI,UAAU,EAAEC,IAAI,CAAC;QACjCF,OAAOH,SAASM,IAAI,EAAED,IAAI,CAAC;IAC7B;IAEAP,GAAG,yDAAyD;QAC1D,4BAA4B;QAC5B,MAAMS,QAAQC,qBAAG,CAACzB,IAAI,CAAC;YAAEG,IAAI;QAAe,GAAG;QAC/CiB,OAAOI,OAAOF,IAAI,CAAC;QACnBF,OAAOK,qBAAG,CAACzB,IAAI,EAAE0B,oBAAoB,CAAC;YAAEvB,IAAI;QAAe,GAAG,eAAe,4DAA4D;QAEzI,8BAA8B;QAC9B,MAAMwB,UAAUF,qBAAG,CAACvB,MAAM,CAAC,gBAAgB;QAC3CkB,OAAOO,SAASC,OAAO,CAAC;YAAEzB,IAAI;QAAe;QAC7CiB,OAAOK,qBAAG,CAACvB,MAAM,EAAEwB,oBAAoB,CAAC,gBAAgB,eAAe,yDAAyD;IAClI;AACF"}