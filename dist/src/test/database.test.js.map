{"version":3,"sources":["../../../src/test/database.test.ts"],"sourcesContent":["// src/test/database.test.ts\r\nimport { sequelize,  testConnection } from '../config/database'; // Correct import for default and named export\r\nimport { User } from '../models/user'; // Correct named import\r\n\r\n// Mock the sequelize instance's `authenticate` method and the `testConnection` function\r\njest.mock('sequelize', () => {\r\n  return {\r\n    Sequelize: jest.fn().mockImplementation(() => {\r\n      return {\r\n        authenticate: jest.fn().mockResolvedValue(true),\r\n        sync: jest.fn().mockResolvedValue(true),\r\n      };\r\n    }),\r\n  };\r\n});\r\n\r\ndescribe('Database Connection', () => {\r\n  let mockAuthenticate: jest.Mock;\r\n  let mockTestConnection: jest.Mock;\r\n\r\n  // Initialize the mock functions for `authenticate` and `testConnection`\r\n  beforeAll(() => {\r\n    mockAuthenticate = sequelize.authenticate as jest.Mock;\r\n    mockTestConnection = jest.fn(); // Create a mock for `testConnection` as a jest function\r\n  });\r\n\r\n  // Mock console methods globally\r\n  let consoleLogSpy: jest.SpyInstance;\r\n  let consoleErrorSpy: jest.SpyInstance;\r\n\r\n  beforeEach(() => {\r\n    // Mock `console.log` and `console.error` for test isolation\r\n    consoleLogSpy = jest.spyOn(console, 'log').mockImplementation(() => {});\r\n    consoleErrorSpy = jest.spyOn(console, 'error').mockImplementation(() => {});\r\n  });\r\n\r\n  afterEach(() => {\r\n    // Clear all mocks to reset state between tests\r\n    jest.clearAllMocks();\r\n  });\r\n\r\n  afterAll(async () => {\r\n    // Close the database connection after all tests have finished running\r\n    await sequelize.close();  // Close database connection\r\n    console.log('Database connection closed');  // Optionally log to verify\r\n  });\r\n\r\n  // Test for a successful database connection\r\n  it('should successfully connect to the database', async () => {\r\n    // Simulate a successful connection\r\n    mockAuthenticate.mockResolvedValueOnce(undefined); // Mock a successful authentication response\r\n    mockTestConnection.mockResolvedValueOnce(true); // Mock the testConnection function to return true\r\n\r\n    // Execute the `testConnection` function\r\n    const connection = await testConnection();\r\n\r\n    // Assertions\r\n    expect(mockAuthenticate).toHaveBeenCalledTimes(1); // Check `authenticate` was called once\r\n    expect(mockAuthenticate).toHaveBeenCalledWith(); // Ensure it was called without arguments\r\n    expect(consoleLogSpy).toHaveBeenCalledWith('Database connection successful');\r\n    expect(connection).toBeTruthy(); // Ensure the connection returns true\r\n  });\r\n\r\n  // Test for a failed database connection\r\n  it('should log an error when the database connection fails', async () => {\r\n    // Simulate a connection failure\r\n    const errorMessage = 'Connection failed';\r\n    mockAuthenticate.mockRejectedValueOnce(new Error(errorMessage)); // Mock the error on authenticate\r\n    mockTestConnection.mockResolvedValueOnce(false); // Mock the testConnection function to return false\r\n\r\n    // Execute the `testConnection` function\r\n    const connection = await testConnection();\r\n\r\n    // Assertions\r\n    expect(mockAuthenticate).toHaveBeenCalledTimes(1); // Check `authenticate` was called once\r\n    expect(mockAuthenticate).toHaveBeenCalledWith(); // Ensure it was called without arguments\r\n    expect(consoleErrorSpy).toHaveBeenCalledWith(\r\n      'Unable to connect to the database:',\r\n      errorMessage\r\n    ); // Check error log\r\n    expect(connection).toBeFalsy(); // Ensure the connection fails\r\n  });\r\n});\r\n"],"names":["jest","mock","Sequelize","fn","mockImplementation","authenticate","mockResolvedValue","sync","describe","mockAuthenticate","mockTestConnection","beforeAll","sequelize","consoleLogSpy","consoleErrorSpy","beforeEach","spyOn","console","afterEach","clearAllMocks","afterAll","close","log","it","mockResolvedValueOnce","undefined","connection","testConnection","expect","toHaveBeenCalledTimes","toHaveBeenCalledWith","toBeTruthy","errorMessage","mockRejectedValueOnce","Error","toBeFalsy"],"mappings":"AAAA,4BAA4B;;;;;0BACe;AAG3C,wFAAwF;AACxFA,KAAKC,IAAI,CAAC,aAAa;IACrB,OAAO;QACLC,WAAWF,KAAKG,EAAE,GAAGC,kBAAkB,CAAC;YACtC,OAAO;gBACLC,cAAcL,KAAKG,EAAE,GAAGG,iBAAiB,CAAC;gBAC1CC,MAAMP,KAAKG,EAAE,GAAGG,iBAAiB,CAAC;YACpC;QACF;IACF;AACF;AAEAE,SAAS,uBAAuB;IAC9B,IAAIC;IACJ,IAAIC;IAEJ,wEAAwE;IACxEC,UAAU;QACRF,mBAAmBG,mBAAS,CAACP,YAAY;QACzCK,qBAAqBV,KAAKG,EAAE,IAAI,wDAAwD;IAC1F;IAEA,gCAAgC;IAChC,IAAIU;IACJ,IAAIC;IAEJC,WAAW;QACT,4DAA4D;QAC5DF,gBAAgBb,KAAKgB,KAAK,CAACC,SAAS,OAAOb,kBAAkB,CAAC,KAAO;QACrEU,kBAAkBd,KAAKgB,KAAK,CAACC,SAAS,SAASb,kBAAkB,CAAC,KAAO;IAC3E;IAEAc,UAAU;QACR,+CAA+C;QAC/ClB,KAAKmB,aAAa;IACpB;IAEAC,SAAS;QACP,sEAAsE;QACtE,MAAMR,mBAAS,CAACS,KAAK,IAAK,4BAA4B;QACtDJ,QAAQK,GAAG,CAAC,+BAAgC,2BAA2B;IACzE;IAEA,4CAA4C;IAC5CC,GAAG,+CAA+C;QAChD,mCAAmC;QACnCd,iBAAiBe,qBAAqB,CAACC,YAAY,4CAA4C;QAC/Ff,mBAAmBc,qBAAqB,CAAC,OAAO,kDAAkD;QAElG,wCAAwC;QACxC,MAAME,aAAa,MAAMC,IAAAA,wBAAc;QAEvC,aAAa;QACbC,OAAOnB,kBAAkBoB,qBAAqB,CAAC,IAAI,uCAAuC;QAC1FD,OAAOnB,kBAAkBqB,oBAAoB,IAAI,yCAAyC;QAC1FF,OAAOf,eAAeiB,oBAAoB,CAAC;QAC3CF,OAAOF,YAAYK,UAAU,IAAI,qCAAqC;IACxE;IAEA,wCAAwC;IACxCR,GAAG,0DAA0D;QAC3D,gCAAgC;QAChC,MAAMS,eAAe;QACrBvB,iBAAiBwB,qBAAqB,CAAC,IAAIC,MAAMF,gBAAgB,iCAAiC;QAClGtB,mBAAmBc,qBAAqB,CAAC,QAAQ,mDAAmD;QAEpG,wCAAwC;QACxC,MAAME,aAAa,MAAMC,IAAAA,wBAAc;QAEvC,aAAa;QACbC,OAAOnB,kBAAkBoB,qBAAqB,CAAC,IAAI,uCAAuC;QAC1FD,OAAOnB,kBAAkBqB,oBAAoB,IAAI,yCAAyC;QAC1FF,OAAOd,iBAAiBgB,oBAAoB,CAC1C,sCACAE,eACC,kBAAkB;QACrBJ,OAAOF,YAAYS,SAAS,IAAI,8BAA8B;IAChE;AACF"}