{"version":3,"sources":["../../../src/test/database.test.ts"],"sourcesContent":["import { Sequelize } from 'sequelize'; // Ensure Sequelize is imported correctly\r\nimport { sequelize } from '../config/database';  // Corrected import for sequelize\r\n\r\n// Mocking the database connection\r\njest.mock('../config/database', () => {\r\n  const mockSequelize = new Sequelize('mysql://user:pass@localhost:3306/database');\r\n  mockSequelize.authenticate = jest.fn().mockResolvedValue(undefined); // Mock successful authentication\r\n  return { sequelize: mockSequelize }; // Mock sequelize as a named export\r\n});\r\n\r\ndescribe('Database Connection', () => {\r\n  it('should connect successfully', async () => {\r\n    // Act: Call authenticate to test DB connection\r\n    const result = await sequelize.authenticate();\r\n\r\n    // Assert: Ensure that the mocked authenticate method does not throw an error\r\n    expect(result).toBeUndefined(); // This checks that no error was thrown and that the result is undefined as expected for the mock\r\n  });\r\n});\r\n"],"names":["jest","mock","mockSequelize","Sequelize","authenticate","fn","mockResolvedValue","undefined","sequelize","describe","it","result","expect","toBeUndefined"],"mappings":";;;;2BAA0B;0BACA;AAE1B,kCAAkC;AAClCA,KAAKC,IAAI,CAAC,sBAAsB;IAC9B,MAAMC,gBAAgB,IAAIC,oBAAS,CAAC;IACpCD,cAAcE,YAAY,GAAGJ,KAAKK,EAAE,GAAGC,iBAAiB,CAACC,YAAY,iCAAiC;IACtG,OAAO;QAAEC,WAAWN;IAAc,GAAG,mCAAmC;AAC1E;AAEAO,SAAS,uBAAuB;IAC9BC,GAAG,+BAA+B;QAChC,+CAA+C;QAC/C,MAAMC,SAAS,MAAMH,mBAAS,CAACJ,YAAY;QAE3C,6EAA6E;QAC7EQ,OAAOD,QAAQE,aAAa,IAAI,iGAAiG;IACnI;AACF"}