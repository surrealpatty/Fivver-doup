{"version":3,"sources":["../../../src/test/service.test.ts"],"sourcesContent":["// src/test/service.test.ts\r\nimport request from 'supertest';\r\nimport { app } from '../index';  // Ensure this points to your Express app file\r\nimport { createMockUserToken } from './testHelpers';  // Assuming this is your helper function for generating tokens\r\n\r\ndescribe('PUT /services/:id', () => {\r\n  // Mock user token for authentication\r\n  const userId = '12345';  // Example user ID\r\n  const token = createMockUserToken(userId);  // Generate mock token\r\n\r\n  // Test case: Service should be updated successfully\r\n  it('should update a service successfully', async () => {\r\n    // Assuming you have a service with ID 1 in your database for this test\r\n    const response = await request(app)\r\n      .put('/services/1')\r\n      .set('Authorization', `Bearer ${token}`)  // Mock authentication token\r\n      .send({ name: 'Updated Service Title', description: 'Updated description', price: 150 });\r\n\r\n    // Check that the status is 200 (OK)\r\n    expect(response.status).toBe(200);\r\n    // Check that the response message matches\r\n    expect(response.body.message).toBe('Service updated successfully');\r\n    // Check that the service fields are updated\r\n    expect(response.body.service.name).toBe('Updated Service Title');\r\n    expect(response.body.service.description).toBe('Updated description');\r\n    expect(response.body.service.price).toBe(150);\r\n  });\r\n\r\n  // Test case: Service not found (404 error)\r\n  it('should return 404 if the service is not found', async () => {\r\n    // Test with an ID that doesn't exist in the database (e.g., ID 9999)\r\n    const response = await request(app)\r\n      .put('/services/9999')  // Assuming service with ID 9999 does not exist\r\n      .set('Authorization', `Bearer ${token}`)\r\n      .send({ name: 'Non-existent service' });\r\n\r\n    // Check that the status is 404 (Not Found)\r\n    expect(response.status).toBe(404);\r\n    // Check that the error message matches\r\n    expect(response.body.message).toBe('Service not found');\r\n  });\r\n\r\n  // Test case: Invalid data (e.g., price is not a number)\r\n  it('should return 400 if the price is invalid', async () => {\r\n    const response = await request(app)\r\n      .put('/services/1')\r\n      .set('Authorization', `Bearer ${token}`)\r\n      .send({ name: 'Invalid Service Title', description: 'Description with invalid price', price: 'invalid' });\r\n\r\n    // Check that the status is 400 (Bad Request)\r\n    expect(response.status).toBe(400);\r\n    // Check that the error message matches\r\n    expect(response.body.message).toBe('Invalid price value');\r\n  });\r\n});\r\n"],"names":["describe","userId","token","createMockUserToken","it","response","request","app","put","set","send","name","description","price","expect","status","toBe","body","message","service"],"mappings":"AAAA,2BAA2B;;;;;kEACP;uBACA;6BACgB;;;;;;AAEpCA,SAAS,qBAAqB;IAC5B,qCAAqC;IACrC,MAAMC,SAAS,SAAU,kBAAkB;IAC3C,MAAMC,QAAQC,IAAAA,gCAAmB,EAACF,SAAU,sBAAsB;IAElE,oDAAoD;IACpDG,GAAG,wCAAwC;QACzC,uEAAuE;QACvE,MAAMC,WAAW,MAAMC,IAAAA,kBAAO,EAACC,UAAG,EAC/BC,GAAG,CAAC,eACJC,GAAG,CAAC,iBAAiB,CAAC,OAAO,EAAEP,OAAO,EAAG,4BAA4B;SACrEQ,IAAI,CAAC;YAAEC,MAAM;YAAyBC,aAAa;YAAuBC,OAAO;QAAI;QAExF,oCAAoC;QACpCC,OAAOT,SAASU,MAAM,EAAEC,IAAI,CAAC;QAC7B,0CAA0C;QAC1CF,OAAOT,SAASY,IAAI,CAACC,OAAO,EAAEF,IAAI,CAAC;QACnC,4CAA4C;QAC5CF,OAAOT,SAASY,IAAI,CAACE,OAAO,CAACR,IAAI,EAAEK,IAAI,CAAC;QACxCF,OAAOT,SAASY,IAAI,CAACE,OAAO,CAACP,WAAW,EAAEI,IAAI,CAAC;QAC/CF,OAAOT,SAASY,IAAI,CAACE,OAAO,CAACN,KAAK,EAAEG,IAAI,CAAC;IAC3C;IAEA,2CAA2C;IAC3CZ,GAAG,iDAAiD;QAClD,qEAAqE;QACrE,MAAMC,WAAW,MAAMC,IAAAA,kBAAO,EAACC,UAAG,EAC/BC,GAAG,CAAC,kBAAmB,+CAA+C;SACtEC,GAAG,CAAC,iBAAiB,CAAC,OAAO,EAAEP,OAAO,EACtCQ,IAAI,CAAC;YAAEC,MAAM;QAAuB;QAEvC,2CAA2C;QAC3CG,OAAOT,SAASU,MAAM,EAAEC,IAAI,CAAC;QAC7B,uCAAuC;QACvCF,OAAOT,SAASY,IAAI,CAACC,OAAO,EAAEF,IAAI,CAAC;IACrC;IAEA,wDAAwD;IACxDZ,GAAG,6CAA6C;QAC9C,MAAMC,WAAW,MAAMC,IAAAA,kBAAO,EAACC,UAAG,EAC/BC,GAAG,CAAC,eACJC,GAAG,CAAC,iBAAiB,CAAC,OAAO,EAAEP,OAAO,EACtCQ,IAAI,CAAC;YAAEC,MAAM;YAAyBC,aAAa;YAAkCC,OAAO;QAAU;QAEzG,6CAA6C;QAC7CC,OAAOT,SAASU,MAAM,EAAEC,IAAI,CAAC;QAC7B,uCAAuC;QACvCF,OAAOT,SAASY,IAAI,CAACC,OAAO,EAAEF,IAAI,CAAC;IACrC;AACF"}