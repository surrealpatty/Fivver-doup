{"version":3,"sources":["../../../src/test/service.test.ts"],"sourcesContent":["import { Service } from '../models/service'; // Adjust path if necessary\r\nimport  { sequelize } from '../config/database'; // Ensure correct import of sequelize instance\r\nimport { User } from '../models/user'; // Ensure you have access to the User model for creating a user\r\n\r\ndescribe('Service Model Tests', () => {\r\n  let testUser: User;\r\n\r\n  beforeAll(async () => {\r\n    // Set up your test database (if needed)\r\n    await sequelize.sync({ force: true });\r\n\r\n    // Create a test user to associate with services\r\n    testUser = await User.create({\r\n      email: 'testuser@example.com',\r\n      username: 'testuser',\r\n      password: 'password123', // Add a password or adjust accordingly\r\n    });\r\n  });\r\n\r\n  it('should create a new service', async () => {\r\n    const service = await Service.create({\r\n      title: 'Test Service',\r\n      description: 'This is a test service.',\r\n      price: 100,\r\n      userId: testUser.id, // Ensure the service is associated with the test user\r\n    });\r\n\r\n    expect(service).toHaveProperty('id');\r\n    expect(service.title).toBe('Test Service');\r\n    expect(service.userId).toBe(testUser.id); // Ensure the userId is correctly set\r\n  });\r\n\r\n  it('should find all services', async () => {\r\n    const services = await Service.findAll();\r\n    expect(services).toBeInstanceOf(Array);\r\n    expect(services.length).toBeGreaterThan(0); // Optionally check length\r\n  });\r\n\r\n  it('should update a service', async () => {\r\n    const service = await Service.create({\r\n      title: 'Old Service',\r\n      description: 'This is an old service.',\r\n      price: 50,\r\n      userId: testUser.id, // Ensure the service is associated with the test user\r\n    });\r\n\r\n    service.title = 'Updated Service';\r\n    await service.save();\r\n\r\n    expect(service.title).toBe('Updated Service');\r\n  });\r\n\r\n  it('should delete a service', async () => {\r\n    const service = await Service.create({\r\n      title: 'Service to Delete',\r\n      description: 'This service will be deleted.',\r\n      price: 30,\r\n      userId: testUser.id, // Ensure the service is associated with the test user\r\n    });\r\n\r\n    await service.destroy();\r\n\r\n    const deletedService = await Service.findByPk(service.id);\r\n    expect(deletedService).toBeNull();\r\n  });\r\n});\r\n"],"names":["describe","testUser","beforeAll","sequelize","sync","force","User","create","email","username","password","it","service","Service","title","description","price","userId","id","expect","toHaveProperty","toBe","services","findAll","toBeInstanceOf","Array","length","toBeGreaterThan","save","destroy","deletedService","findByPk","toBeNull"],"mappings":";;;;yBAAwB;0BACG;sBACN;AAErBA,SAAS,uBAAuB;IAC9B,IAAIC;IAEJC,UAAU;QACR,wCAAwC;QACxC,MAAMC,mBAAS,CAACC,IAAI,CAAC;YAAEC,OAAO;QAAK;QAEnC,gDAAgD;QAChDJ,WAAW,MAAMK,UAAI,CAACC,MAAM,CAAC;YAC3BC,OAAO;YACPC,UAAU;YACVC,UAAU;QACZ;IACF;IAEAC,GAAG,+BAA+B;QAChC,MAAMC,UAAU,MAAMC,gBAAO,CAACN,MAAM,CAAC;YACnCO,OAAO;YACPC,aAAa;YACbC,OAAO;YACPC,QAAQhB,SAASiB,EAAE;QACrB;QAEAC,OAAOP,SAASQ,cAAc,CAAC;QAC/BD,OAAOP,QAAQE,KAAK,EAAEO,IAAI,CAAC;QAC3BF,OAAOP,QAAQK,MAAM,EAAEI,IAAI,CAACpB,SAASiB,EAAE,GAAG,qCAAqC;IACjF;IAEAP,GAAG,4BAA4B;QAC7B,MAAMW,WAAW,MAAMT,gBAAO,CAACU,OAAO;QACtCJ,OAAOG,UAAUE,cAAc,CAACC;QAChCN,OAAOG,SAASI,MAAM,EAAEC,eAAe,CAAC,IAAI,0BAA0B;IACxE;IAEAhB,GAAG,2BAA2B;QAC5B,MAAMC,UAAU,MAAMC,gBAAO,CAACN,MAAM,CAAC;YACnCO,OAAO;YACPC,aAAa;YACbC,OAAO;YACPC,QAAQhB,SAASiB,EAAE;QACrB;QAEAN,QAAQE,KAAK,GAAG;QAChB,MAAMF,QAAQgB,IAAI;QAElBT,OAAOP,QAAQE,KAAK,EAAEO,IAAI,CAAC;IAC7B;IAEAV,GAAG,2BAA2B;QAC5B,MAAMC,UAAU,MAAMC,gBAAO,CAACN,MAAM,CAAC;YACnCO,OAAO;YACPC,aAAa;YACbC,OAAO;YACPC,QAAQhB,SAASiB,EAAE;QACrB;QAEA,MAAMN,QAAQiB,OAAO;QAErB,MAAMC,iBAAiB,MAAMjB,gBAAO,CAACkB,QAAQ,CAACnB,QAAQM,EAAE;QACxDC,OAAOW,gBAAgBE,QAAQ;IACjC;AACF"}