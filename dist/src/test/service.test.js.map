{"version":3,"sources":["../../../src/test/service.test.ts"],"sourcesContent":["import request from 'supertest';\r\nimport { app } from '../index'; // Import your Express app\r\nimport { createMockUserToken } from './testHelpers'; // Import helper function to generate mock JWT tokens for users\r\nimport { User } from 'models/user'; // Import User model if needed for DB interactions\r\nimport Service from 'models/services';  // Import Service model for DB interactions\r\n\r\ndescribe('Service Routes', () => {\r\n  let mockUserToken: string;\r\n  let userId: string;\r\n\r\n  // Setup before all tests to create a mock user and generate JWT token\r\n  beforeAll(async () => {\r\n    // Create a mock user in the database (if needed)\r\n    const user = await User.create({ email: 'testuser@example.com', username: 'testuser', password: 'password123' });\r\n    userId = user.id;  // Store the user ID for later tests\r\n\r\n    // Generate a valid JWT token for that user\r\n    mockUserToken = createMockUserToken({ id: user.id, email: user.email, username: user.username });\r\n  });\r\n\r\n  afterAll(async () => {\r\n    // Clean up the mock user and any associated services after all tests\r\n    await Service.destroy({ where: { userId } });  // Delete any services created for the user\r\n    await User.destroy({ where: { id: userId } });  // Delete the mock user\r\n  });\r\n\r\n  it('should create a new service', async () => {\r\n    const response = await request(app)\r\n      .post('/services')\r\n      .set('Authorization', `Bearer ${mockUserToken}`)\r\n      .send({ title: 'Test Service', description: 'This is a test service.', price: 100 });\r\n\r\n    expect(response.status).toBe(201);\r\n    expect(response.body.message).toBe('Service created successfully.');\r\n    expect(response.body.service).toHaveProperty('id');\r\n    expect(response.body.service.title).toBe('Test Service');\r\n  });\r\n\r\n  it('should fail to create a service if required fields are missing', async () => {\r\n    const response = await request(app)\r\n      .post('/services')\r\n      .set('Authorization', `Bearer ${mockUserToken}`)\r\n      .send({ title: 'Test Service' }); // Missing description and price\r\n\r\n    expect(response.status).toBe(400);\r\n    expect(response.body.message).toBe('Missing required fields: userId, title, description, and price are mandatory.');\r\n  });\r\n\r\n  it('should update an existing service', async () => {\r\n    // First, create a service to update\r\n    const createResponse = await request(app)\r\n      .post('/services')\r\n      .set('Authorization', `Bearer ${mockUserToken}`)\r\n      .send({ title: 'Old Service', description: 'Old description', price: 50 });\r\n\r\n    const serviceId = createResponse.body.service.id;\r\n\r\n    // Now, update the service\r\n    const updateResponse = await request(app)\r\n      .put(`/services/${serviceId}`)\r\n      .set('Authorization', `Bearer ${mockUserToken}`)\r\n      .send({ title: 'Updated Service', description: 'Updated description', price: 75 });\r\n\r\n    expect(updateResponse.status).toBe(200);\r\n    expect(updateResponse.body.message).toBe('Service updated successfully.');\r\n    expect(updateResponse.body.service.title).toBe('Updated Service');\r\n    expect(updateResponse.body.service.price).toBe(75);\r\n  });\r\n\r\n  it('should fail to update a service if service does not exist', async () => {\r\n    const updateResponse = await request(app)\r\n      .put('/services/99999') // Using an invalid service ID\r\n      .set('Authorization', `Bearer ${mockUserToken}`)\r\n      .send({ title: 'Updated Service', description: 'Updated description', price: 75 });\r\n\r\n    expect(updateResponse.status).toBe(404);\r\n    expect(updateResponse.body.message).toBe('Service not found.');\r\n  });\r\n\r\n  it('should delete a service', async () => {\r\n    // First, create a service to delete\r\n    const createResponse = await request(app)\r\n      .post('/services')\r\n      .set('Authorization', `Bearer ${mockUserToken}`)\r\n      .send({ title: 'Service to Delete', description: 'This service will be deleted.', price: 30 });\r\n\r\n    const serviceId = createResponse.body.service.id;\r\n\r\n    // Now, delete the service\r\n    const deleteResponse = await request(app)\r\n      .delete(`/services/${serviceId}`)\r\n      .set('Authorization', `Bearer ${mockUserToken}`);\r\n\r\n    expect(deleteResponse.status).toBe(200);\r\n    expect(deleteResponse.body.message).toBe('Service deleted successfully.');\r\n\r\n    // Verify the service is deleted\r\n    const getResponse = await request(app).get(`/services/${serviceId}`);\r\n    expect(getResponse.status).toBe(404);\r\n    expect(getResponse.body.message).toBe('Service not found.');\r\n  });\r\n\r\n  it('should fail to delete a service if the user is not the owner', async () => {\r\n    // Create a service for another user (assuming user with id '2' exists)\r\n    const otherUserToken = createMockUserToken({ id: '2', email: 'another@example.com', username: 'anotheruser' });\r\n    const createResponse = await request(app)\r\n      .post('/services')\r\n      .set('Authorization', `Bearer ${otherUserToken}`)\r\n      .send({ title: 'Another User\\'s Service', description: 'Service from another user', price: 40 });\r\n\r\n    const serviceId = createResponse.body.service.id;\r\n\r\n    // Try deleting it as the first user (should fail)\r\n    const deleteResponse = await request(app)\r\n      .delete(`/services/${serviceId}`)\r\n      .set('Authorization', `Bearer ${mockUserToken}`);\r\n\r\n    expect(deleteResponse.status).toBe(403);\r\n    expect(deleteResponse.body.message).toBe('Forbidden: You can only delete your own services.');\r\n  });\r\n});\r\n"],"names":["describe","mockUserToken","userId","beforeAll","user","User","create","email","username","password","id","createMockUserToken","afterAll","Service","destroy","where","it","response","request","app","post","set","send","title","description","price","expect","status","toBe","body","message","service","toHaveProperty","createResponse","serviceId","updateResponse","put","deleteResponse","delete","getResponse","get","otherUserToken"],"mappings":"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"}