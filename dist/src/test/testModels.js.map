{"version":3,"sources":["../../../src/test/testModels.ts"],"sourcesContent":["// src/test/testModels.ts\r\nimport Service, { ServiceCreationAttributes } from '../models/services'; // Import the interface and class\r\nimport { User } from '../models/user'; // Correct named import for User\r\nimport { sequelize } from '../config/database'; // Import the sequelize instance\r\n\r\ndescribe('Service Model Tests', () => {\r\n  beforeAll(async () => {\r\n    // Sync the database (ensure it's ready before tests)\r\n    await sequelize.sync({ force: true });\r\n  });\r\n\r\n  it('should create a new service', async () => {\r\n    // Create a user with all required fields (password, role, and isVerified)\r\n    const user = await User.create({\r\n      username: 'testUser',\r\n      email: 'test@example.com',\r\n      password: 'password123',\r\n      role: 'free',  // Ensure role is provided\r\n      tier: 'free',  // Add tier\r\n      isVerified: true,  // Add isVerified (to satisfy the required field)\r\n    });\r\n\r\n    // Prepare the service data with the correct type\r\n    const serviceData: ServiceCreationAttributes = {\r\n      name: 'Test Service',  // Corrected to 'name' instead of 'title'\r\n      description: 'A test service description',\r\n      price: 100.0,\r\n      userId: String(user.id),  // Convert userId to string (to match the expected type)\r\n    };\r\n\r\n    // Create the service and ensure it's properly typed\r\n    const service = await Service.create(serviceData);\r\n\r\n    // Check that the service has the correct properties\r\n    expect(service.userId).toBe(String(user.id));  // Ensure userId is a string\r\n    expect(service.name).toBe('Test Service');  // Ensure 'name' is correctly used\r\n    expect(service.price).toBe(100.0);\r\n  });\r\n});\r\n"],"names":["describe","beforeAll","sequelize","sync","force","it","user","User","create","username","email","password","role","tier","isVerified","serviceData","name","description","price","userId","String","id","service","Service","expect","toBe"],"mappings":"AAAA,yBAAyB;;;;;iEAC0B;sBAC9B;0BACK;;;;;;AAE1BA,SAAS,uBAAuB;IAC9BC,UAAU;QACR,qDAAqD;QACrD,MAAMC,mBAAS,CAACC,IAAI,CAAC;YAAEC,OAAO;QAAK;IACrC;IAEAC,GAAG,+BAA+B;QAChC,0EAA0E;QAC1E,MAAMC,OAAO,MAAMC,UAAI,CAACC,MAAM,CAAC;YAC7BC,UAAU;YACVC,OAAO;YACPC,UAAU;YACVC,MAAM;YACNC,MAAM;YACNC,YAAY;QACd;QAEA,iDAAiD;QACjD,MAAMC,cAAyC;YAC7CC,MAAM;YACNC,aAAa;YACbC,OAAO;YACPC,QAAQC,OAAOd,KAAKe,EAAE;QACxB;QAEA,oDAAoD;QACpD,MAAMC,UAAU,MAAMC,iBAAO,CAACf,MAAM,CAACO;QAErC,oDAAoD;QACpDS,OAAOF,QAAQH,MAAM,EAAEM,IAAI,CAACL,OAAOd,KAAKe,EAAE,IAAK,4BAA4B;QAC3EG,OAAOF,QAAQN,IAAI,EAAES,IAAI,CAAC,iBAAkB,kCAAkC;QAC9ED,OAAOF,QAAQJ,KAAK,EAAEO,IAAI,CAAC;IAC7B;AACF"}