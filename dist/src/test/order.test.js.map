{"version":3,"sources":["../../../src/test/order.test.ts"],"sourcesContent":["import path from 'path';\r\nimport request from 'supertest';\r\nimport { Express } from 'express';\r\nimport { sequelize } from '../config/database';\r\nimport { User } from '../models/user';\r\nimport  Service  from '../models/services'; // Correct relative path\r\n\r\nimport { Order } from '../models/order'; // Correctly import Order model\r\n\r\n// Mock the methods of the models\r\njest.mock('../models/services', () => ({\r\n  findByPk: jest.fn(),\r\n}));\r\n\r\njest.mock('../models/user', () => ({\r\n  findByPk: jest.fn(),\r\n}));\r\n\r\n// Mock the Order model methods\r\njest.mock('../models/order', () => ({\r\n  create: jest.fn(),\r\n  findAll: jest.fn(),\r\n  findByPk: jest.fn(),\r\n  destroy: jest.fn(),\r\n}));\r\n\r\n// Define the path to the compiled `index.js` file in `dist/`\r\nconst appPath = path.resolve(__dirname, '../dist/index');\r\n\r\n// Initialize `app` variable with explicit typing as `Express.Application`\r\nlet app: Express;\r\n\r\nbeforeAll(async () => {\r\n  try {\r\n    // Dynamically import the app from the compiled dist/index.js\r\n    const module = await import(appPath);\r\n    app = module.default || module.app; // Adjust depending on how your app is exported\r\n  } catch (error) {\r\n    console.error('Error loading app from dist:', error);\r\n    throw error; // Ensure the test fails if the app can't be loaded\r\n  }\r\n\r\n  // Sync database (force drop & recreate tables before tests)\r\n  await sequelize.sync({ force: true });\r\n});\r\n\r\nafterEach(() => {\r\n  jest.clearAllMocks(); // Clear mocks to ensure clean state between tests\r\n});\r\n\r\nafterAll(async () => {\r\n  await sequelize.close(); // Close the database connection after all tests\r\n});\r\n\r\ndescribe('Order Controller Tests', () => {\r\n  it('should create a new order', async () => {\r\n    const mockUser = { id: 1, username: 'testuser', email: 'user@example.com' };\r\n    const mockService = { id: 1, name: 'Test Service' };\r\n\r\n    // Mock the response for finding the user and service\r\n    (User.findByPk as jest.Mock).mockResolvedValueOnce(mockUser);\r\n    (Service.findByPk as jest.Mock).mockResolvedValueOnce(mockService);\r\n\r\n    // Mock the Order.create method to return a mock order\r\n    (Order.create as jest.Mock).mockResolvedValueOnce({\r\n      id: 1,\r\n      userId: mockUser.id,\r\n      serviceId: mockService.id,\r\n      orderDetails: 'Test order details',\r\n      status: 'Pending',\r\n    });\r\n\r\n    // Make the API request to create the order\r\n    const response = await request(app).post('/api/orders').send({\r\n      userId: mockUser.id,\r\n      serviceId: mockService.id,\r\n      orderDetails: 'Test order details',\r\n    });\r\n\r\n    // Assert the expected outcome\r\n    expect(response.status).toBe(201);\r\n    expect(response.body.message).toBe('Order created successfully');\r\n    expect(response.body.order.status).toBe('Pending');\r\n    expect(Order.create).toHaveBeenCalledWith({\r\n      userId: mockUser.id,\r\n      serviceId: mockService.id,\r\n      orderDetails: 'Test order details',\r\n    });\r\n  });\r\n\r\n  it('should return an error if user is not found', async () => {\r\n    const mockService = { id: 1, name: 'Test Service' };\r\n\r\n    // Mock the response for finding the user and service\r\n    (User.findByPk as jest.Mock).mockResolvedValueOnce(null); // No user found\r\n    (Service.findByPk as jest.Mock).mockResolvedValueOnce(mockService);\r\n\r\n    // Make the API request to create the order\r\n    const response = await request(app).post('/api/orders').send({\r\n      userId: 999, // Non-existing user\r\n      serviceId: mockService.id,\r\n      orderDetails: 'Test order details',\r\n    });\r\n\r\n    // Assert the expected outcome\r\n    expect(response.status).toBe(404);\r\n    expect(response.body.message).toBe('User not found');\r\n  });\r\n\r\n  it('should return an error if service is not found', async () => {\r\n    const mockUser = { id: 1, username: 'testuser', email: 'user@example.com' };\r\n\r\n    // Mock the response for finding the user and service\r\n    (User.findByPk as jest.Mock).mockResolvedValueOnce(mockUser);\r\n    (Service.findByPk as jest.Mock).mockResolvedValueOnce(null); // No service found\r\n\r\n    // Make the API request to create the order\r\n    const response = await request(app).post('/api/orders').send({\r\n      userId: mockUser.id,\r\n      serviceId: 999, // Non-existing service\r\n      orderDetails: 'Test order details',\r\n    });\r\n\r\n    // Assert the expected outcome\r\n    expect(response.status).toBe(404);\r\n    expect(response.body.message).toBe('Service not found');\r\n  });\r\n});\r\n"],"names":["jest","mock","findByPk","fn","create","findAll","destroy","appPath","path","resolve","__dirname","app","beforeAll","module","default","error","console","sequelize","sync","force","afterEach","clearAllMocks","afterAll","close","describe","it","mockUser","id","username","email","mockService","name","User","mockResolvedValueOnce","Service","Order","userId","serviceId","orderDetails","status","response","request","post","send","expect","toBe","body","message","order","toHaveBeenCalledWith"],"mappings":"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"}