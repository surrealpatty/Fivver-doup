{"version":3,"sources":["../../../src/test/role.test.ts"],"sourcesContent":["import request from 'supertest';\r\nimport { app } from '../index';  // Import the app instance\r\nimport jwt from 'jsonwebtoken'; // For generating tokens\r\nimport Service from '../models/services';  // Adjust path as needed\r\n\r\n// Helper function to generate JWT token with a role\r\nconst generateToken = (userId: string, role: 'Free' | 'Paid') => {\r\n  return jwt.sign({ id: userId, role }, process.env.JWT_SECRET as string, { expiresIn: '1h' });\r\n};\r\n\r\ndescribe('Role-based Access', () => {\r\n  const paidToken = generateToken('1', 'Paid');  // Generate token for paid user\r\n  const freeToken = generateToken('2', 'Free');  // Generate token for free user\r\n\r\n  // Test case for allowing paid users to access premium services\r\n  it('should allow paid users to access premium services', async () => {\r\n    const response = await request(app)\r\n      .get('/services/premium')\r\n      .set('Authorization', `Bearer ${paidToken}`); // Send the paid user's token\r\n\r\n    expect(response.status).toBe(200);\r\n    expect(response.body.message).toBe('Premium service access granted.');\r\n  });\r\n\r\n  // Test case for denying free users from accessing premium services\r\n  it('should deny free users from accessing premium services', async () => {\r\n    const response = await request(app)\r\n      .get('/services/premium')\r\n      .set('Authorization', `Bearer ${freeToken}`); // Send the free user's token\r\n\r\n    expect(response.status).toBe(403); // Forbidden\r\n    expect(response.body.message).toBe('Access denied. Only paid users can access this service.');\r\n  });\r\n});\r\n\r\n// Ensure the app uses a different port if needed for tests\r\ndescribe('Basic Test Suite', () => {\r\n  it('should run the test file successfully', () => {\r\n    console.log('Test file is running successfully!');\r\n    expect(true).toBe(true); // Simple test to verify the test file is running\r\n  });\r\n\r\n  // Test to check if the root endpoint is responding correctly\r\n  it('should respond with a message from the root endpoint', async () => {\r\n    const response = await request(app).get('/'); // Send a GET request to the root endpoint\r\n    expect(response.statusCode).toBe(200); // Expect a status code of 200 (OK)\r\n    expect(response.text).toBe('Fiverr backend is running'); // Expect the correct response message\r\n  });\r\n});\r\n"],"names":["generateToken","userId","role","jwt","sign","id","process","env","JWT_SECRET","expiresIn","describe","paidToken","freeToken","it","response","request","app","get","set","expect","status","toBe","body","message","console","log","statusCode","text"],"mappings":";;;;kEAAoB;uBACA;qEACJ;;;;;;AAGhB,oDAAoD;AACpD,MAAMA,gBAAgB,CAACC,QAAgBC;IACrC,OAAOC,qBAAG,CAACC,IAAI,CAAC;QAAEC,IAAIJ;QAAQC;IAAK,GAAGI,QAAQC,GAAG,CAACC,UAAU,EAAY;QAAEC,WAAW;IAAK;AAC5F;AAEAC,SAAS,qBAAqB;IAC5B,MAAMC,YAAYX,cAAc,KAAK,SAAU,+BAA+B;IAC9E,MAAMY,YAAYZ,cAAc,KAAK,SAAU,+BAA+B;IAE9E,+DAA+D;IAC/Da,GAAG,sDAAsD;QACvD,MAAMC,WAAW,MAAMC,IAAAA,kBAAO,EAACC,UAAG,EAC/BC,GAAG,CAAC,qBACJC,GAAG,CAAC,iBAAiB,CAAC,OAAO,EAAEP,WAAW,GAAG,6BAA6B;QAE7EQ,OAAOL,SAASM,MAAM,EAAEC,IAAI,CAAC;QAC7BF,OAAOL,SAASQ,IAAI,CAACC,OAAO,EAAEF,IAAI,CAAC;IACrC;IAEA,mEAAmE;IACnER,GAAG,0DAA0D;QAC3D,MAAMC,WAAW,MAAMC,IAAAA,kBAAO,EAACC,UAAG,EAC/BC,GAAG,CAAC,qBACJC,GAAG,CAAC,iBAAiB,CAAC,OAAO,EAAEN,WAAW,GAAG,6BAA6B;QAE7EO,OAAOL,SAASM,MAAM,EAAEC,IAAI,CAAC,MAAM,YAAY;QAC/CF,OAAOL,SAASQ,IAAI,CAACC,OAAO,EAAEF,IAAI,CAAC;IACrC;AACF;AAEA,2DAA2D;AAC3DX,SAAS,oBAAoB;IAC3BG,GAAG,yCAAyC;QAC1CW,QAAQC,GAAG,CAAC;QACZN,OAAO,MAAME,IAAI,CAAC,OAAO,iDAAiD;IAC5E;IAEA,6DAA6D;IAC7DR,GAAG,wDAAwD;QACzD,MAAMC,WAAW,MAAMC,IAAAA,kBAAO,EAACC,UAAG,EAAEC,GAAG,CAAC,MAAM,0CAA0C;QACxFE,OAAOL,SAASY,UAAU,EAAEL,IAAI,CAAC,MAAM,mCAAmC;QAC1EF,OAAOL,SAASa,IAAI,EAAEN,IAAI,CAAC,8BAA8B,sCAAsC;IACjG;AACF"}