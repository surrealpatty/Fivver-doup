{"version":3,"sources":["../../../src/middlewares/tierMiddleware.ts"],"sourcesContent":["import { Request, Response, NextFunction } from 'express';\r\nimport { UserPayload } from '../types/index'; // Ensure the import path is correct\r\n\r\n// Extending the Request type to include a user property typed as UserPayload\r\ninterface RequestWithUser extends Request {\r\n  user?: UserPayload; // Ensuring req.user is correctly typed\r\n}\r\n\r\n/**\r\n * Middleware to restrict access based on user tier.\r\n * @param requiredTier The required tier for access (e.g., \"paid\").\r\n */\r\nexport const checkTier = (requiredTier: string) => {\r\n  return (req: RequestWithUser, res: Response, next: NextFunction): void => {\r\n    // Check if the user's tier matches the required tier\r\n    if (req.user?.tier !== requiredTier) {\r\n      res.status(403).json({ message: `Access restricted to ${requiredTier} users only.` });\r\n      return;  // Explicitly return after sending a response\r\n    }\r\n    next();\r\n  };\r\n};\r\n"],"names":["checkTier","requiredTier","req","res","next","user","tier","status","json","message"],"mappings":";;;;+BAYaA;;;eAAAA;;;AAAN,MAAMA,YAAY,CAACC;IACxB,OAAO,CAACC,KAAsBC,KAAeC;QAC3C,qDAAqD;QACrD,IAAIF,IAAIG,IAAI,EAAEC,SAASL,cAAc;YACnCE,IAAII,MAAM,CAAC,KAAKC,IAAI,CAAC;gBAAEC,SAAS,CAAC,qBAAqB,EAAER,aAAa,YAAY,CAAC;YAAC;YACnF,QAAS,6CAA6C;QACxD;QACAG;IACF;AACF"}