{"version":3,"sources":["../../../src/middlewares/roleMiddleware.ts"],"sourcesContent":["// src/middlewares/roleMiddleware.ts\r\nimport { Request, Response, NextFunction } from 'express';\r\nimport { UserPayload } from '../types';  // Correct the import path\r\n\r\n// Extend the Request interface locally to include user\r\ninterface CustomAuthRequest extends Request {\r\n  user: UserPayload;  // Ensure `user` is required and properly typed\r\n}\r\n\r\n// Middleware to check the role of the user\r\nconst checkRole = (requiredRole: string) => {\r\n  return (req: CustomAuthRequest, res: Response, next: NextFunction) => {\r\n    const user = req.user;  // Now `user` should always exist and have the `role`\r\n\r\n    if (!user || !user.role) {\r\n      return res.status(403).json({ message: 'User role is missing or not authorized' });\r\n    }\r\n\r\n    if (user.role !== requiredRole) {\r\n      return res.status(403).json({ message: 'Forbidden: Insufficient role' });\r\n    }\r\n\r\n    next();  // Proceed if the user has the correct role\r\n  };\r\n};\r\n\r\nexport { checkRole };\r\n"],"names":["checkRole","requiredRole","req","res","next","user","role","status","json","message"],"mappings":"AAAA,oCAAoC;;;;;+BA0B3BA;;;eAAAA;;;AAjBT,2CAA2C;AAC3C,MAAMA,YAAY,CAACC;IACjB,OAAO,CAACC,KAAwBC,KAAeC;QAC7C,MAAMC,OAAOH,IAAIG,IAAI,EAAG,qDAAqD;QAE7E,IAAI,CAACA,QAAQ,CAACA,KAAKC,IAAI,EAAE;YACvB,OAAOH,IAAII,MAAM,CAAC,KAAKC,IAAI,CAAC;gBAAEC,SAAS;YAAyC;QAClF;QAEA,IAAIJ,KAAKC,IAAI,KAAKL,cAAc;YAC9B,OAAOE,IAAII,MAAM,CAAC,KAAKC,IAAI,CAAC;gBAAEC,SAAS;YAA+B;QACxE;QAEAL,QAAS,2CAA2C;IACtD;AACF"}