{"version":3,"sources":["../../../src/middlewares/roleMiddleware.ts"],"sourcesContent":["import { Request, Response, NextFunction } from 'express';\r\n\r\n/**\r\n * Middleware to enforce role-based access control.\r\n * @param requiredRole - The role required to access the route.\r\n */\r\nexport const checkRole = (requiredRole: string) => {\r\n  return (req: Request, res: Response, next: NextFunction): void => {\r\n    // Ensure `req.user` exists and contains a role\r\n    if (!req.user) {\r\n      res.status(401).json({ message: 'User not authenticated.' });\r\n      return;  // Explicitly end the middleware without returning a value\r\n    }\r\n\r\n    // Check if the user's role matches the required role\r\n    if (req.user.role !== requiredRole) {\r\n      res.status(403).json({ message: 'Access denied. Insufficient permissions.' });\r\n      return;  // Explicitly end the middleware without returning a value\r\n    }\r\n\r\n    // User has the required role; proceed to the next middleware or route handler\r\n    next();\r\n  };\r\n};\r\n"],"names":["checkRole","requiredRole","req","res","next","user","status","json","message","role"],"mappings":";;;;+BAMaA;;;eAAAA;;;AAAN,MAAMA,YAAY,CAACC;IACxB,OAAO,CAACC,KAAcC,KAAeC;QACnC,+CAA+C;QAC/C,IAAI,CAACF,IAAIG,IAAI,EAAE;YACbF,IAAIG,MAAM,CAAC,KAAKC,IAAI,CAAC;gBAAEC,SAAS;YAA0B;YAC1D,QAAS,0DAA0D;QACrE;QAEA,qDAAqD;QACrD,IAAIN,IAAIG,IAAI,CAACI,IAAI,KAAKR,cAAc;YAClCE,IAAIG,MAAM,CAAC,KAAKC,IAAI,CAAC;gBAAEC,SAAS;YAA2C;YAC3E,QAAS,0DAA0D;QACrE;QAEA,8EAA8E;QAC9EJ;IACF;AACF"}