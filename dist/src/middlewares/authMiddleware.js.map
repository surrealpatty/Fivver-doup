{"version":3,"sources":["../../../src/middlewares/authMiddleware.ts"],"sourcesContent":["// src/middlewares/authMiddleware.ts\r\n\r\nimport { Request, Response, NextFunction } from 'express';\r\nimport jwt from 'jsonwebtoken';\r\nimport { UserPayload } from '../types';\r\n\r\n// Define the AuthRequest type to include the user object\r\nexport interface AuthRequest extends Request {\r\n  user?: UserPayload; // The 'user' object is optional, matching the UserPayload structure\r\n}\r\n\r\n// Middleware to authenticate JWT and attach the decoded user to the request object\r\nexport const authenticateJWT = (req: AuthRequest, res: Response, next: NextFunction): Response | void => {\r\n  const token = req.headers['authorization']?.split(' ')[1];  // Token is expected as \"Bearer <token>\"\r\n\r\n  // If no token is provided, respond with a 401 Unauthorized error\r\n  if (!token) {\r\n    return res.status(401).json({ message: 'No token provided' });\r\n  }\r\n\r\n  // Verify the token and decode it\r\n  jwt.verify(token, process.env.JWT_SECRET as string, (err, decoded) => {\r\n    if (err) {\r\n      return res.status(403).json({ message: 'Token is invalid' });  // Token is invalid\r\n    }\r\n\r\n    // Attach the decoded user payload to the request object (req.user)\r\n    req.user = decoded as UserPayload; // Cast decoded object to UserPayload type\r\n    next();  // Proceed to the next middleware or route handler\r\n  });\r\n};\r\n"],"names":["authenticateJWT","req","res","next","token","headers","split","status","json","message","jwt","verify","process","env","JWT_SECRET","err","decoded","user"],"mappings":"AAAA,oCAAoC;;;;;+BAYvBA;;;eAAAA;;;qEATG;;;;;;AAST,MAAMA,kBAAkB,CAACC,KAAkBC,KAAeC;IAC/D,MAAMC,QAAQH,IAAII,OAAO,CAAC,gBAAgB,EAAEC,MAAM,IAAI,CAAC,EAAE,EAAG,wCAAwC;IAEpG,iEAAiE;IACjE,IAAI,CAACF,OAAO;QACV,OAAOF,IAAIK,MAAM,CAAC,KAAKC,IAAI,CAAC;YAAEC,SAAS;QAAoB;IAC7D;IAEA,iCAAiC;IACjCC,qBAAG,CAACC,MAAM,CAACP,OAAOQ,QAAQC,GAAG,CAACC,UAAU,EAAY,CAACC,KAAKC;QACxD,IAAID,KAAK;YACP,OAAOb,IAAIK,MAAM,CAAC,KAAKC,IAAI,CAAC;gBAAEC,SAAS;YAAmB,IAAK,mBAAmB;QACpF;QAEA,mEAAmE;QACnER,IAAIgB,IAAI,GAAGD,SAAwB,0CAA0C;QAC7Eb,QAAS,kDAAkD;IAC7D;AACF"}