{"version":3,"sources":["../../src/index.ts"],"sourcesContent":["import express from 'express';\r\nimport { sequelize } from './config/database'; // Correct path to sequelize instance\r\nimport { User } from './models/user'; // Correct path to the User model\r\nimport userRouter from './routes/user'; // Correct path to userRouter\r\nimport cors from 'cors';\r\n\r\n// Create Express app instance\r\nconst app = express();\r\n\r\n// Set up the server port\r\nconst port = process.env.PORT || 3000; // Port is now 3000\r\n\r\n// Middleware to parse JSON bodies\r\napp.use(express.json());\r\n\r\n// Enable CORS (if you need it, for handling cross-origin requests)\r\napp.use(cors());\r\n\r\n// Example route\r\napp.get('/', (req, res) => {\r\n  res.send('Welcome to Fiverr Clone!');\r\n});\r\n\r\n// Function to fetch users as a test (or could be moved to routes later)\r\nasync function fetchUsers() {\r\n  try {\r\n    const users = await User.findAll({ raw: true }); // Use 'raw: true' to get plain data\r\n    console.log('Users:', users); // Log users to verify\r\n    if (users.length === 0) {\r\n      console.log('No users found.');\r\n    }\r\n  } catch (error) {\r\n    console.error('Error fetching users:', error);\r\n  }\r\n}\r\n\r\n// Synchronize models with the database\r\nsequelize.sync({ alter: true }) // Using 'alter' instead of 'force' to avoid dropping tables\r\n  .then(() => {\r\n    console.log('Models are synchronized with the database.');\r\n    \r\n    // Call fetchUsers() after models are synced\r\n    fetchUsers();\r\n  })\r\n  .catch((error: Error) => {\r\n    console.error('Error syncing models:', error);\r\n  });\r\n\r\n// Use the userRouter for routes starting with /api/users\r\napp.use('/api/users', userRouter); // Register the user routes under /api/users\r\n\r\n// Start the server\r\napp.listen(port, () => {\r\n  console.log(`Server is running on port ${port}`);\r\n});\r\n\r\n// Export app for use in testing or elsewhere (if necessary)\r\nexport { app };  // Optional: Exporting app in case it's needed for tests or elsewhere\r\n"],"names":["app","express","port","process","env","PORT","use","json","cors","get","req","res","send","fetchUsers","users","User","findAll","raw","console","log","length","error","sequelize","sync","alter","then","catch","userRouter","listen"],"mappings":";;;;+BAyDSA;;;eAAAA;;;gEAzDW;0BACM;sBACL;8DACE;6DACN;;;;;;AAEjB,8BAA8B;AAC9B,MAAMA,MAAMC,IAAAA,gBAAO;AAEnB,yBAAyB;AACzB,MAAMC,OAAOC,QAAQC,GAAG,CAACC,IAAI,IAAI,MAAM,mBAAmB;AAE1D,kCAAkC;AAClCL,IAAIM,GAAG,CAACL,gBAAO,CAACM,IAAI;AAEpB,mEAAmE;AACnEP,IAAIM,GAAG,CAACE,IAAAA,aAAI;AAEZ,gBAAgB;AAChBR,IAAIS,GAAG,CAAC,KAAK,CAACC,KAAKC;IACjBA,IAAIC,IAAI,CAAC;AACX;AAEA,wEAAwE;AACxE,eAAeC;IACb,IAAI;QACF,MAAMC,QAAQ,MAAMC,UAAI,CAACC,OAAO,CAAC;YAAEC,KAAK;QAAK,IAAI,oCAAoC;QACrFC,QAAQC,GAAG,CAAC,UAAUL,QAAQ,sBAAsB;QACpD,IAAIA,MAAMM,MAAM,KAAK,GAAG;YACtBF,QAAQC,GAAG,CAAC;QACd;IACF,EAAE,OAAOE,OAAO;QACdH,QAAQG,KAAK,CAAC,yBAAyBA;IACzC;AACF;AAEA,uCAAuC;AACvCC,mBAAS,CAACC,IAAI,CAAC;IAAEC,OAAO;AAAK,GAAG,4DAA4D;CACzFC,IAAI,CAAC;IACJP,QAAQC,GAAG,CAAC;IAEZ,4CAA4C;IAC5CN;AACF,GACCa,KAAK,CAAC,CAACL;IACNH,QAAQG,KAAK,CAAC,yBAAyBA;AACzC;AAEF,yDAAyD;AACzDrB,IAAIM,GAAG,CAAC,cAAcqB,cAAU,GAAG,4CAA4C;AAE/E,mBAAmB;AACnB3B,IAAI4B,MAAM,CAAC1B,MAAM;IACfgB,QAAQC,GAAG,CAAC,CAAC,0BAA0B,EAAEjB,MAAM;AACjD;CAGiB,qEAAqE"}