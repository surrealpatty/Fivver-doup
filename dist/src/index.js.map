{"version":3,"sources":["../../src/index.ts"],"sourcesContent":["import express from 'express';\r\nimport { sequelize } from './config/database'; // Correct path to sequelize instance\r\nimport { User } from './models/user'; // Correct path to the User model\r\nimport userRouter from './routes/user'; // Correct path to userRouter\r\nimport cors from 'cors';\r\n\r\n// Create Express app instance\r\nconst app = express();\r\n\r\n// Set up the server port\r\nconst port = process.env.PORT || 5000; // Port is now 5000 as per your original setup\r\n\r\n// Middleware to parse JSON bodies\r\napp.use(express.json());\r\n\r\n// Enable CORS (if you need it, for handling cross-origin requests)\r\napp.use(cors());\r\n\r\n// Example route\r\napp.get('/', (req, res) => {\r\n  res.send('Welcome to Fiverr Clone!');\r\n});\r\n\r\n// Database connection check\r\nsequelize\r\n  .authenticate()\r\n  .then(() => {\r\n    console.log('Database connection established.');\r\n  })\r\n  .catch((error: Error) => {\r\n    console.error('Unable to connect to the database:', error);\r\n  });\r\n\r\n// Fetch users as a test on startup\r\nconst fetchUsers = async () => {\r\n  try {\r\n    const users = await User.findAll(); // Fetch all users\r\n    console.log('Users:', users.map(user => user.toJSON())); // Log user data\r\n  } catch (error) {\r\n    console.error('Error fetching users:', error);\r\n  }\r\n};\r\n\r\n// Call the function to fetch users\r\nfetchUsers();\r\n\r\n// Use the userRouter for routes starting with /api/users\r\napp.use('/api/users', userRouter); // Register the user routes under /api/users\r\n\r\n// Start the server\r\napp.listen(port, () => {\r\n  console.log(`Server is running on port ${port}`);\r\n});\r\n\r\n// Export app for use in testing or elsewhere (if necessary)\r\nexport { app };  // Optional: Exporting app in case it's needed for tests or elsewhere\r\n"],"names":["app","express","port","process","env","PORT","use","json","cors","get","req","res","send","sequelize","authenticate","then","console","log","catch","error","fetchUsers","users","User","findAll","map","user","toJSON","userRouter","listen"],"mappings":";;;;+BAuDSA;;;eAAAA;;;gEAvDW;0BACM;sBACL;8DACE;6DACN;;;;;;AAEjB,8BAA8B;AAC9B,MAAMA,MAAMC,IAAAA,gBAAO;AAEnB,yBAAyB;AACzB,MAAMC,OAAOC,QAAQC,GAAG,CAACC,IAAI,IAAI,MAAM,8CAA8C;AAErF,kCAAkC;AAClCL,IAAIM,GAAG,CAACL,gBAAO,CAACM,IAAI;AAEpB,mEAAmE;AACnEP,IAAIM,GAAG,CAACE,IAAAA,aAAI;AAEZ,gBAAgB;AAChBR,IAAIS,GAAG,CAAC,KAAK,CAACC,KAAKC;IACjBA,IAAIC,IAAI,CAAC;AACX;AAEA,4BAA4B;AAC5BC,mBAAS,CACNC,YAAY,GACZC,IAAI,CAAC;IACJC,QAAQC,GAAG,CAAC;AACd,GACCC,KAAK,CAAC,CAACC;IACNH,QAAQG,KAAK,CAAC,sCAAsCA;AACtD;AAEF,mCAAmC;AACnC,MAAMC,aAAa;IACjB,IAAI;QACF,MAAMC,QAAQ,MAAMC,UAAI,CAACC,OAAO,IAAI,kBAAkB;QACtDP,QAAQC,GAAG,CAAC,UAAUI,MAAMG,GAAG,CAACC,CAAAA,OAAQA,KAAKC,MAAM,MAAM,gBAAgB;IAC3E,EAAE,OAAOP,OAAO;QACdH,QAAQG,KAAK,CAAC,yBAAyBA;IACzC;AACF;AAEA,mCAAmC;AACnCC;AAEA,yDAAyD;AACzDpB,IAAIM,GAAG,CAAC,cAAcqB,cAAU,GAAG,4CAA4C;AAE/E,mBAAmB;AACnB3B,IAAI4B,MAAM,CAAC1B,MAAM;IACfc,QAAQC,GAAG,CAAC,CAAC,0BAA0B,EAAEf,MAAM;AACjD;CAGiB,qEAAqE"}