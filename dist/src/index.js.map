{"version":3,"sources":["../../src/index.ts"],"sourcesContent":["import express from 'express';\r\nimport cors from 'cors';\r\nimport { sequelize } from './config/database';  // Import sequelize instance\r\nimport userRouter from './routes/user';  // Import the user routes\r\nimport dotenv from 'dotenv';  // To load environment variables\r\n\r\n// Load environment variables from .env file\r\ndotenv.config();\r\n\r\n// Create Express app instance\r\nconst app = express();\r\n\r\n// Set up the server port\r\nconst port = process.env.PORT || 3000; // Port is now 3000\r\n\r\n// Middleware to parse JSON bodies\r\napp.use(express.json());\r\n\r\n// Enable CORS (if needed for handling cross-origin requests)\r\napp.use(cors());\r\n\r\n// Example route to test the server\r\napp.get('/', (req, res) => {\r\n  res.send('Welcome to Fiverr Clone!');\r\n});\r\n\r\n// Synchronize models with the database\r\nsequelize.sync({ alter: true }) // Using 'alter' to ensure no data loss\r\n  .then(() => {\r\n    console.log('Models are synchronized with the database.');\r\n  })\r\n  .catch((error: Error) => {\r\n    console.error('Error syncing models:', error);\r\n  });\r\n\r\n// Use the userRouter for routes starting with /api/users\r\napp.use('/api/users', userRouter); // Register the user routes under /api/users\r\n\r\n// Test database connection\r\nsequelize.authenticate()\r\n  .then(() => {\r\n    console.log('Database connection established.');\r\n  })\r\n  .catch((error) => {\r\n    console.error('Unable to connect to the database:', error);\r\n  });\r\n\r\n// Start the server\r\napp.listen(port, () => {\r\n  console.log(`Server is running on port ${port}`);\r\n});\r\n\r\n// Export app for use in testing or elsewhere (if necessary)\r\nexport { app };  // Optional: Exporting app in case it's needed for tests or elsewhere\r\n"],"names":["app","dotenv","config","express","port","process","env","PORT","use","json","cors","get","req","res","send","sequelize","sync","alter","then","console","log","catch","error","userRouter","authenticate","listen"],"mappings":";;;;+BAqDSA;;;eAAAA;;;gEArDW;6DACH;0BACS;6DACH;+DACJ;;;;;;AAEnB,4CAA4C;AAC5CC,eAAM,CAACC,MAAM;AAEb,8BAA8B;AAC9B,MAAMF,MAAMG,IAAAA,gBAAO;AAEnB,yBAAyB;AACzB,MAAMC,OAAOC,QAAQC,GAAG,CAACC,IAAI,IAAI,MAAM,mBAAmB;AAE1D,kCAAkC;AAClCP,IAAIQ,GAAG,CAACL,gBAAO,CAACM,IAAI;AAEpB,6DAA6D;AAC7DT,IAAIQ,GAAG,CAACE,IAAAA,aAAI;AAEZ,mCAAmC;AACnCV,IAAIW,GAAG,CAAC,KAAK,CAACC,KAAKC;IACjBA,IAAIC,IAAI,CAAC;AACX;AAEA,uCAAuC;AACvCC,mBAAS,CAACC,IAAI,CAAC;IAAEC,OAAO;AAAK,GAAG,uCAAuC;CACpEC,IAAI,CAAC;IACJC,QAAQC,GAAG,CAAC;AACd,GACCC,KAAK,CAAC,CAACC;IACNH,QAAQG,KAAK,CAAC,yBAAyBA;AACzC;AAEF,yDAAyD;AACzDtB,IAAIQ,GAAG,CAAC,cAAce,aAAU,GAAG,4CAA4C;AAE/E,2BAA2B;AAC3BR,mBAAS,CAACS,YAAY,GACnBN,IAAI,CAAC;IACJC,QAAQC,GAAG,CAAC;AACd,GACCC,KAAK,CAAC,CAACC;IACNH,QAAQG,KAAK,CAAC,sCAAsCA;AACtD;AAEF,mBAAmB;AACnBtB,IAAIyB,MAAM,CAACrB,MAAM;IACfe,QAAQC,GAAG,CAAC,CAAC,0BAA0B,EAAEhB,MAAM;AACjD;CAGiB,qEAAqE"}